@model FarmTrack.Models.User

@{
    ViewBag.Title = "Edit User";
}

<style>
    :root {
        --color-earth: #8B7355;
        --color-soil: #654321;
        --color-wheat: #F5DEB3;
        --color-hay: #DAA520;
        --border-radius: 12px;
        --card-shadow: 0 6px 18px rgba(0,0,0,0.1);
    }

    .page-header {
        margin-bottom: 30px;
        padding-bottom: 15px;
        border-bottom: 2px solid var(--color-wheat);
    }

    .form-container {
        background-color: white;
        border-radius: var(--border-radius);
        box-shadow: var(--card-shadow);
        padding: 30px;
        margin-bottom: 30px;
    }

    .form-group {
        margin-bottom: 20px;
    }

    .control-label {
        font-weight: 600;
        color: var(--color-soil);
    }

    .form-control {
        border-radius: 6px;
        border: 1px solid #ddd;
        padding: 10px 15px;
        transition: border-color 0.3s;
    }

        .form-control:focus {
            border-color: var(--color-earth);
            box-shadow: 0 0 0 0.2rem rgba(139, 115, 85, 0.25);
        }

        .form-control[readonly] {
            background-color: #f8f8f8;
        }

    .btn-primary {
        background-color: var(--color-earth);
        border-color: var(--color-earth);
        color: white;
        padding: 10px 25px;
        border-radius: 6px;
        font-weight: 600;
        transition: all 0.3s;
    }

        .btn-primary:hover {
            background-color: var(--color-hay);
            border-color: var(--color-hay);
            color: white;
        }

    .btn-secondary {
        background-color: #f8f8f8;
        border-color: #ddd;
        color: var(--color-soil);
        padding: 10px 25px;
        border-radius: 6px;
        font-weight: 600;
        transition: all 0.3s;
    }

        .btn-secondary:hover {
            background-color: var(--color-wheat);
            border-color: var(--color-wheat);
            color: var(--color-soil);
        }

    .btn-warning {
        background-color: var(--color-hay);
        border-color: var(--color-hay);
        color: white;
    }

    .actions-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 30px;
    }

    .section-divider {
        border-top: 1px solid #eee;
        margin: 25px 0;
    }

    .radio-group {
        display: flex;
        gap: 20px;
        padding: 10px 0;
    }

    .radio-container {
        display: flex;
        align-items: center;
        gap: 8px;
    }

        .radio-container input[type="radio"] {
            accent-color: var(--color-earth);
        }

    .text-danger {
        color: #dc3545;
        font-size: 0.9rem;
        margin-top: 5px;
    }

    .form-section {
        margin-bottom: 30px;
    }

    .form-section-title {
        color: var(--color-soil);
        font-weight: 600;
        margin-bottom: 15px;
        padding-bottom: 10px;
        border-bottom: 1px solid var(--color-wheat);
    }

    .status-badge {
        padding: 4px 8px;
        border-radius: 4px;
        font-size: 0.8rem;
        font-weight: 600;
    }

    .badge-online {
        background-color: #28a745;
        color: white;
    }

    .badge-offline {
        background-color: #6c757d;
        color: white;
    }

    .driver-status-card {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        border-left: 4px solid var(--color-hay);
        padding: 15px;
        border-radius: 6px;
        margin-bottom: 20px;
    }

    .toggle-switch {
        position: relative;
        display: inline-block;
        width: 50px;
        height: 24px;
    }

        .toggle-switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

        .toggle-switch .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #ccc;
            transition: .4s;
            border-radius: 24px;
        }

            .toggle-switch .slider:before {
                position: absolute;
                content: "";
                height: 16px;
                width: 16px;
                left: 4px;
                bottom: 4px;
                background-color: white;
                transition: .4s;
                border-radius: 50%;
            }

        .toggle-switch input:checked + .slider {
            background-color: var(--color-earth);
        }

            .toggle-switch input:checked + .slider:before {
                transform: translateX(26px);
            }

    .form-text {
        font-size: 0.85rem;
        color: #6c757d;
    }

    .location-info {
        background-color: #f8f9fa;
        padding: 10px;
        border-radius: 4px;
        font-family: monospace;
        font-size: 0.9rem;
    }
</style>

<div class="page-header">
    <h2>Edit User Profile</h2>
    <p class="lead">Update user information and settings</p>
</div>

<div class="form-container">
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(model => model.UserId)
        @Html.HiddenFor(model => model.PasswordHash)
        @Html.HiddenFor(model => model.DateRegistered)

        <!-- Personal Information Section -->
        <div class="form-section">
            <h4 class="form-section-title">Personal Information</h4>

            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.FullName, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.FullName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.FullName, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.PhoneNumber, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.PhoneNumber, new { htmlAttributes = new { @class = "form-control", placeholder = "+27 12 345 6789" } })
                        @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Department, htmlAttributes: new { @class = "control-label" })
                        @Html.TextBoxFor(model => model.Department, new { @class = "form-control", placeholder = "e.g., Delivery, Sales, Management" })
                        @Html.ValidationMessageFor(model => model.Department, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label" })
                @Html.TextAreaFor(model => model.Address, new { @class = "form-control", rows = 3, placeholder = "Full physical address for delivery purposes" })
                @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="section-divider"></div>

        <!-- Account Information Section -->
        <div class="form-section">
            <h4 class="form-section-title">Account Information</h4>

            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.ProfilePictureUrl, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.ProfilePictureUrl, new { htmlAttributes = new { @class = "form-control", placeholder = "https://example.com/profile.jpg" } })
                        @Html.ValidationMessageFor(model => model.ProfilePictureUrl, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.ID, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.ID, new { htmlAttributes = new { @class = "form-control", placeholder = "ID Number or Employee ID" } })
                        @Html.ValidationMessageFor(model => model.ID, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Role, htmlAttributes: new { @class = "control-label" })
                <div class="radio-group">
                    <div class="radio-container">
                        @Html.RadioButtonFor(model => model.Role, "User", new { id = "role-user" })
                        <label for="role-user">User</label>
                    </div>
                    <div class="radio-container">
                        @Html.RadioButtonFor(model => model.Role, "Admin", new { id = "role-admin" })
                        <label for="role-admin">Admin</label>
                    </div>
                    <div class="radio-container">
                        @Html.RadioButtonFor(model => model.Role, "Owner", new { id = "role-owner" })
                        <label for="role-owner">Owner</label>
                    </div>
                </div>
                @Html.ValidationMessageFor(model => model.Role, "", new { @class = "text-danger" })
            </div>

            <div class="form-group">
                <div class="form-check">
                    @Html.CheckBoxFor(model => model.IsActive, new { @class = "form-check-input" })
                    @Html.LabelFor(model => model.IsActive, "Active Account", new { @class = "form-check-label control-label" })
                </div>
                <small class="form-text">Deactivate to prevent user from logging in</small>
            </div>
        </div>

        <div class="section-divider"></div>

        <!-- Delivery Driver Information Section -->
        <div class="form-section">
            <h4 class="form-section-title">Delivery Driver Information</h4>

            <div class="driver-status-card">
                <div class="row">
                    <div class="col-md-6">
                        <strong>Current Driver Status:</strong>
                        @if (Model.IsOnlineAsDriver)
                        {
                            <span class="status-badge badge-online">🟢 ONLINE AS DRIVER</span>
                        }
                        else
                        {
                            <span class="status-badge badge-offline">⚫ OFFLINE</span>
                        }
                    </div>
                    <div class="col-md-6">
                        <strong>Last Online:</strong>
                        @(Model.LastOnlineTime?.ToString("g") ?? "Never")
                    </div>
                </div>
                @if (Model.CurrentLatitude.HasValue && Model.CurrentLongitude.HasValue)
                {
                    <div class="mt-2">
                        <strong>Last Location:</strong>
                        <div class="location-info">
                            @Model.CurrentLatitude.Value.ToString("F6"), @Model.CurrentLongitude.Value.ToString("F6")
                        </div>
                    </div>
                }
            </div>

            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.VehicleType, htmlAttributes: new { @class = "control-label" })
                        @Html.DropDownListFor(model => model.VehicleType,
                            new SelectList(new[]
                            {
                                new { Value = "", Text = "Select Vehicle Type" },
                                new { Value = "Car", Text = "Car" },
                                new { Value = "Bike", Text = "Motorcycle/Bike" },
                                new { Value = "Scooter", Text = "Scooter" },
                                new { Value = "Van", Text = "Van" },
                                new { Value = "Truck", Text = "Truck" },
                                new { Value = "Bakkie", Text = "Bakkie (Pickup)" }
                            }, "Value", "Text", Model.VehicleType),
                            new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.VehicleType, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.VehicleNumber, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.VehicleNumber, new { htmlAttributes = new { @class = "form-control", placeholder = "CA 123-456 or GP 789-012" } })
                        @Html.ValidationMessageFor(model => model.VehicleNumber, "", new { @class = "text-danger" })
                        <small class="form-text">South African license plate format</small>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-12">
                    <div class="form-group">
                        <label class="control-label">Driver Capabilities</label>
                        <div class="mt-2">
                            <div class="form-check">
                                @Html.CheckBoxFor(model => model.IsOnlineAsDriver, new { @class = "form-check-input", id = "driverEnabled" })
                                <label class="form-check-label control-label" for="driverEnabled">
                                    Enable as Delivery Driver
                                </label>
                            </div>
                            <small class="form-text">
                                When enabled, this user can be assigned as a delivery driver and use the delivery dashboard.
                                Admins and Owners are automatically eligible as drivers.
                            </small>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Current Location Information (Read-only) -->
            @if (Model.CurrentLatitude.HasValue && Model.CurrentLongitude.HasValue)
            {
                <div class="form-group">
                    <label class="control-label">Current GPS Location</label>
                    <div class="location-info">
                        Latitude: @Model.CurrentLatitude.Value.ToString("F6")<br>
                        Longitude: @Model.CurrentLongitude.Value.ToString("F6")<br>
                        Last Updated: @Model.LastOnlineTime?.ToString("f")
                    </div>
                    <small class="form-text">
                        Location is automatically updated when driver goes online. This field is read-only.
                    </small>
                </div>
            }
        </div>

        <div class="section-divider"></div>

        <!-- Additional Information Section -->
        <div class="form-section">
            <h4 class="form-section-title">Additional Information</h4>

            <div class="form-group">
                @Html.LabelFor(model => model.CV, htmlAttributes: new { @class = "control-label" })
                @Html.TextAreaFor(model => model.CV, new { @class = "form-control", rows = 4, placeholder = "Driver qualifications, experience, or additional notes..." })
                @Html.ValidationMessageFor(model => model.CV, "", new { @class = "text-danger" })
                <small class="form-text">Optional: Driver qualifications, experience, or special notes</small>
            </div>
        </div>

        <!-- Action Buttons -->
        <div class="actions-row">
            <div>
                <a href="@Url.Action("Index", "Users")" class="btn btn-secondary">
                    <i class="fas fa-arrow-left"></i> Back to List
                </a>
                <a href="@Url.Action("Details", new { id = Model.UserId })" class="btn btn-info">
                    <i class="fas fa-eye"></i> View Details
                </a>
            </div>
            <div>
                <button type="submit" class="btn btn-primary">
                    <i class="fas fa-save"></i> Save Changes
                </button>
                @if (Session["Role"]?.ToString() == "Owner")
                {
                    <a href="@Url.Action("Delete", new { id = Model.UserId })" class="btn btn-danger">
                        <i class="fas fa-trash"></i> Delete User
                    </a>
                }
            </div>
        </div>
    }
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/js/all.min.js"></script>

    <script>
        $(document).ready(function () {
            // Show/hide driver fields based on role
            function toggleDriverFields() {
                const role = $('input[name="Role"]:checked').val();
                const isAdminOrOwner = role === 'Admin' || role === 'Owner';

                if (isAdminOrOwner) {
                    $('.driver-status-card').show();
                    $('#driverEnabled').closest('.form-group').show();
                    $('#VehicleType').closest('.form-group').show();
                    $('#VehicleNumber').closest('.form-group').show();
                } else {
                    $('.driver-status-card').hide();
                    $('#driverEnabled').closest('.form-group').hide();
                    $('#VehicleType').closest('.form-group').hide();
                    $('#VehicleNumber').closest('.form-group').hide();
                    $('#driverEnabled').prop('checked', false);
                }
            }

            // Initial toggle
            toggleDriverFields();

            // Toggle on role change
            $('input[name="Role"]').change(function () {
                toggleDriverFields();
            });

            // Vehicle number formatting
            $('#VehicleNumber').on('blur', function () {
                let value = $(this).val().toUpperCase().trim();
                // Basic South African plate format validation
                if (value && !value.match(/^[A-Z]{2}\s?\d{3}[- ]?\d{3}$/)) {
                    alert('Please use South African license plate format: CA 123-456 or GP789012');
                }
                $(this).val(value);
            });

            // Phone number formatting
            $('#PhoneNumber').on('blur', function () {
                let value = $(this).val().trim();
                if (value && !value.startsWith('+27') && !value.startsWith('0')) {
                    alert('Please use South African phone format: +27 12 345 6789 or 012 345 6789');
                }
            });
        });
    </script>
}