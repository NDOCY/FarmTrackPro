@model FarmTrack.Models.EquipmentRepair
@using FarmTrack.Models
@{
    ViewBag.Title = "Schedule Repair";
}

<style>
    /* Custom Color Scheme */
    :root {
        --color-earth: #8B7355; /* Primary */
        --color-soil: #654321; /* Secondary */
        --color-foliage: #4CAF50; /* Tertiary */
        --color-wheat: #F5DEB3; /* Accent */
        --color-danger: #FF6B6B; /* Error */
        --color-white: #FFFFFF; /* Neutral */
        --color-warning: #FFC107; /* Warning */
    }

    /* Page Header */
    .page-header {
        background-color: var(--color-wheat);
        padding: 20px;
        border-radius: 8px;
        margin-bottom: 20px;
    }

        .page-header h2 {
            color: var(--color-soil);
            font-weight: 700;
            margin-bottom: 0;
        }

    /* Form Container */
    .form-container {
        background-color: var(--color-white);
        border: 1px solid var(--color-wheat);
        border-radius: 8px;
        padding: 20px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        max-width: 700px;
        margin: auto;
    }

    /* Form Styling */
    .form-group {
        margin-bottom: 15px;
    }

        .form-group label {
            color: var(--color-soil);
            font-weight: 500;
            display: block;
            margin-bottom: 5px;
        }

    .form-control {
        border: 1px solid var(--color-wheat);
        border-radius: 4px;
        padding: 8px;
        width: 100%;
    }

        .form-control:focus {
            border-color: var(--color-earth);
            box-shadow: 0 0 5px rgba(139, 115, 85, 0.5);
            outline: none;
        }

    textarea.form-control {
        resize: vertical;
        min-height: 100px;
    }

    /* Input Group Styling */
    .input-group {
        position: relative;
        display: flex;
        flex-wrap: wrap;
        align-items: stretch;
        width: 100%;
    }

    .input-group-prepend {
        display: flex;
        margin-right: -1px;
    }

    .input-group-text {
        display: flex;
        align-items: center;
        padding: 0.375rem 0.75rem;
        margin-bottom: 0;
        font-size: 1rem;
        font-weight: 400;
        line-height: 1.5;
        color: var(--color-white);
        text-align: center;
        white-space: nowrap;
        background-color: var(--color-earth);
        border: 1px solid var(--color-earth);
        border-radius: 4px 0 0 4px;
    }

    /* Button Styling */
    .btn {
        border-radius: 6px;
        padding: 10px 16px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .btn-primary {
        background-color: var(--color-earth);
        border-color: var(--color-earth);
        color: var(--color-white);
    }

        .btn-primary:hover {
            background-color: var(--color-soil);
            border-color: var(--color-soil);
        }

    .btn-secondary {
        background-color: var(--color-wheat);
        border-color: var(--color-wheat);
        color: var(--color-soil);
    }

        .btn-secondary:hover {
            background-color: #e5cca3;
            border-color: #e5cca3;
        }

    /* Technician Type Section */
    .technician-section {
        background-color: #f9f9f9;
        border-radius: 8px;
        padding: 15px;
        margin-bottom: 15px;
        border-left: 3px solid var(--color-earth);
    }

    /* Field Containers */
    .field-container {
        padding: 15px;
        background-color: #f9f9f9;
        border-radius: 8px;
        margin-bottom: 15px;
        border-left: 3px solid var(--color-wheat);
    }

    /* Action Buttons Container */
    .action-buttons {
        display: flex;
        gap: 10px;
        margin-top: 20px;
    }

    /* Field Validation Styling */
    .field-validation-error {
        color: var(--color-danger);
        font-size: 0.875rem;
        margin-top: 5px;
        display: block;
    }

    /* Alert Styling */
    .alert {
        padding: 15px;
        margin-bottom: 20px;
        border: 1px solid transparent;
        border-radius: 4px;
    }

    .alert-warning {
        color: #856404;
        background-color: #fff3cd;
        border-color: #ffeaa7;
    }

    .alert-danger {
        color: #721c24;
        background-color: #f8d7da;
        border-color: #f5c6cb;
    }

    .alert h5 {
        margin-top: 0;
        color: inherit;
    }

    /* List Group Styling */
    .list-group {
        display: flex;
        flex-direction: column;
        padding-left: 0;
        margin-bottom: 0;
    }

    .list-group-item {
        position: relative;
        display: block;
        padding: 10px 15px;
        margin-bottom: -1px;
        background-color: #fff;
        border: 1px solid rgba(0,0,0,.125);
    }

    .list-group-item:first-child {
        border-top-left-radius: 4px;
        border-top-right-radius: 4px;
    }

    .list-group-item:last-child {
        margin-bottom: 0;
        border-bottom-right-radius: 4px;
        border-bottom-left-radius: 4px;
    }

    /* In-house warning styling */
    .inhouse-warning {
        background-color: #f8d7da;
        color: #721c24;
        border-color: #f5c6cb;
    }
</style>

<!-- Page Header -->
<div class="page-header">
    <h2><i class="fas fa-tools"></i> Schedule Repair</h2>
</div>

<div class="form-container">
    @using (Html.BeginForm("ScheduleRepair", "Equipment", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(model => model.EquipmentId)

        <div class="form-group technician-section">
            <label for="TechnicianType"><i class="fas fa-user-cog"></i> Technician Type</label>
            <div class="input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text"><i class="fas fa-user-cog"></i></span>
                </div>
                @Html.DropDownListFor(model => model.TechnicianType, new SelectList(new[] {
                    new { Value = "In-house", Text = "In-house" },
                    new { Value = "Outsourced", Text = "Outsourced" }
                }, "Value", "Text"), "Select Technician Type", new { @class = "form-control", id = "TechnicianType" })
            </div>
            @Html.ValidationMessageFor(model => model.TechnicianType, "", new { @class = "field-validation-error" })
        </div>

        <!-- Warning for In-house repairs (when duplicate exists) -->
        <div id="InHouseWarning" class="alert alert-danger inhouse-warning" style="display:none;">
            <h5><i class="fas fa-exclamation-triangle"></i> Cannot Schedule In-House Repair</h5>
            <p>An in-house repair for this equipment is already scheduled and not yet completed. Please complete the existing repair before scheduling a new one.</p>
            @if (ViewBag.ActiveRepairs != null && ((List<EquipmentRepair>)ViewBag.ActiveRepairs).Any(r => r.TechnicianType == "In-house"))
            {
                <strong>Existing In-House Repair:</strong>
                <ul class="list-group" style="margin-top: 10px;">
                    @foreach (var repair in ((List<EquipmentRepair>)ViewBag.ActiveRepairs).Where(r => r.TechnicianType == "In-house"))
                    {
                        <li class="list-group-item">
                            <strong>Date:</strong> @repair.RepairDate.ToString("yyyy-MM-dd")<br />
                            <strong>Technician:</strong> @(repair.InHouseUser?.FullName ?? "Not assigned")<br />
                            <strong>Description:</strong> @repair.Description
                        </li>
                    }
                </ul>
            }
        </div>

        <!-- Information for Outsourced repairs (showing existing repairs) -->
        <div id="OutsourcedInfo" class="alert alert-warning" style="display:none;">
            <h5><i class="fas fa-info-circle"></i> Existing Scheduled Repairs</h5>
            @if (ViewBag.ActiveRepairs != null && ((List<EquipmentRepair>)ViewBag.ActiveRepairs).Any())
            {
                <p>The following repairs are currently scheduled for this equipment:</p>
                <ul class="list-group">
                    @foreach (var repair in (List<EquipmentRepair>)ViewBag.ActiveRepairs)
                    {
                        <li class="list-group-item">
                            <strong>Date:</strong> @repair.RepairDate.ToString("yyyy-MM-dd")<br />
                            <strong>Type:</strong> @repair.TechnicianType<br />
                            @if (repair.TechnicianType == "In-house")
                            {
                                <strong>Technician:</strong> @(repair.InHouseUser?.FullName ?? "Not assigned")<br />
                            }
                            else
                            {
                                <strong>Technician:</strong> @repair.OutsourcedTechnicianName<br />
                            }
                            <strong>Description:</strong> @repair.Description
                        </li>
                    }
                </ul>
                <p style="margin-top: 10px;"><em>You can still schedule additional outsourced repairs if needed.</em></p>
            }
            else
            {
                <p>No repairs are currently scheduled for this equipment.</p>
            }
        </div>

        <div id="InHouseFields" class="field-container" style="display:none;">
            <label for="InHouseUserId"><i class="fas fa-hard-hat"></i> Select Maintenance Technician</label>
            <div class="input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text"><i class="fas fa-hard-hat"></i></span>
                </div>
                @Html.DropDownListFor(model => model.InHouseUserId, (IEnumerable<SelectListItem>)ViewBag.MaintenanceUsers, "Select Technician", new { @class = "form-control" })
            </div>
            @Html.ValidationMessageFor(model => model.InHouseUserId, "", new { @class = "field-validation-error" })
        </div>

        <div id="OutsourcedFields" class="field-container" style="display:none;">
            <div class="form-group">
                <label for="OutsourcedTechnicianName"><i class="fas fa-user-tie"></i> Technician Name</label>
                <div class="input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text"><i class="fas fa-user-tie"></i></span>
                    </div>
                    @Html.TextBoxFor(model => model.OutsourcedTechnicianName, new { @class = "form-control", placeholder = "Enter technician name" })
                </div>
                @Html.ValidationMessageFor(model => model.OutsourcedTechnicianName, "", new { @class = "field-validation-error" })
            </div>
            <div class="form-group">
                <label for="OutsourcedEmail"><i class="fas fa-envelope"></i> Technician Email</label>
                <div class="input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text"><i class="fas fa-envelope"></i></span>
                    </div>
                    @Html.TextBoxFor(model => model.OutsourcedEmail, new { @class = "form-control", type = "email", placeholder = "Enter technician email" })
                </div>
                @Html.ValidationMessageFor(model => model.OutsourcedEmail, "", new { @class = "field-validation-error" })
            </div>
        </div>

        <div class="form-group">
            <label for="RepairDate"><i class="fas fa-calendar-alt"></i> Repair Date</label>
            <div class="input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text"><i class="fas fa-calendar-alt"></i></span>
                </div>
                @Html.TextBoxFor(model => model.RepairDate, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date" })
            </div>
            @Html.ValidationMessageFor(model => model.RepairDate, "", new { @class = "field-validation-error" })
        </div>

        <div class="form-group">
            <label for="Description"><i class="fas fa-align-left"></i> Repair Description</label>
            <div class="input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text"><i class="fas fa-align-left"></i></span>
                </div>
                @Html.TextAreaFor(model => model.Description, new { @class = "form-control", rows = 4, placeholder = "Enter repair details" })
            </div>
            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "field-validation-error" })
        </div>

        <div class="action-buttons">
            @Html.ActionLink("Cancel", "Details", "Equipment", new { id = Model?.EquipmentId ?? 0 }, new { @class = "btn btn-secondary" })
            <button type="submit" class="btn btn-primary" id="ScheduleButton">
                <i class="fas fa-calendar-plus"></i> Schedule Repair
            </button>
        </div>
    }
</div>

<!-- Font Awesome for Icons -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        // Check if there are existing in-house repairs
        var hasInHouseRepair = @Html.Raw(Json.Encode(
            ViewBag.ActiveRepairs != null && 
            ((List<EquipmentRepair>)ViewBag.ActiveRepairs).Any(r => r.TechnicianType == "In-house")
        ));

        function toggleTechnicianFields() {
            var type = $('#TechnicianType').val();
            
            // Hide all sections first
            $('#InHouseFields, #OutsourcedFields, #InHouseWarning, #OutsourcedInfo').hide();
            $('#ScheduleButton').prop('disabled', false);
            
            if (type === 'In-house') {
                if (hasInHouseRepair) {
                    // Show warning and disable form
                    $('#InHouseWarning').show();
                    $('#ScheduleButton').prop('disabled', true);
                } else {
                    // Show in-house fields
                    $('#InHouseFields').show();
                }
            } else if (type === 'Outsourced') {
                $('#OutsourcedFields').show();
                $('#OutsourcedInfo').show();
            }
        }

        $(document).ready(function () {
            toggleTechnicianFields();
            $('#TechnicianType').change(toggleTechnicianFields);
        });
    </script>
}