@model FarmTrack.Models.InventoryRestock
@{
    ViewBag.Title = "Create Restock";
    bool isFromItemPage = ViewBag.IsFromItemPage ?? false;
    var selectedItem = ViewBag.SelectedItem as FarmTrack.Models.Inventory;
}

<style>
    /* Custom Color Scheme */
    :root {
        --color-earth: #8B7355; /* Primary */
        --color-soil: #654321; /* Secondary */
        --color-foliage: #4CAF50; /* Tertiary */
        --color-wheat: #F5DEB3; /* Accent */
        --color-danger: #FF6B6B; /* Error */
        --color-white: #FFFFFF; /* Neutral */
        --color-bib: #b17474; /* Neutral */
        --color-light-earth: rgba(139, 115, 85, 0.1);
        --color-shadow: rgba(0, 0, 0, 0.15);
    }

    /* Page Header */
    .page-header {
        background: linear-gradient(135deg, var(--color-wheat), #f0e6c7);
        padding: 25px 30px;
        border-radius: 12px;
        margin-bottom: 30px;
        box-shadow: 0 6px 20px var(--color-shadow);
        border: 1px solid rgba(139, 115, 85, 0.2);
    }

    .page-header h2 {
        color: var(--color-soil);
        font-weight: 700;
        margin-bottom: 0;
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .page-header h2 i {
        color: var(--color-earth);
        font-size: 1.2em;
    }

    /* Form Container */
    .form-container {
        background: var(--color-white);
        border: 1px solid var(--color-wheat);
        border-radius: 12px;
        padding: 30px;
        box-shadow: 0 8px 25px var(--color-shadow);
        position: relative;
        overflow: hidden;
    }

    .form-container::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 4px;
        background: linear-gradient(90deg, var(--color-earth), var(--color-foliage), var(--color-earth));
    }

    /* Form Groups */
    .form-group {
        margin-bottom: 25px;
        position: relative;
    }

    .form-group label {
        color: var(--color-soil);
        font-weight: 600;
        display: block;
        margin-bottom: 8px;
        font-size: 0.95em;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    /* Input Group Styling */
    .input-group {
        position: relative;
        display: flex;
        width: 100%;
        box-shadow: 0 2px 8px rgba(139, 115, 85, 0.1);
        border-radius: 8px;
        overflow: hidden;
        transition: all 0.3s ease;
    }

    .input-group:hover {
        box-shadow: 0 4px 12px rgba(139, 115, 85, 0.2);
        transform: translateY(-1px);
    }

    .input-group-prepend {
        display: flex;
    }

    .input-group-text {
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 12px 15px;
        font-size: 1rem;
        color: var(--color-white);
        background: linear-gradient(135deg, var(--color-earth), var(--color-soil));
        border: none;
        min-width: 50px;
    }

    .input-group-text i {
        font-size: 1.1em;
    }

    /* Form Controls */
    .form-control {
        border: 1px solid var(--color-wheat);
        border-left: none;
        border-radius: 0;
        padding: 12px 15px;
        font-size: 1rem;
        transition: all 0.3s ease;
        background: var(--color-white);
        flex: 1;
    }

    .form-control:focus {
        border-color: var(--color-earth);
        box-shadow: none;
        outline: none;
        background: #fefefe;
    }

    .form-control::placeholder {
        color: #999;
        font-style: italic;
    }

    /* Static Form Control */
    .form-control-static {
        background: var(--color-light-earth);
        border: 1px solid var(--color-wheat);
        border-radius: 8px;
        padding: 12px 15px;
        font-weight: 500;
        color: var(--color-soil);
    }

    .form-control-static strong {
        color: var(--color-earth);
        font-size: 1.1em;
    }

    /* Form Text */
    .form-text {
        font-size: 0.875rem;
        margin-top: 8px;
        padding: 8px 12px;
        background: rgba(245, 222, 179, 0.3);
        border-radius: 6px;
        border-left: 3px solid var(--color-foliage);
    }

    .text-muted {
        color: var(--color-soil) !important;
        opacity: 0.8;
    }

    /* Buttons */
    .btn {
        border-radius: 8px;
        padding: 12px 20px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 8px;
        border: none;
        font-size: 0.95rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(0, 0, 0, 0.2);
    }

    .btn-primary {
        background: linear-gradient(135deg, var(--color-earth), var(--color-soil));
        color: var(--color-white);
    }

    .btn-primary:hover {
        background: linear-gradient(135deg, var(--color-soil), #4a3018);
        color: var(--color-white);
    }

    .btn-default {
        background: linear-gradient(135deg, #f8f9fa, #e9ecef);
        color: var(--color-soil);
        border: 1px solid var(--color-wheat);
    }

    .btn-default:hover {
        background: linear-gradient(135deg, #e9ecef, #dee2e6);
        color: var(--color-soil);
        text-decoration: none;
    }

    /* Action Buttons */
    .action-buttons {
        display: flex;
        gap: 15px;
        margin-top: 30px;
        padding-top: 20px;
        border-top: 2px solid var(--color-wheat);
    }

    /* Validation */
    .text-danger {
        color: var(--color-danger) !important;
        font-size: 0.875rem;
        margin-top: 5px;
        display: block;
        font-weight: 500;
    }

    .validation-summary-errors {
        color: var(--color-danger);
        background: rgba(255, 107, 107, 0.1);
        border: 1px solid var(--color-danger);
        border-radius: 8px;
        padding: 15px;
        margin-bottom: 25px;
    }

    .validation-summary-errors ul {
        margin-bottom: 0;
        padding-left: 20px;
    }

    /* Item Info Card */
    .item-info-card {
        background: linear-gradient(135deg, rgba(76, 175, 80, 0.1), rgba(139, 115, 85, 0.05));
        border: 1px solid rgba(76, 175, 80, 0.3);
        border-radius: 10px;
        padding: 20px;
        margin-bottom: 25px;
        position: relative;
    }

    .item-info-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 4px;
        height: 100%;
        background: var(--color-foliage);
        border-radius: 2px;
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .form-container {
            padding: 20px;
            margin: 10px;
        }

        .action-buttons {
            flex-direction: column;
        }

        .page-header {
            padding: 20px;
        }
    }

    /* Animations */
    @@keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .form-container {
        animation: fadeInUp 0.6s ease-out;
    }

    .form-group {
        animation: fadeInUp 0.4s ease-out;
        animation-fill-mode: both;
    }

    .form-group:nth-child(1) { animation-delay: 0.1s; }
    .form-group:nth-child(2) { animation-delay: 0.2s; }
    .form-group:nth-child(3) { animation-delay: 0.3s; }
    .form-group:nth-child(4) { animation-delay: 0.4s; }
</style>

<!-- Page Header -->
<div class="page-header">
    <h2>
        <i class="fas fa-boxes"></i>
        @(isFromItemPage ? "Create Restock Request" : "Create Manual Restock")
    </h2>
</div>

<div class="form-container">
    @using (Html.BeginForm("RestockCreate", "Inventory", FormMethod.Post))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true, "", new { @class = "validation-summary-errors" })

        if (isFromItemPage && selectedItem != null)
        {
            <!-- Coming from item page - show item details and hidden field -->
            @Html.HiddenFor(m => m.InventoryId)

            <div class="item-info-card">
                <div class="form-group">
                    <label><i class="fas fa-tag"></i> Selected Item</label>
                    <div class="form-control-static">
                        <strong>@selectedItem.ItemName</strong>
                        @if (!string.IsNullOrEmpty(selectedItem.Category))
                        {
                            <span class="text-muted"> - @selectedItem.Category</span>
                        }
                    </div>
                    <small class="form-text text-muted">
                        <i class="fas fa-warehouse"></i> Current Stock: <strong>@selectedItem.Quantity</strong> units
                    </small>
                </div>
            </div>
        }
        else
        {
            <!-- Manual creation - show dropdown -->
            <div class="form-group">
                @Html.LabelFor(m => m.InventoryId, "Select Item")
                <div class="input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text"><i class="fas fa-search"></i></span>
                    </div>
                    @Html.DropDownList("InventoryId", (SelectList)ViewBag.InventoryList, "-- Select Item --", new { @class = "form-control", required = "required", id = "inventoryDropdown" })
                </div>
                @Html.ValidationMessageFor(m => m.InventoryId, "", new { @class = "text-danger" })
            </div>
        }

        <div class="form-group">
            @Html.LabelFor(m => m.Quantity, "Quantity to Restock")
            <div class="input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text"><i class="fas fa-hashtag"></i></span>
                </div>
                @Html.TextBoxFor(m => m.Quantity, new { @class = "form-control", type = "number", min = "1", required = "required", placeholder = "Enter restock quantity" })
            </div>
            @Html.ValidationMessageFor(m => m.Quantity, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.SupplierId, "Select Supplier")
            <div class="input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text"><i class="fas fa-truck"></i></span>
                </div>
                @Html.DropDownList("SupplierId", (SelectList)ViewBag.SupplierList, "-- Select Supplier --", new { @class = "form-control", required = "required", id = "supplierDropdown" })
            </div>
            @Html.ValidationMessageFor(m => m.SupplierId, "", new { @class = "text-danger" })
            <small class="form-text text-muted">
                <i class="fas fa-info-circle"></i>
                @if (isFromItemPage && selectedItem?.Supplier != null)
                {
                    <span>Default supplier for this item: <strong>@selectedItem.Supplier.Name</strong></span>
                }
                else
                {
                    <span>If the item has a default supplier, it will be pre-selected.</span>
                }
            </small>
        </div>

        <div class="action-buttons">
            <button type="submit" class="btn btn-primary">
                <i class="fas fa-plus-circle"></i>
                Create Restock Request
            </button>
            @Html.ActionLink("Cancel", "RestockList", null, new { @class = "btn btn-default" })
        </div>
    }
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript">
        $(document).ready(function () {
            @if (!isFromItemPage)
            {
                <text>
                // Auto-select supplier when inventory item changes (only for manual creation)
                $('#inventoryDropdown').change(function () {
                    var selectedInventoryId = $(this).val();
                    if (selectedInventoryId) {
                        // Make AJAX call to get the default supplier for the selected item
                        $.ajax({
                            url: '@Url.Action("GetItemSupplier", "Inventory")',
                            type: 'GET',
                            data: { inventoryId: selectedInventoryId },
                            success: function (data) {
                                if (data.supplierId) {
                                    $('#supplierDropdown').val(data.supplierId);
                                } else {
                                    $('#supplierDropdown').val('');
                                }
                            },
                            error: function () {
                                console.log('Error getting supplier information');
                            }
                        });
                    }
                });
                </text>
            }
        });
    </script>
}