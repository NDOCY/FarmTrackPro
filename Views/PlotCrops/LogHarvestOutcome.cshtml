@model FarmTrack.Models.HarvestOutcomeViewModel
@{
    ViewBag.Title = "Log Harvest Outcome";
}

<style>
    /* Custom Color Scheme */
    :root {
        --color-earth: #8B7355; /* Primary */
        --color-soil: #654321; /* Secondary */
        --color-foliage: #4CAF50; /* Tertiary */
        --color-wheat: #F5DEB3; /* Accent */
        --color-danger: #FF6B6B; /* Error */
        --color-white: #FFFFFF; /* Neutral */
        --color-light-earth: #e5d9cc; /* Light version of earth */
        --color-light-foliage: #e8f5e9; /* Light version of foliage */
    }

    body {
        background-color: #f9f7f4;
    }

    /* Page Header */
    .page-header {
        background: linear-gradient(135deg, var(--color-earth) 0%, var(--color-soil) 100%);
        border-radius: 12px;
        padding: 30px;
        margin-bottom: 30px;
        position: relative;
        overflow: hidden;
        box-shadow: 0 10px 20px rgba(101, 67, 33, 0.2);
    }

        .page-header::before {
            content: '';
            position: absolute;
            top: 0;
            right: 0;
            width: 200px;
            height: 100%;
            background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="%23F5DEB3" opacity="0.1"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/></svg>');
            background-repeat: no-repeat;
            background-position: right center;
            background-size: 150px;
            opacity: 0.2;
        }

        .page-header h2 {
            color: var(--color-white);
            font-weight: 700;
            margin-bottom: 10px;
            font-size: 2rem;
        }

        .page-header p {
            color: var(--color-wheat);
            font-size: 1.1rem;
            margin: 0;
        }

    /* Crop Info Card */
    .crop-info-card {
        background-color: white;
        border-radius: 12px;
        padding: 25px;
        margin-bottom: 30px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
        border-left: 5px solid var(--color-foliage);
    }

    .crop-info-title {
        color: var(--color-soil);
        font-size: 1.2rem;
        font-weight: 700;
        margin-bottom: 15px;
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .crop-detail {
        display: flex;
        align-items: center;
        gap: 10px;
        margin-bottom: 10px;
    }

    .crop-detail-icon {
        color: var(--color-foliage);
        font-size: 1.1rem;
        width: 20px;
    }

    .crop-detail-label {
        font-weight: 600;
        color: var(--color-soil);
        min-width: 100px;
    }

    .crop-detail-value {
        color: #555;
        font-weight: 600;
        background-color: var(--color-light-foliage);
        padding: 4px 12px;
        border-radius: 20px;
        font-size: 0.9rem;
    }

    /* Form Container */
    .form-container {
        background-color: white;
        border-radius: 12px;
        padding: 30px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
        max-width: 700px;
        margin: 0 auto 30px;
    }

    .form-title {
        color: var(--color-soil);
        font-size: 1.4rem;
        font-weight: 700;
        margin-bottom: 25px;
        text-align: center;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 10px;
    }

    .form-group {
        margin-bottom: 25px;
    }

    .form-group label {
        color: var(--color-soil);
        font-weight: 600;
        margin-bottom: 10px;
        display: block;
        font-size: 1.1rem;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .form-control {
        width: 100%;
        padding: 15px;
        border: 2px solid var(--color-wheat);
        border-radius: 8px;
        font-size: 1rem;
        color: var(--color-soil);
        background-color: white;
        transition: all 0.3s ease;
        box-sizing: border-box;
    }

        .form-control:focus {
            outline: none;
            border-color: var(--color-earth);
            box-shadow: 0 0 0 3px rgba(139, 115, 85, 0.1);
            transform: translateY(-1px);
        }

    /* Enhanced Select Styling */
    select.form-control {
        background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="%23654321"><path d="M7 10l5 5 5-5z"/></svg>');
        background-repeat: no-repeat;
        background-position: right 15px center;
        background-size: 20px;
        appearance: none;
        cursor: pointer;
    }

    /* Textarea Styling */
    textarea.form-control {
        resize: vertical;
        min-height: 100px;
    }

    /* Info Section */
    .info-section {
        background: linear-gradient(135deg, var(--color-light-foliage), #f1f8e9);
        border-radius: 12px;
        padding: 20px;
        margin-bottom: 25px;
        border-left: 5px solid var(--color-foliage);
    }

    .info-title {
        color: var(--color-foliage);
        font-weight: 700;
        margin-bottom: 10px;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .info-text {
        color: var(--color-soil);
        line-height: 1.6;
        margin: 0;
    }

    /* Action Buttons */
    .action-buttons {
        display: flex;
        gap: 15px;
        justify-content: center;
        margin-top: 30px;
    }

    .action-button {
        padding: 15px 30px;
        border: none;
        border-radius: 50px;
        font-weight: 600;
        font-size: 1rem;
        display: inline-flex;
        align-items: center;
        gap: 8px;
        cursor: pointer;
        transition: all 0.3s ease;
        text-decoration: none;
        min-width: 150px;
        justify-content: center;
    }

    .btn-success {
        background: linear-gradient(135deg, var(--color-foliage), #45a049);
        color: white;
        box-shadow: 0 4px 15px rgba(76, 175, 80, 0.3);
    }

        .btn-success:hover {
            background: linear-gradient(135deg, #45a049, #3d8b40);
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(76, 175, 80, 0.4);
            color: white;
        }

    .btn-secondary {
        background-color: var(--color-wheat);
        color: var(--color-soil);
        box-shadow: 0 4px 15px rgba(245, 222, 179, 0.4);
        text-decoration: none;
    }

        .btn-secondary:hover {
            background-color: #e6c89a;
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(245, 222, 179, 0.5);
            color: var(--color-soil);
            text-decoration: none;
        }

    /* Quality Grade Badges */
    .quality-indicator {
        display: inline-block;
        background: linear-gradient(135deg, var(--color-foliage), #45a049);
        color: white;
        padding: 8px 15px;
        border-radius: 20px;
        font-size: 0.85rem;
        font-weight: 600;
        margin-bottom: 15px;
        box-shadow: 0 3px 10px rgba(76, 175, 80, 0.3);
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .page-header {
            padding: 20px;
        }

        .page-header h2 {
            font-size: 1.6rem;
        }

        .form-container {
            margin: 0 15px 30px;
            padding: 25px 20px;
        }

        .action-buttons {
            flex-direction: column;
            align-items: center;
        }

        .action-button {
            width: 100%;
            max-width: 300px;
        }

        .crop-info-card {
            margin: 0 15px 30px;
            padding: 20px;
        }
    }

    /* Loading Animation */
    .form-container.loading {
        opacity: 0.7;
        pointer-events: none;
    }

    .submit-loading {
        position: relative;
    }

        .submit-loading::after {
            content: '';
            position: absolute;
            width: 20px;
            height: 20px;
            margin: auto;
            border: 2px solid transparent;
            border-top-color: white;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>

<!-- Page Header -->
<div class="page-header">
    <h2><i class="fas fa-clipboard-check me-2"></i>Log Harvest Outcome</h2>
    <p>Record the harvest results and quality assessment for your crop</p>
</div>

<!-- Crop Information Card -->
<div class="crop-info-card">
    <div class="crop-info-title">
        <i class="fas fa-seedling"></i>
        Harvest Details
    </div>

    <div class="crop-detail">
        <i class="fas fa-leaf crop-detail-icon"></i>
        <span class="crop-detail-label">Crop:</span>
        <span class="crop-detail-value">@Model.CropName</span>
    </div>

    <div class="crop-detail">
        <i class="fas fa-map-marker-alt crop-detail-icon"></i>
        <span class="crop-detail-label">Plot:</span>
        <span class="crop-detail-value">@Model.PlotName</span>
    </div>
</div>

<!-- Information Section -->
<div class="info-section">
    <div class="info-title">
        <i class="fas fa-info-circle"></i>
        Harvest Recording Guide
    </div>
    <p class="info-text">
        Please provide accurate measurements for your harvest outcome.
        <strong>Actual Yield</strong> should include the total usable crop harvested,
        while <strong>Losses</strong> represent any crop that was damaged or unusable.
        Select an appropriate <strong>Quality Grade</strong> based on market standards.
    </p>
</div>

<!-- Form Container -->
<div class="form-container">
    <div class="form-title">
        <i class="fas fa-chart-line"></i>
        Record Harvest Outcome
    </div>

    <div class="quality-indicator">
        <i class="fas fa-star me-2"></i>
        Recording outcome for <strong>@Model.CropName</strong> in plot <strong>@Model.PlotName</strong>
    </div>

    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(m => m.PlotCropId)

        <div class="form-group">
            <label for="HarvestDate">
                <i class="fas fa-calendar-alt"></i>
                @Html.DisplayNameFor(m => m.HarvestDate)
            </label>
            @Html.TextBoxFor(m => m.HarvestDate, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date", required = "required" })
        </div>

        <div class="form-group">
            <label for="ActualYieldKg">
                <i class="fas fa-weight"></i>
                @Html.DisplayNameFor(m => m.ActualYieldKg)
            </label>
            @Html.TextBoxFor(m => m.ActualYieldKg, new { @class = "form-control", type = "number", step = "0.01", min = "0", placeholder = "Enter yield in kilograms", required = "required" })
        </div>

        <div class="form-group">
            <label for="LossesKg">
                <i class="fas fa-exclamation-triangle"></i>
                @Html.DisplayNameFor(m => m.LossesKg)
            </label>
            @Html.TextBoxFor(m => m.LossesKg, new { @class = "form-control", type = "number", step = "0.01", min = "0", placeholder = "Enter losses in kilograms" })
        </div>

        <div class="form-group">
            <label for="QualityGrade">
                <i class="fas fa-star"></i>
                @Html.DisplayNameFor(m => m.QualityGrade)
            </label>
            @Html.DropDownListFor(m => m.QualityGrade, new SelectList(new[] { "Excellent", "Good", "Average", "Poor" }), "Select Quality Grade", new { @class = "form-control", required = "required" })
        </div>

        <div class="form-group">
            <label for="Notes">
                <i class="fas fa-sticky-note"></i>
                @Html.DisplayNameFor(m => m.Notes)
            </label>
            @Html.TextAreaFor(m => m.Notes, new { @class = "form-control", rows = 4, placeholder = "Add any additional notes about the harvest..." })
        </div>

        <div class="action-buttons">
            <button type="submit" class="action-button btn-success" id="saveBtn">
                <i class="fas fa-save"></i>
                Save Outcome
            </button>
            <a href="javascript:history.back()" class="action-button btn-secondary">
                <i class="fas fa-arrow-left"></i>
                Go Back
            </a>
        </div>
    }
</div>

<!-- Font Awesome for Icons -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const form = document.querySelector('form');
        const saveBtn = document.getElementById('saveBtn');
        const formContainer = document.querySelector('.form-container');

        // Add form submission handling
        form.addEventListener('submit', function(e) {
            const harvestDate = document.getElementById('HarvestDate');
            const actualYield = document.getElementById('ActualYieldKg');
            const qualityGrade = document.getElementById('QualityGrade');

            if (!harvestDate.value || !actualYield.value || !qualityGrade.value) {
                e.preventDefault();
                alert('Please fill in all required fields.');
                return;
            }

            // Add loading state
            saveBtn.classList.add('submit-loading');
            saveBtn.disabled = true;
            saveBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Saving...';
            formContainer.classList.add('loading');
        });

        // Add visual feedback for quality grade selection
        const qualitySelect = document.getElementById('QualityGrade');
        qualitySelect.addEventListener('change', function() {
            const selectedValue = this.value.toLowerCase();

            // Reset border color
            this.style.borderColor = '';
            this.style.backgroundColor = '';

            // Apply color based on quality
            switch(selectedValue) {
                case 'excellent':
                    this.style.borderColor = '#4CAF50';
                    this.style.backgroundColor = '#e8f5e9';
                    break;
                case 'good':
                    this.style.borderColor = '#8BC34A';
                    this.style.backgroundColor = '#f1f8e9';
                    break;
                case 'average':
                    this.style.borderColor = '#FFC107';
                    this.style.backgroundColor = '#fffde7';
                    break;
                case 'poor':
                    this.style.borderColor = '#FF6B6B';
                    this.style.backgroundColor = '#ffebee';
                    break;
            }
        });

        // Auto-calculate net yield
        const actualYieldInput = document.getElementById('ActualYieldKg');
        const lossesInput = document.getElementById('LossesKg');

        function updateCalculations() {
            const actualYield = parseFloat(actualYieldInput.value) || 0;
            const losses = parseFloat(lossesInput.value) || 0;

            // Optional: You can add a net yield display here if needed
            if (losses > actualYield && losses > 0) {
                lossesInput.style.borderColor = '#FF6B6B';
                lossesInput.style.backgroundColor = '#ffebee';
            } else {
                lossesInput.style.borderColor = '';
                lossesInput.style.backgroundColor = '';
            }
        }

        actualYieldInput.addEventListener('input', updateCalculations);
        lossesInput.addEventListener('input', updateCalculations);
    });
</script>