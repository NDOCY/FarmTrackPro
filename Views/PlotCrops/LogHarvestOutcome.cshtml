@model FarmTrack.Models.HarvestOutcomeViewModel

@{
    ViewBag.Title = "Log Harvest Outcome";
}

<style>
    
    /* Custom Color Scheme */
    :root {
        --color-earth: #8B7355; /* Primary */
        --color-soil: #654321; /* Secondary */
        --color-foliage: #4CAF50; /* Tertiary */
        --color-wheat: #F5DEB3; /* Accent */
        --color-danger: #FF6B6B; /* Error */
        --color-white: #FFFFFF; /* Neutral */
        --color-light-earth: #e5d9cc; /* Light version of earth */
        --color-light-foliage: #e8f5e9; /* Light version of foliage */
    }

    body {
        background-color: #f9f7f4;
    }

    /* Page Header */
    .page-header {
        background: linear-gradient(135deg, var(--color-earth) 0%, var(--color-soil) 100%);
        border-radius: 12px;
        padding: 30px;
        margin-bottom: 30px;
        position: relative;
        overflow: hidden;
        box-shadow: 0 10px 20px rgba(101, 67, 33, 0.2);
    }

        .page-header::before {
            content: '';
            position: absolute;
            top: 0;
            right: 0;
            width: 200px;
            height: 100%;
            background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="%23F5DEB3" opacity="0.1"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/></svg>');
            background-repeat: no-repeat;
            background-position: right center;
            background-size: 150px;
            opacity: 0.2;
        }

        .page-header h2 {
            color: var(--color-white);
            font-weight: 700;
            margin-bottom: 10px;
            font-size: 2rem;
        }

        .page-header p {
            color: var(--color-wheat);
            font-size: 1.1rem;
            margin: 0;
        }

    /* Crop Info Card */
    .crop-info-card {
        background-color: white;
        border-radius: 12px;
        padding: 25px;
        margin-bottom: 30px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
        border-left: 5px solid var(--color-foliage);
    }

    .crop-info-title {
        color: var(--color-soil);
        font-size: 1.2rem;
        font-weight: 700;
        margin-bottom: 15px;
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .crop-detail {
        display: flex;
        align-items: center;
        gap: 10px;
        margin-bottom: 10px;
    }

    .crop-detail-icon {
        color: var(--color-foliage);
        font-size: 1.1rem;
        width: 20px;
    }

    .crop-detail-label {
        font-weight: 600;
        color: var(--color-soil);
        min-width: 100px;
    }

    .crop-detail-value {
        color: #555;
        font-weight: 600;
        background-color: var(--color-light-foliage);
        padding: 4px 12px;
        border-radius: 20px;
        font-size: 0.9rem;
    }

    /* Form Container */
    .form-container {
        background-color: white;
        border-radius: 12px;
        padding: 30px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
        max-width: 700px;
        margin: 0 auto 30px;
    }

    .form-title {
        color: var(--color-soil);
        font-size: 1.4rem;
        font-weight: 700;
        margin-bottom: 25px;
        text-align: center;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 10px;
    }

    .form-group {
        margin-bottom: 25px;
    }

        .form-group label {
            color: var(--color-soil);
            font-weight: 600;
            margin-bottom: 10px;
            display: block;
            font-size: 1.1rem;
            display: flex;
            align-items: center;
            gap: 8px;
        }

    .form-control {
        width: 100%;
        padding: 15px;
        border: 2px solid var(--color-wheat);
        border-radius: 8px;
        font-size: 1rem;
        color: var(--color-soil);
        background-color: white;
        transition: all 0.3s ease;
        box-sizing: border-box;
    }

        .form-control:focus {
            outline: none;
            border-color: var(--color-earth);
            box-shadow: 0 0 0 3px rgba(139, 115, 85, 0.1);
            transform: translateY(-1px);
        }

    /* Enhanced Select Styling */
    select.form-control {
        background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="%23654321"><path d="M7 10l5 5 5-5z"/></svg>');
        background-repeat: no-repeat;
        background-position: right 15px center;
        background-size: 20px;
        appearance: none;
        cursor: pointer;
    }

    /* Textarea Styling */
    textarea.form-control {
        resize: vertical;
        min-height: 100px;
    }

    /* Info Section */
    .info-section {
        background: linear-gradient(135deg, var(--color-light-foliage), #f1f8e9);
        border-radius: 12px;
        padding: 20px;
        margin-bottom: 25px;
        border-left: 5px solid var(--color-foliage);
    }

    .info-title {
        color: var(--color-foliage);
        font-weight: 700;
        margin-bottom: 10px;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .info-text {
        color: var(--color-soil);
        line-height: 1.6;
        margin: 0;
    }

    /* Action Buttons */
    .action-buttons {
        display: flex;
        gap: 15px;
        justify-content: center;
        margin-top: 30px;
    }

    .action-button {
        padding: 15px 30px;
        border: none;
        border-radius: 50px;
        font-weight: 600;
        font-size: 1rem;
        display: inline-flex;
        align-items: center;
        gap: 8px;
        cursor: pointer;
        transition: all 0.3s ease;
        text-decoration: none;
        min-width: 150px;
        justify-content: center;
    }

    .btn-success {
        background: linear-gradient(135deg, var(--color-foliage), #45a049);
        color: white;
        box-shadow: 0 4px 15px rgba(76, 175, 80, 0.3);
    }

        .btn-success:hover {
            background: linear-gradient(135deg, #45a049, #3d8b40);
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(76, 175, 80, 0.4);
            color: white;
        }

    .btn-secondary {
        background-color: var(--color-wheat);
        color: var(--color-soil);
        box-shadow: 0 4px 15px rgba(245, 222, 179, 0.4);
        text-decoration: none;
    }

        .btn-secondary:hover {
            background-color: #e6c89a;
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(245, 222, 179, 0.5);
            color: var(--color-soil);
            text-decoration: none;
        }

    /* Quality Grade Badges */
    .quality-indicator {
        display: inline-block;
        background: linear-gradient(135deg, var(--color-foliage), #45a049);
        color: white;
        padding: 8px 15px;
        border-radius: 20px;
        font-size: 0.85rem;
        font-weight: 600;
        margin-bottom: 15px;
        box-shadow: 0 3px 10px rgba(76, 175, 80, 0.3);
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .page-header {
            padding: 20px;
        }

            .page-header h2 {
                font-size: 1.6rem;
            }

        .form-container {
            margin: 0 15px 30px;
            padding: 25px 20px;
        }

        .action-buttons {
            flex-direction: column;
            align-items: center;
        }

        .action-button {
            width: 100%;
            max-width: 300px;
        }

        .crop-info-card {
            margin: 0 15px 30px;
            padding: 20px;
        }
    }

    /* Loading Animation */
    .form-container.loading {
        opacity: 0.7;
        pointer-events: none;
    }

    .submit-loading {
        position: relative;
    }

        .submit-loading::after {
            content: '';
            position: absolute;
            width: 20px;
            height: 20px;
            margin: auto;
            border: 2px solid transparent;
            border-top-color: white;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }



    /*--------------------------------------------------------------------------*/

    /* Add to existing styles */
    .grade-section {
        background: #f8f9fa;
        border-radius: 12px;
        padding: 20px;
        margin-bottom: 20px;
        border-left: 4px solid;
    }

        .grade-section h5 {
            margin-bottom: 15px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

    .grade-a-section {
        border-left-color: #4CAF50;
        background: linear-gradient(135deg, #f1f8e9, #e8f5e9);
    }

    .grade-b-section {
        border-left-color: #FFC107;
        background: linear-gradient(135deg, #fffde7, #fff9c4);
    }

    .grade-c-section {
        border-left-color: #FF6B6B;
        background: linear-gradient(135deg, #ffebee, #ffcdd2);
    }

    .total-yield-display {
        background: linear-gradient(135deg, #e3f2fd, #bbdefb);
        padding: 20px;
        border-radius: 12px;
        margin-bottom: 25px;
        text-align: center;
        border: 2px solid #2196F3;
    }

        .total-yield-display h5 {
            margin: 0;
            color: #1976d2;
            font-weight: 700;
        }

    #totalYield {
        font-size: 1.5em;
        color: #1565c0;
        font-weight: 800;
    }

    #yieldWarning {
        background: #ffebee;
        color: #c62828;
        padding: 10px;
        border-radius: 6px;
        margin-top: 10px;
        border-left: 4px solid #f44336;
    }

    .yield-summary {
        background: linear-gradient(135deg, #e8f5e9, #c8e6c9);
        padding: 15px;
        border-radius: 8px;
        margin-bottom: 20px;
        border: 1px solid #4CAF50;
    }

    .yield-summary-item {
        display: flex;
        justify-content: space-between;
        margin-bottom: 5px;
        font-size: 14px;
    }

    .yield-summary-total {
        font-weight: 700;
        color: #2e7d32;
        border-top: 2px solid #4CAF50;
        padding-top: 10px;
        margin-top: 10px;
    }
</style>

<!-- Page Header -->
<div class="page-header">
    <h2><i class="fas fa-clipboard-check me-2"></i>Log Harvest Outcome</h2>
    <p>Record the harvest results and quality assessment for your crop</p>
</div>

<!-- Crop Information Card -->
<div class="crop-info-card">
    <div class="crop-info-title">
        <i class="fas fa-seedling"></i>
        Harvest Details
    </div>

    <div class="crop-detail">
        <i class="fas fa-leaf crop-detail-icon"></i>
        <span class="crop-detail-label">Crop:</span>
        <span class="crop-detail-value">@Model.CropName</span>
    </div>

    <div class="crop-detail">
        <i class="fas fa-map-marker-alt crop-detail-icon"></i>
        <span class="crop-detail-label">Plot:</span>
        <span class="crop-detail-value">@Model.PlotName</span>
    </div>
    <div class="crop-detail">
        <i class="fas fa-bullseye crop-detail-icon"></i>
        <span class="crop-detail-label">Expected Yield:</span>
        <span class="crop-detail-value">@Model.ExpectedYield.ToString("N0") kg</span>
    </div>
</div>

<!-- Information Section -->
<div class="info-section">
    <div class="info-title">
        <i class="fas fa-info-circle"></i>
        Harvest Recording Guide
    </div>
    <p class="info-text">
        Please distribute your total yield among the quality grades. The sum of all grades must equal your total actual yield.
        <strong>Grade A</strong> represents premium quality, <strong>Grade B</strong> is standard quality, and <strong>Grade C</strong> is commercial quality.
    </p>
</div>

<!-- Form Container -->
<div class="form-container">
    <div class="form-title">
        <i class="fas fa-chart-line"></i>
        Record Harvest Outcome
    </div>

    <div class="quality-indicator">
        <i class="fas fa-star me-2"></i>
        Recording outcome for <strong>@Model.CropName</strong> in plot <strong>@Model.PlotName</strong>
    </div>

    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(m => m.PlotCropId)
        @Html.HiddenFor(m => m.ExpectedYield)

        <div class="form-group">
            <label for="HarvestDate">
                <i class="fas fa-calendar-alt"></i>
                Harvest Date
            </label>
            @Html.TextBoxFor(m => m.HarvestDate, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date", required = "required" })
        </div>

        <!-- Grade A Section -->
        <div class="grade-section grade-a-section">
            <h5 style="color: #4CAF50;">
                <i class="fas fa-star"></i> Grade A (Premium Quality)
            </h5>
            <div class="form-group">
                <label>Quantity (kg)</label>
                @Html.TextBoxFor(m => m.GradeAQty, new { @class = "form-control grade-qty", type = "number", step = "0.01", min = "0", required = "required", oninput = "calculateTotal()", placeholder = "Enter Grade A quantity" })
            </div>
            <div class="form-group">
                <label>Notes</label>
                @Html.TextAreaFor(m => m.GradeANotes, new { @class = "form-control", rows = "2", placeholder = "Notes for Grade A premium quality..." })
            </div>
        </div>

        <!-- Grade B Section -->
        <div class="grade-section grade-b-section">
            <h5 style="color: #FFC107;">
                <i class="fas fa-star-half-alt"></i> Grade B (Standard Quality)
            </h5>
            <div class="form-group">
                <label>Quantity (kg)</label>
                @Html.TextBoxFor(m => m.GradeBQty, new { @class = "form-control grade-qty", type = "number", step = "0.01", min = "0", required = "required", oninput = "calculateTotal()", placeholder = "Enter Grade B quantity" })
            </div>
            <div class="form-group">
                <label>Notes</label>
                @Html.TextAreaFor(m => m.GradeBNotes, new { @class = "form-control", rows = "2", placeholder = "Notes for Grade B standard quality..." })
            </div>
        </div>

        <!-- Grade C Section -->
        <div class="grade-section grade-c-section">
            <h5 style="color: #FF6B6B;">
                <i class="fas fa-star"></i> Grade C (Commercial Quality)
            </h5>
            <div class="form-group">
                <label>Quantity (kg)</label>
                @Html.TextBoxFor(m => m.GradeCQty, new { @class = "form-control grade-qty", type = "number", step = "0.01", min = "0", required = "required", oninput = "calculateTotal()", placeholder = "Enter Grade C quantity" })
            </div>
            <div class="form-group">
                <label>Notes</label>
                @Html.TextAreaFor(m => m.GradeCNotes, new { @class = "form-control", rows = "2", placeholder = "Notes for Grade C commercial quality..." })
            </div>
        </div>

        <!-- Total Yield Display -->
        <div class="total-yield-display">
            <h5>Total Harvested Yield: <span id="totalYield">0.00</span> kg</h5>
            <div class="yield-summary">
                <div class="yield-summary-item">
                    <span>Expected Yield:</span>
                    <span>@Model.ExpectedYield.ToString("N0") kg</span>
                </div>
                <div class="yield-summary-item">
                    <span>Actual Yield:</span>
                    <span id="summaryActualYield">0.00 kg</span>
                </div>
                <div class="yield-summary-item">
                    <span>Difference:</span>
                    <span id="summaryDifference">0.00 kg</span>
                </div>
                <div class="yield-summary-total" id="summaryTotal">
                    Grades Total: 0.00 kg
                </div>
            </div>
            <div id="yieldWarning" style="color: #dc3545; display: none;">
                <i class="fas fa-exclamation-triangle"></i> Sum of grades must equal actual yield!
            </div>
        </div>

        <div class="form-group">
            <label for="ActualYieldKg">
                <i class="fas fa-weight"></i>
                Total Actual Yield (kg)
            </label>
            @Html.TextBoxFor(m => m.ActualYieldKg, new { @class = "form-control", type = "number", step = "0.01", min = "0", required = "required", oninput = "validateYield()", placeholder = "Enter total actual yield" })
        </div>

        <div class="form-group">
            <label for="LossesKg">
                <i class="fas fa-exclamation-triangle"></i>
                Losses (kg)
            </label>
            @Html.TextBoxFor(m => m.LossesKg, new { @class = "form-control", type = "number", step = "0.01", min = "0", placeholder = "Enter losses in kilograms" })
        </div>

        <div class="form-group">
            <label for="QualityGrade">
                <i class="fas fa-star"></i>
                Overall Quality Grade
            </label>
            @Html.DropDownListFor(m => m.QualityGrade, new SelectList(new[] { "Excellent", "Good", "Average", "Poor" }), "Select Overall Quality Grade", new { @class = "form-control", required = "required" })
        </div>

        <div class="form-group">
            <label for="Notes">
                <i class="fas fa-sticky-note"></i>
                General Notes
            </label>
            @Html.TextAreaFor(m => m.Notes, new { @class = "form-control", rows = 4, placeholder = "Add any additional notes about the harvest..." })
        </div>

        <div class="action-buttons">
            <button type="submit" class="action-button btn-success" id="saveBtn" disabled>
                <i class="fas fa-save"></i>
                Save Harvest Grades
            </button>
            <a href="javascript:history.back()" class="action-button btn-secondary">
                <i class="fas fa-arrow-left"></i>
                Go Back
            </a>
        </div>
    }
</div>

<!-- Font Awesome for Icons -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">

<script>
    function calculateTotal() {
        const gradeA = parseFloat(document.getElementById('GradeAQty').value) || 0;
        const gradeB = parseFloat(document.getElementById('GradeBQty').value) || 0;
        const gradeC = parseFloat(document.getElementById('GradeCQty').value) || 0;

        const total = gradeA + gradeB + gradeC;
        document.getElementById('totalYield').textContent = total.toFixed(2);
        document.getElementById('summaryTotal').textContent = `Grades Total: ${total.toFixed(2)} kg`;

        validateYield();
    }

    function validateYield() {
        const gradeA = parseFloat(document.getElementById('GradeAQty').value) || 0;
        const gradeB = parseFloat(document.getElementById('GradeBQty').value) || 0;
        const gradeC = parseFloat(document.getElementById('GradeCQty').value) || 0;
        const gradesTotal = gradeA + gradeB + gradeC;

        const actualYield = parseFloat(document.getElementById('ActualYieldKg').value) || 0;
        const expectedYield = @Model.ExpectedYield;

        const warningElement = document.getElementById('yieldWarning');
        const saveBtn = document.getElementById('saveBtn');

        // Update summary
        document.getElementById('summaryActualYield').textContent = `${actualYield.toFixed(2)} kg`;
        const difference = actualYield - expectedYield;
        document.getElementById('summaryDifference').textContent = `${difference.toFixed(2)} kg`;
        document.getElementById('summaryDifference').style.color = difference >= 0 ? '#4CAF50' : '#FF6B6B';

        // Validate grades sum equals actual yield
        if (Math.abs(gradesTotal - actualYield) > 0.01) {
            warningElement.style.display = 'block';
            warningElement.innerHTML = `<i class="fas fa-exclamation-triangle"></i> Sum of grades (${gradesTotal.toFixed(2)}kg) must equal actual yield (${actualYield.toFixed(2)}kg)`;
            saveBtn.disabled = true;
        } else {
            warningElement.style.display = 'none';
            saveBtn.disabled = false;
        }

        // Validate against expected yield
        if (actualYield > expectedYield * 2) {
            warningElement.style.display = 'block';
            warningElement.innerHTML = `<i class="fas fa-exclamation-triangle"></i> Actual yield seems unusually high compared to expected yield`;
            saveBtn.disabled = true;
        }
    }

    document.addEventListener('DOMContentLoaded', function() {
        const form = document.querySelector('form');
        const saveBtn = document.getElementById('saveBtn');
        const formContainer = document.querySelector('.form-container');

        // Initialize calculations
        calculateTotal();

        // Add input validation
        const inputs = document.querySelectorAll('input[type="number"]');
        inputs.forEach(input => {
            input.addEventListener('blur', function() {
                if (this.value < 0) this.value = 0;
                calculateTotal();
            });
        });

        form.addEventListener('submit', function(e) {
            const harvestDate = document.getElementById('HarvestDate');
            const actualYield = document.getElementById('ActualYieldKg');
            const qualityGrade = document.getElementById('QualityGrade');

            if (!harvestDate.value || !actualYield.value || !qualityGrade.value) {
                e.preventDefault();
                alert('Please fill in all required fields.');
                return;
            }

            // Validate grades sum
            const gradeA = parseFloat(document.getElementById('GradeAQty').value) || 0;
            const gradeB = parseFloat(document.getElementById('GradeBQty').value) || 0;
            const gradeC = parseFloat(document.getElementById('GradeCQty').value) || 0;
            const gradesTotal = gradeA + gradeB + gradeC;

            if (Math.abs(gradesTotal - parseFloat(actualYield.value)) > 0.01) {
                e.preventDefault();
                alert('Sum of grades must equal total actual yield. Please adjust your entries.');
                return;
            }

            // Add loading state
            saveBtn.classList.add('submit-loading');
            saveBtn.disabled = true;
            saveBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Saving...';
            formContainer.classList.add('loading');
        });
    });
</script>



