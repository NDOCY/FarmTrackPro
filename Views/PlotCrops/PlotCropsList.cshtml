@model IEnumerable<FarmTrack.Models.PlotCrop>

@{
    ViewBag.Title = "Plot Crops Overview";
}

<style>
    /* Custom Color Scheme */
    :root {
        --color-earth: #8B7355; /* Primary */
        --color-soil: #654321; /* Secondary */
        --color-foliage: #4CAF50; /* Tertiary */
        --color-wheat: #F5DEB3; /* Accent */
        --color-danger: #FF6B6B; /* Error */
        --color-white: #FFFFFF; /* Neutral */
        --color-light-earth: #e5d9cc; /* Light version of earth */
        --color-light-foliage: #e8f5e9; /* Light version of foliage */
        --color-success: #4CAF50;
        --color-info: #2196F3;
        --color-warning: #FF9800;
        --color-primary: #3f51b5;
    }

    body {
        background-color: #f9f7f4;
    }

    /* Dashboard Header */
    .dashboard-header {
        background: linear-gradient(135deg, var(--color-earth) 0%, var(--color-soil) 100%);
        border-radius: 12px;
        padding: 30px;
        margin-bottom: 30px;
        position: relative;
        overflow: hidden;
        box-shadow: 0 10px 20px rgba(101, 67, 33, 0.2);
    }

        .dashboard-header::before {
            content: '';
            position: absolute;
            top: 0;
            right: 0;
            width: 250px;
            height: 100%;
            background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="%23F5DEB3" opacity="0.1"><path d="M12 2l3.09 6.26L22 9l-6.91 1.01L12 16l-3.09-6.99L2 9l6.91-.74L12 2z"/></svg>');
            background-repeat: no-repeat;
            background-position: right center;
            background-size: 180px;
            opacity: 0.2;
        }

        .dashboard-header h1 {
            color: var(--color-white);
            font-weight: 700;
            margin-bottom: 10px;
            font-size: 2.2rem;
        }

        .dashboard-header p {
            color: var(--color-wheat);
            font-size: 1.2rem;
            max-width: 600px;
        }

    .dashboard-stats {
        display: flex;
        gap: 20px;
        margin-top: 20px;
        flex-wrap: wrap;
    }

    .stat-card {
        background-color: rgba(255, 255, 255, 0.15);
        border-radius: 8px;
        padding: 12px 20px;
        min-width: 150px;
    }

        .stat-card .stat-value {
            color: var(--color-white);
            font-size: 1.8rem;
            font-weight: 700;
        }

        .stat-card .stat-label {
            color: var(--color-wheat);
            font-size: 0.9rem;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

    /* Filters Section */
    .filters-section {
        display: flex;
        flex-wrap: wrap;
        align-items: center;
        gap: 15px;
        margin-bottom: 25px;
        background-color: white;
        border-radius: 12px;
        padding: 20px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    }

        .filters-section .filter-group {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .filters-section label {
            font-weight: 600;
            color: var(--color-soil);
            font-size: 0.9rem;
            white-space: nowrap;
        }

        .filters-section select,
        .filters-section input {
            padding: 8px 12px;
            border-radius: 6px;
            border: 2px solid #e0e0e0;
            color: var(--color-soil);
            font-size: 0.9rem;
            transition: all 0.2s ease;
        }

            .filters-section select:focus,
            .filters-section input:focus {
                border-color: var(--color-earth);
                box-shadow: 0 0 0 2px rgba(139, 115, 85, 0.1);
                outline: none;
            }

    .search-box {
        flex-grow: 1;
        position: relative;
        min-width: 250px;
    }

        .search-box input {
            width: 100%;
            padding: 10px 15px 10px 38px;
            border-radius: 8px;
            border: 2px solid #e0e0e0;
            color: var(--color-soil);
        }

        .search-box i {
            position: absolute;
            left: 12px;
            top: 50%;
            transform: translateY(-50%);
            color: #999;
        }

    /* Table Container */
    .table-container {
        background-color: var(--color-white);
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
        position: relative;
    }

        .table-container::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, var(--color-earth), var(--color-foliage));
        }

    /* Modern Table */
    .modern-table {
        width: 100%;
        border-collapse: collapse;
        margin: 0;
        background-color: transparent;
    }

        .modern-table thead {
            background: linear-gradient(135deg, var(--color-earth), var(--color-soil));
            color: var(--color-white);
        }

            .modern-table thead th {
                padding: 20px 15px;
                font-weight: 700;
                text-transform: uppercase;
                letter-spacing: 0.5px;
                font-size: 0.85rem;
                border: none;
                position: relative;
            }

                .modern-table thead th::after {
                    content: '';
                    position: absolute;
                    right: 0;
                    top: 25%;
                    height: 50%;
                    width: 1px;
                    background-color: rgba(255, 255, 255, 0.2);
                }

                .modern-table thead th:last-child::after {
                    display: none;
                }

        .modern-table tbody tr {
            transition: all 0.2s ease;
            border-bottom: 1px solid rgba(0, 0, 0, 0.05);
        }

            .modern-table tbody tr:nth-child(even) {
                background-color: rgba(245, 222, 179, 0.03);
            }

            .modern-table tbody tr:hover {
                background-color: var(--color-light-earth);
                transform: translateY(-1px);
                box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            }

        .modern-table td {
            padding: 18px 15px;
            border: none;
            color: #333;
            font-size: 0.95rem;
            vertical-align: middle;
        }

    /* Status Badges */
    .status-badge {
        display: inline-flex;
        align-items: center;
        gap: 6px;
        padding: 6px 12px;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        border: 2px solid transparent;
        transition: all 0.2s ease;
    }

        .status-badge::before {
            content: '';
            width: 6px;
            height: 6px;
            border-radius: 50%;
            background-color: currentColor;
        }

        .status-badge:hover {
            transform: translateY(-1px);
            box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);
        }

    .status-preparation {
        background-color: #fff3e0;
        color: var(--color-warning);
        border-color: var(--color-warning);
    }

    .status-planting {
        background-color: #e3f2fd;
        color: var(--color-info);
        border-color: var(--color-info);
    }

    .status-growing {
        background-color: #e8eaf6;
        color: var(--color-primary);
        border-color: var(--color-primary);
    }

    .status-harvested {
        background-color: var(--color-light-foliage);
        color: var(--color-foliage);
        border-color: var(--color-foliage);
    }

    .status-default {
        background-color: #f5f5f5;
        color: #666;
        border-color: #999;
    }

    /* Action Buttons */
    .action-button {
        background: linear-gradient(135deg, var(--color-foliage) 0%, #45a049 100%);
        color: white;
        border: none;
        border-radius: 6px;
        padding: 8px 16px;
        font-weight: 600;
        font-size: 0.85rem;
        display: inline-flex;
        align-items: center;
        gap: 6px;
        box-shadow: 0 3px 12px rgba(76, 175, 80, 0.3);
        transition: all 0.3s ease;
        text-decoration: none;
        cursor: pointer;
    }

        .action-button:hover {
            background: linear-gradient(135deg, #45a049 0%, var(--color-foliage) 100%);
            transform: translateY(-2px);
            box-shadow: 0 5px 18px rgba(76, 175, 80, 0.4);
            color: white;
            text-decoration: none;
        }

    /* Empty State */
    .empty-state {
        text-align: center;
        padding: 60px 20px;
        background-color: white;
        border-radius: 12px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
    }

    .empty-illustration {
        max-width: 200px;
        margin: 0 auto 30px;
        opacity: 0.7;
    }

    .empty-state h3 {
        color: var(--color-soil);
        margin-bottom: 15px;
        font-weight: 600;
    }

    .empty-state p {
        color: #777;
        margin-bottom: 25px;
        max-width: 400px;
        margin-left: auto;
        margin-right: auto;
        line-height: 1.5;
    }

    /* Plot and Crop Names */
    .plot-name,
    .crop-name {
        font-weight: 600;
        color: var(--color-soil);
    }

    .plot-name {
        position: relative;
    }

        .plot-name::after {
            content: '';
            position: absolute;
            bottom: -2px;
            left: 0;
            right: 0;
            height: 2px;
            background: linear-gradient(90deg, var(--color-earth), transparent);
            border-radius: 1px;
        }

    /* Date Formatting */
    .date-cell {
        font-family: 'Courier New', monospace;
        color: #666;
        font-size: 0.9rem;
    }

    /* Responsive Design */
    @@media (max-width: 992px) {
        .table-container {
            overflow-x: auto;
        }

        .modern-table {
            min-width: 800px;
        }

        .filters-section {
            flex-direction: column;
            align-items: stretch;
            gap: 15px;
        }

        .filters-section .filter-group {
            justify-content: space-between;
        }

        .dashboard-stats {
            justify-content: center;
        }
    }

    @@media (max-width: 768px) {
        .dashboard-header {
            padding: 20px;
        }

        .dashboard-header h1 {
            font-size: 1.8rem;
        }

        .stat-card {
            flex: 1;
            min-width: 120px;
        }

        .modern-table thead th,
        .modern-table td {
            padding: 12px 8px;
            font-size: 0.85rem;
        }
    }

    /* Loading Animation */
    @@keyframes pulse {
        0%, 100% { opacity: 1; }
        50% { opacity: 0.5; }
    }

    .loading {
        animation: pulse 1.5s infinite;
    }

    /* Hover effects for table rows */
    @@keyframes rowHighlight {
        0% { background-color: transparent; }
        50% { background-color: rgba(76, 175, 80, 0.1); }
        100% { background-color: transparent; }
    }

    .row-highlight {
        animation: rowHighlight 1s ease-in-out;
    }
</style>

<!-- Dashboard Header -->
<div class="dashboard-header">
    <h1><i class="fas fa-seedling me-2"></i>Plot Crops Overview</h1>
    <p>Monitor all your cultivated plots, track growth progress, and manage crop lifecycles</p>

    <div class="dashboard-stats">
        <div class="stat-card">
            <div class="stat-value">@Model.Count()</div>
            <div class="stat-label">Total Plots</div>
        </div>
        <div class="stat-card">
            <div class="stat-value">@Model.Count(x => x.Status == "Growing")</div>
            <div class="stat-label">Growing</div>
        </div>
        <div class="stat-card">
            <div class="stat-value">@Model.Count(x => x.Status == "Harvested")</div>
            <div class="stat-label">Harvested</div>
        </div>
        <div class="stat-card">
            <div class="stat-value">@Model.Count(x => x.Status == "Preparation" || x.Status == "Planting")</div>
            <div class="stat-label">In Progress</div>
        </div>
    </div>
</div>

<!-- Filters Section -->
<div class="filters-section">
    <div class="filter-group">
        <label for="statusFilter"><i class="fas fa-filter me-1"></i>Status:</label>
        <select id="statusFilter">
            <option value="">All Statuses</option>
            <option value="Preparation">Preparation</option>
            <option value="Planting">Planting</option>
            <option value="Growing">Growing</option>
            <option value="Harvested">Harvested</option>
        </select>
    </div>

    <div class="filter-group">
        <label for="cropFilter"><i class="fas fa-leaf me-1"></i>Crop:</label>
        <select id="cropFilter">
            <option value="">All Crops</option>
            @foreach (var cropGroup in Model.GroupBy(x => x.Crop.Name))
            {
                <option value="@cropGroup.Key">@cropGroup.Key</option>
            }
        </select>
    </div>

    <div class="search-box">
        <i class="fas fa-search"></i>
        <input type="text" id="searchInput" placeholder="Search plots, crops, or status...">
    </div>
</div>

@if (Model.Any())
{
    <!-- Table Container -->
    <div class="table-container">
        <table class="modern-table" id="plotCropsTable">
            <thead>
                <tr>
                    <th><i class="fas fa-map-marker-alt me-1"></i>Plot</th>
                    <th><i class="fas fa-seedling me-1"></i>Crop</th>
                    <th><i class="fas fa-info-circle me-1"></i>Status</th>
                    <th><i class="fas fa-calendar-plus me-1"></i>Planted On</th>
                    <th><i class="fas fa-calendar-check me-1"></i>Expected Maturity</th>
                    <th><i class="fas fa-cogs me-1"></i>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr data-status="@item.Status" data-crop="@item.Crop.Name">
                        <td>
                            <div class="plot-name">@item.Plot.Name</div>
                        </td>
                        <td>
                            <div class="crop-name">@item.Crop.Name</div>
                        </td>
                        <td>
                            <span class="status-badge @GetStatusClass(item.Status)">
                                @item.Status
                            </span>
                        </td>
                        <td class="date-cell">
                            @(item.DatePlanted?.ToString("MMM dd, yyyy") ?? "Not planted")
                        </td>
                        <td class="date-cell">
                            @(item.ExpectedMaturityDate?.ToString("MMM dd, yyyy") ?? "N/A")
                        </td>
                        <td>
                            @Html.ActionLink("Dashboard", "Dashboard", new { id = item.Id }, new { @class = "action-button" })
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else
{
    <!-- Empty State -->
    <div class="empty-state">
        <div class="empty-illustration">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" fill="#8B7355">
                <path d="M352 256c0 22.2-1.2 43.6-3.3 64H163.3c-2.2-20.4-3.3-41.8-3.3-64s1.2-43.6 3.3-64H348.7c2.2 20.4 3.3 41.8 3.3 64zm28.8-64H464.4C468.9 207.1 472 231.2 472 256s-3.1 48.9-7.6 64H380.8c2.1-20.6 3.2-42 3.2-64s-1.1-43.4-3.2-64zm112.6-32H376.7c-10-63.9-29.8-117.4-55.3-151.6c78.3 20.7 142 77.5 171.9 151.6zm-149.1 0H167.7c6.1-36.4 15.5-68.6 27-94.7c10.5-23.6 22.2-40.7 33.5-51.5C239.4 3.2 248.7 0 256 0s16.6 3.2 27.8 13.8c11.3 10.8 23 27.9 33.5 51.5c11.5 26.1 20.9 58.2 27 94.7zm-209 0H72.3c29.9-74.1 93.6-130.9 171.9-151.6C218.7 42.6 198.9 96.1 188.9 160zM72.3 352c-29.9-74.1-93.6-130.9-171.9-151.6C125.1 234.6 144.9 288.1 154.9 352H72.3zm81.4 0c-6.1-36.4-15.5-68.6-27-94.7c-10.5-23.6-22.2-40.7-33.5-51.5C82 196.8 72.7 200 65.4 200s-16.6-3.2-27.8-13.8c-11.3-10.8-23-27.9-33.5-51.5c-11.5-26.1-20.9-58.2-27-94.7h176.6c-6.1 36.4-15.5 68.6-27 94.7c-10.5 23.6-22.2 40.7-33.5 51.5C272.6 315.2 263.3 312 256 312s-16.6 3.2-27.8 13.8c-11.3 10.8-23 27.9-33.5 51.5c-11.5 26.1-20.9 58.2-27 94.7z" />
            </svg>
        </div>
        <h3>No Plot Crops Found</h3>
        <p>Start your farming journey by planting crops in your available plots. Monitor growth, track progress, and manage your entire cultivation cycle from one place.</p>
        <a href="@Url.Action("Index", "Plots")" class="action-button">
            <i class="fas fa-plus-circle"></i> Start Planting
        </a>
    </div>
}

<!-- Font Awesome for Icons -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const statusFilter = document.getElementById('statusFilter');
        const cropFilter = document.getElementById('cropFilter');
        const searchInput = document.getElementById('searchInput');
        const tableRows = document.querySelectorAll('#plotCropsTable tbody tr');

        // Filter functionality
        function filterTable() {
            const statusValue = statusFilter.value.toLowerCase();
            const cropValue = cropFilter.value.toLowerCase();
            const searchValue = searchInput.value.toLowerCase();

            tableRows.forEach(row => {
                const status = row.dataset.status.toLowerCase();
                const crop = row.dataset.crop.toLowerCase();
                const rowText = row.textContent.toLowerCase();

                const statusMatch = !statusValue || status === statusValue;
                const cropMatch = !cropValue || crop === cropValue;
                const searchMatch = !searchValue || rowText.includes(searchValue);

                if (statusMatch && cropMatch && searchMatch) {
                    row.style.display = '';
                    row.classList.remove('loading');
                } else {
                    row.style.display = 'none';
                }
            });

            // Update visible count
            const visibleRows = Array.from(tableRows).filter(row => row.style.display !== 'none').length;
            console.log(`Showing ${visibleRows} of ${tableRows.length} plot crops`);
        }

        // Add event listeners
        statusFilter.addEventListener('change', filterTable);
        cropFilter.addEventListener('change', filterTable);
        searchInput.addEventListener('input', filterTable);

        // Row click highlighting
        tableRows.forEach(row => {
            row.addEventListener('click', function(e) {
                // Don't highlight if clicking on action button
                if (!e.target.closest('.action-button')) {
                    this.classList.add('row-highlight');
                    setTimeout(() => {
                        this.classList.remove('row-highlight');
                    }, 1000);
                }
            });
        });

        // Enhance dashboard action buttons
        const actionButtons = document.querySelectorAll('.action-button');
        actionButtons.forEach(button => {
            button.addEventListener('click', function() {
                const icon = this.querySelector('i');
                if (icon) {
                    icon.className = 'fas fa-spinner fa-spin';
                }
                this.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Loading...';
            });
        });

        // Auto-refresh stats when filtering
        function updateStats() {
            const visibleRows = Array.from(tableRows).filter(row => row.style.display !== 'none');
            // Here you could update the dashboard stats if needed
            // This is just a placeholder for future enhancement
        }

        // Add smooth scroll to table when filtering
        let filterTimeout;
        function smoothFilter() {
            clearTimeout(filterTimeout);
            filterTimeout = setTimeout(() => {
                filterTable();
                updateStats();
            }, 300);
        }

        searchInput.addEventListener('input', smoothFilter);
    });
</script>

@functions {
    string GetStatusClass(string status)
    {
        switch (status?.ToLower())
        {
            case "preparation": return "status-preparation";
            case "planting": return "status-planting";
            case "growing": return "status-growing";
            case "harvested": return "status-harvested";
            default: return "status-default";
        }
    }
}