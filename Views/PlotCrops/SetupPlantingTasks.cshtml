@model FarmTrack.Models.PlantingTaskViewModel

@{
    ViewBag.Title = "Setup Planting Tasks";
}

<style>
    /* Custom Color Scheme */
    :root {
        --color-earth: #8B7355; /* Primary */
        --color-soil: #654321; /* Secondary */
        --color-foliage: #4CAF50; /* Tertiary */
        --color-wheat: #F5DEB3; /* Accent */
        --color-danger: #FF6B6B; /* Error */
        --color-white: #FFFFFF; /* Neutral */
        --color-light-earth: #e5d9cc; /* Light version of earth */
        --color-light-foliage: #e8f5e9; /* Light version of foliage */
        --color-success: #4CAF50;
        --color-info: #2196F3;
        --color-warning: #FF9800;
    }

    body {
        background-color: #f9f7f4;
    }

    /* Dashboard Header */
    .dashboard-header {
        background: linear-gradient(135deg, var(--color-earth) 0%, var(--color-soil) 100%);
        border-radius: 12px;
        padding: 30px;
        margin-bottom: 30px;
        position: relative;
        overflow: hidden;
        box-shadow: 0 10px 20px rgba(101, 67, 33, 0.2);
    }

        .dashboard-header::before {
            content: '';
            position: absolute;
            top: 0;
            right: 0;
            width: 250px;
            height: 100%;
            background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="%23F5DEB3" opacity="0.1"><path d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/></svg>');
            background-repeat: no-repeat;
            background-position: right center;
            background-size: 180px;
            opacity: 0.2;
        }

        .dashboard-header h1 {
            color: var(--color-white);
            font-weight: 700;
            margin-bottom: 10px;
            font-size: 2.2rem;
        }

        .dashboard-header p {
            color: var(--color-wheat);
            font-size: 1.2rem;
            max-width: 600px;
        }

    /* Form Container */
    .form-container {
        background-color: var(--color-white);
        border-radius: 12px;
        padding: 30px;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.08);
        position: relative;
        overflow: hidden;
    }

        .form-container::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, var(--color-earth), var(--color-foliage));
        }

    /* Task Cards */
    .task-card {
        background: linear-gradient(135deg, #ffffff, #f8f9fa);
        border: 2px solid rgba(139, 115, 85, 0.1);
        border-radius: 12px;
        padding: 25px;
        margin-bottom: 20px;
        position: relative;
        transition: all 0.3s ease;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
    }

        .task-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
            border-color: var(--color-earth);
        }

        .task-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 4px;
            height: 100%;
            background: linear-gradient(180deg, var(--color-foliage), var(--color-earth));
            border-radius: 0 0 0 12px;
        }

    .task-header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin-bottom: 20px;
        padding-bottom: 15px;
        border-bottom: 2px solid rgba(139, 115, 85, 0.1);
    }

        .task-header .task-number {
            background: linear-gradient(135deg, var(--color-earth), var(--color-soil));
            color: var(--color-white);
            width: 35px;
            height: 35px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 700;
            font-size: 1.1rem;
        }

        .task-header .task-title {
            color: var(--color-soil);
            font-weight: 600;
            font-size: 1.2rem;
            margin: 0;
        }

    /* Form Groups */
    .form-group {
        margin-bottom: 20px;
        position: relative;
    }

        .form-group label {
            color: var(--color-soil);
            font-weight: 600;
            margin-bottom: 8px;
            display: block;
            font-size: 0.95rem;
        }

    /* Form Controls */
    .form-control {
        border: 2px solid #e0e0e0;
        border-radius: 8px;
        padding: 12px 16px;
        font-size: 1rem;
        transition: all 0.3s ease;
        background-color: #fafafa;
        width: 100%;
    }

        .form-control:focus {
            border-color: var(--color-earth);
            box-shadow: 0 0 0 3px rgba(139, 115, 85, 0.1);
            background-color: var(--color-white);
            outline: none;
        }

        .form-control:hover {
            border-color: var(--color-wheat);
            background-color: var(--color-white);
        }

    /* Checkbox Styling */
    .form-check {
        margin-bottom: 15px;
        padding: 15px;
        background-color: var(--color-light-earth);
        border-radius: 8px;
        border: 1px solid rgba(139, 115, 85, 0.2);
        transition: all 0.2s ease;
    }

        .form-check:hover {
            background-color: rgba(139, 115, 85, 0.1);
        }

    .form-check-input {
        width: 20px;
        height: 20px;
        margin-right: 10px;
        accent-color: var(--color-foliage);
        cursor: pointer;
    }

    .form-check-label {
        color: var(--color-soil);
        font-weight: 600;
        cursor: pointer;
        display: flex;
        align-items: center;
        gap: 10px;
        margin: 0;
    }

        .form-check-label::before {
            content: '\f021';
            font-family: 'Font Awesome 6 Free';
            font-weight: 900;
            color: var(--color-foliage);
            font-size: 1.1rem;
        }

    /* Recurrence Options */
    .recurrence-options {
        background: linear-gradient(135deg, var(--color-light-foliage), #f1f8e9);
        border-radius: 8px;
        padding: 20px;
        margin-top: 15px;
        border-left: 4px solid var(--color-foliage);
        transition: all 0.3s ease;
    }

    /* Action Buttons */
    .action-button {
        background: linear-gradient(135deg, var(--color-foliage) 0%, #45a049 100%);
        color: white;
        border: none;
        border-radius: 8px;
        padding: 12px 24px;
        font-weight: 600;
        font-size: 0.95rem;
        display: inline-flex;
        align-items: center;
        gap: 8px;
        box-shadow: 0 4px 15px rgba(76, 175, 80, 0.3);
        transition: all 0.3s ease;
        text-decoration: none;
        cursor: pointer;
    }

        .action-button:hover {
            background: linear-gradient(135deg, #45a049 0%, var(--color-foliage) 100%);
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(76, 175, 80, 0.4);
            color: white;
        }

    .secondary-button {
        background: linear-gradient(135deg, var(--color-earth), var(--color-soil));
        color: white;
        border: none;
        border-radius: 8px;
        padding: 12px 24px;
        font-weight: 600;
        font-size: 0.95rem;
        display: inline-flex;
        align-items: center;
        gap: 8px;
        box-shadow: 0 4px 15px rgba(139, 115, 85, 0.3);
        transition: all 0.3s ease;
        cursor: pointer;
    }

        .secondary-button:hover {
            background: linear-gradient(135deg, var(--color-soil), var(--color-earth));
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(139, 115, 85, 0.4);
        }

    .danger-button {
        background: linear-gradient(135deg, var(--color-danger), #d32f2f);
        color: white;
        border: none;
        border-radius: 6px;
        padding: 8px 16px;
        font-weight: 600;
        font-size: 0.85rem;
        display: inline-flex;
        align-items: center;
        gap: 6px;
        box-shadow: 0 3px 12px rgba(255, 107, 107, 0.3);
        transition: all 0.3s ease;
        cursor: pointer;
        position: absolute;
        top: 15px;
        right: 15px;
    }

        .danger-button:hover {
            background: linear-gradient(135deg, #d32f2f, var(--color-danger));
            transform: translateY(-1px);
            box-shadow: 0 4px 15px rgba(255, 107, 107, 0.4);
        }

    /* Button Container */
    .button-container {
        display: flex;
        gap: 15px;
        margin-top: 30px;
        padding-top: 20px;
        border-top: 2px solid rgba(139, 115, 85, 0.1);
        flex-wrap: wrap;
        align-items: center;
    }

    /* Empty State */
    .empty-state {
        text-align: center;
        padding: 50px 20px;
        background: linear-gradient(135deg, #f8f9fa, #ffffff);
        border: 2px dashed var(--color-wheat);
        border-radius: 12px;
        margin-bottom: 25px;
    }

        .empty-state .icon {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            background: linear-gradient(135deg, var(--color-wheat), #e6c89a);
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 20px;
            font-size: 2rem;
            color: var(--color-soil);
        }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .dashboard-header {
            padding: 20px;
        }

        .dashboard-header h1 {
            font-size: 1.8rem;
        }

        .form-container {
            padding: 20px;
            margin: 15px;
        }

        .task-card {
            padding: 20px;
        }

        .button-container {
            flex-direction: column;
            align-items: stretch;
        }

        .action-button,
        .secondary-button {
            width: 100%;
            justify-content: center;
        }

        .danger-button {
            position: static;
            margin-top: 15px;
            width: 100%;
        }
    }

    /* Animation for new tasks */
    @@keyframes slideIn {
        from {
            opacity: 0;
            transform: translateY(-20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .task-card.new-task {
        animation: slideIn 0.3s ease-out;
    }

    /* Tasks container */
    #tasks-container {
        position: relative;
    }

    /* Task counter */
    .tasks-counter {
        background: linear-gradient(135deg, var(--color-wheat), #e6c89a);
        color: var(--color-soil);
        padding: 10px 20px;
        border-radius: 25px;
        font-weight: 600;
        display: inline-flex;
        align-items: center;
        gap: 8px;
        margin-bottom: 25px;
        box-shadow: 0 3px 12px rgba(245, 222, 179, 0.4);
    }

    /* Loading state */
    .loading {
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>

<!-- Dashboard Header -->
<div class="dashboard-header">
    <h1><i class="fas fa-tasks me-2"></i>Setup Planting Tasks</h1>
    <p>Configure automated tasks for <strong>@ViewBag.CropName</strong> cultivation cycle</p>
</div>

<div class="form-container">
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <!-- Always keep this -->
        @Html.HiddenFor(m => m.PlotCropId)

        <!-- Task Counter -->
        <div class="tasks-counter">
            <i class="fas fa-list-check"></i>
            <span id="task-count">@Model.Tasks.Count</span> Task(s) Configured
        </div>

        <div id="tasks-container">
            @for (int i = 0; i < Model.Tasks.Count; i++)
            {
                <div class="task-card">
                    <div class="task-header">
                        <div class="task-number">@(i + 1)</div>
                        <h4 class="task-title">Task Configuration</h4>
                    </div>

                    <button type="button" class="danger-button remove-task">
                        <i class="fas fa-trash"></i> Remove
                    </button>

                    <div class="form-group">
                        @Html.LabelFor(m => m.Tasks[i].Name, "Task Name")
                        @Html.TextBoxFor(m => m.Tasks[i].Name, new { @class = "form-control", placeholder = "Enter task name (e.g., Water plants, Apply fertilizer)" })
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(m => m.Tasks[i].DaysAfterPlanting, "Days After Planting")
                        @Html.TextBoxFor(m => m.Tasks[i].DaysAfterPlanting, new { @class = "form-control", type = "number", min = "0", placeholder = "e.g., 7, 14, 30" })
                    </div>

                    <div class="form-check">
                        <!-- Force "false" when unchecked -->
                        <input type="hidden" name="Tasks[@i].IsRecurring" value="false" />
                        @Html.CheckBoxFor(m => m.Tasks[i].IsRecurring, new { @class = "form-check-input recurrence-toggle" })
                        @Html.LabelFor(m => m.Tasks[i].IsRecurring, "Recurring Task", new { @class = "form-check-label" })
                    </div>

                    <div class="recurrence-options" style="@(Model.Tasks[i].IsRecurring ? "" : "display:none")">
                        <div class="form-group">
                            @Html.LabelFor(m => m.Tasks[i].RecurrenceType, "Recurrence Type")
                            @Html.DropDownListFor(m => m.Tasks[i].RecurrenceType,
                                new SelectList(new[] { "Daily", "Weekly", "Monthly" }),
                                "Select recurrence frequency", new { @class = "form-control" })
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- Empty state when no tasks -->
        <div id="empty-state" class="empty-state" style="@(Model.Tasks.Any() ? "display:none" : "")">
            <div class="icon">
                <i class="fas fa-clipboard-list"></i>
            </div>
            <h4>No Tasks Configured</h4>
            <p>Start by adding your first planting task to automate your cultivation process.</p>
        </div>

        <div class="button-container">
            <button type="button" id="add-task" class="secondary-button">
                <i class="fas fa-plus"></i> Add Another Task
            </button>

            <button type="submit" class="action-button">
                <i class="fas fa-save"></i> Save Planting Tasks
            </button>
        </div>
    }
</div>

<!-- Font Awesome for Icons -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">

<!-- jQuery (assuming it's available in your project) -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

@section Scripts {
    <script>
        $(function () {
            // Update task counter
            function updateTaskCounter() {
                const count = $('#tasks-container .task-card').length;
                $('#task-count').text(count);

                // Show/hide empty state
                if (count === 0) {
                    $('#empty-state').show();
                } else {
                    $('#empty-state').hide();
                }
            }

            // Update task numbers
            function updateTaskNumbers() {
                $('#tasks-container .task-card').each(function (index) {
                    $(this).find('.task-number').text(index + 1);
                });
            }

            // Toggle recurrence options for new + existing tasks
            $(document).on('change', '.recurrence-toggle', function () {
                const $recurrenceOptions = $(this).closest('.task-card').find('.recurrence-options');
                if (this.checked) {
                    $recurrenceOptions.slideDown(300);
                } else {
                    $recurrenceOptions.slideUp(300);
                }
            });

            // Remove task and reindex
            $(document).on('click', '.remove-task', function () {
                const $taskCard = $(this).closest('.task-card');

                // Add remove animation
                $taskCard.fadeOut(300, function () {
                    $(this).remove();
                    reindexTasks();
                    updateTaskCounter();
                    updateTaskNumbers();
                });
            });

            // Add new task
            $('#add-task').click(function () {
                var index = $('#tasks-container .task-card').length;

                var html = `
                    <div class="task-card new-task">
                        <div class="task-header">
                            <div class="task-number">${index + 1}</div>
                            <h4 class="task-title">Task Configuration</h4>
                        </div>

                        <button type="button" class="danger-button remove-task">
                            <i class="fas fa-trash"></i> Remove
                        </button>

                        <div class="form-group">
                            <label>Task Name</label>
                            <input name="Tasks[${index}].Name" class="form-control" placeholder="Enter task name (e.g., Water plants, Apply fertilizer)" />
                        </div>

                        <div class="form-group">
                            <label>Days After Planting</label>
                            <input name="Tasks[${index}].DaysAfterPlanting" class="form-control" type="number" min="0" placeholder="e.g., 7, 14, 30" />
                        </div>

                        <div class="form-check">
                            <input type="hidden" name="Tasks[${index}].IsRecurring" value="false" />
                            <input type="checkbox" name="Tasks[${index}].IsRecurring" value="true" class="form-check-input recurrence-toggle" />
                            <label class="form-check-label">Recurring Task</label>
                        </div>

                        <div class="recurrence-options" style="display:none">
                            <div class="form-group">
                                <label>Recurrence Type</label>
                                <select name="Tasks[${index}].RecurrenceType" class="form-control">
                                    <option value="">Select recurrence frequency</option>
                                    <option>Daily</option>
                                    <option>Weekly</option>
                                    <option>Monthly</option>
                                </select>
                            </div>
                        </div>
                    </div>`;

                const $newTask = $(html);
                $('#tasks-container').append($newTask);

                // Scroll to new task
                $newTask[0].scrollIntoView({ behavior: 'smooth', block: 'center' });

                updateTaskCounter();
            });

            // Reindex all tasks after remove
            function reindexTasks() {
                $('#tasks-container .task-card').each(function (i) {
                    $(this).find('input, select, label').each(function () {
                        if ($(this).attr('name')) {
                            $(this).attr('name', $(this).attr('name').replace(/Tasks\[\d+\]/, `Tasks[${i}]`));
                        }
                    });
                });
            }

            // Form validation
            $('form').on('submit', function (e) {
                const $submitBtn = $(this).find('button[type="submit"]');
                const originalText = $submitBtn.html();

                // Check if at least one task exists
                if ($('#tasks-container .task-card').length === 0) {
                    e.preventDefault();
                    alert('Please add at least one task before saving.');
                    return;
                }

                // Show loading state
                $submitBtn.html('<i class="fas fa-spinner loading"></i> Saving Tasks...');
                $submitBtn.prop('disabled', true);

                // Re-enable button after timeout (in case of errors)
                setTimeout(() => {
                    $submitBtn.html(originalText);
                    $submitBtn.prop('disabled', false);
                }, 10000);
            });

            // Initialize counter on page load
            updateTaskCounter();
        });
    </script>
}