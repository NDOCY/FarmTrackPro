@model FarmTrack.Models.HealthCheckSchedule

@{
    ViewBag.Title = "Schedule Health Check";
}

<style>
    /* Custom Color Scheme */
    :root {
        --color-earth: #8B7355; /* Primary */
        --color-soil: #654321; /* Secondary */
        --color-foliage: #4CAF50; /* Tertiary */
        --color-wheat: #F5DEB3; /* Accent */
        --color-danger: #FF6B6B; /* Error */
        --color-white: #FFFFFF; /* Neutral */
    }

    /* Page Header */
    .page-header {
        background-color: var(--color-wheat);
        padding: 20px;
        border-radius: 8px;
        margin-bottom: 20px;
    }

        .page-header h2 {
            color: var(--color-soil);
            font-weight: 700;
            margin-bottom: 0;
        }

    /* Content Container */
    .content-container {
        background-color: var(--color-white);
        border: 1px solid var(--color-wheat);
        border-radius: 8px;
        padding: 20px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
    }

    /* Form Styling */
    .form-container {
        background-color: var(--color-white);
        border: 1px solid var(--color-wheat);
        border-radius: 8px;
        padding: 20px;
    }

    .form-group {
        margin-bottom: 15px;
    }

        .form-group label {
            color: var(--color-soil);
            font-weight: 500;
        }

    .form-control {
        border: 1px solid var(--color-wheat);
        border-radius: 4px;
        padding: 8px;
    }

        .form-control:focus {
            border-color: var(--color-earth);
            box-shadow: 0 0 5px rgba(139, 115, 85, 0.5);
        }

    /* Button Styling */
    .btn {
        border-radius: 6px;
        padding: 8px 16px;
        font-weight: 500;
    }

    .btn-success {
        background-color: var(--color-earth);
        border-color: var(--color-earth);
        color: var(--color-white);
    }

        .btn-success:hover {
            background-color: var(--color-soil);
            border-color: var(--color-soil);
        }

    /* Livestock Checkboxes Styling */
    #livestockCheckboxes {
        max-height: 300px;
        overflow-y: auto;
        border: 1px solid var(--color-wheat);
        border-radius: 4px;
        padding: 10px;
    }

    .form-check {
        margin-bottom: 8px;
    }

    .form-check-label {
        color: var(--color-soil);
    }

    /* Validation Error Styling */
    .field-validation-error {
        color: var(--color-danger);
        font-size: 0.875em;
        margin-top: 5px;
    }

    .validation-summary-errors {
        background-color: #f8d7da;
        border: 1px solid #f5c6cb;
        color: #721c24;
        padding: 10px;
        border-radius: 4px;
        margin-bottom: 20px;
    }

        .validation-summary-errors ul {
            margin: 0;
            padding-left: 20px;
        }

    .input-validation-error {
        border-color: var(--color-danger) !important;
    }
</style>

<!-- Page Header -->
<div class="page-header">
    <h2><i class="fas fa-calendar-check"></i> Schedule Health Check</h2>
</div>

<div class="content-container">
    <div class="form-container">

        <!-- Display validation summary -->
        @Html.ValidationSummary(true, "", new { @class = "validation-summary-errors" })

        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

            <div class="form-group">
                @Html.LabelFor(m => m.CheckType)
                <div class="input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text"><i class="fas fa-stethoscope"></i></span>
                    </div>
                    @Html.DropDownListFor(m => m.CheckType, new SelectList(ViewBag.HealthCheckTypes as List<string>, Model.CheckType), "-- Select Health Check Type --", new { @class = "form-control" })
                </div>
                @Html.ValidationMessageFor(m => m.CheckType, "", new { @class = "field-validation-error" })
            </div>

            <div class="form-group">
                @Html.LabelFor(m => m.Notes)
                <div class="input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text"><i class="fas fa-sticky-note"></i></span>
                    </div>
                    @Html.TextAreaFor(m => m.Notes, new { @class = "form-control", rows = "3", placeholder = "Enter any additional notes here" })
                </div>
                @Html.ValidationMessageFor(m => m.Notes, "", new { @class = "field-validation-error" })
            </div>

            <div class="form-group">
                @Html.LabelFor(m => m.ScheduledDate)
                <div class="input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text"><i class="fas fa-calendar-alt"></i></span>
                    </div>
                    @Html.TextBoxFor(m => m.ScheduledDate, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date" })
                </div>
                @Html.ValidationMessageFor(m => m.ScheduledDate, "", new { @class = "field-validation-error" })
            </div>

            <div class="form-group">
                @Html.Label("Assigned User")
                <div class="input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text"><i class="fas fa-user"></i></span>
                    </div>
                    @Html.DropDownListFor(m => m.AssignedToUserId, (SelectList)ViewBag.Users, "-- Select User --", new { @class = "form-control" })
                </div>
                @Html.ValidationMessageFor(m => m.AssignedToUserId, "", new { @class = "field-validation-error" })
            </div>

            <div class="form-group">
                <div class="form-check">
                    @Html.CheckBoxFor(m => m.IsOutsourced, new { @class = "form-check-input", id = "IsOutsourced" })
                    <label class="form-check-label" for="IsOutsourced">Is Outsourced?</label>
                </div>
            </div>

            <div class="form-group" id="vetSection" style="display:@(Model.IsOutsourced ? "block" : "none")">
                @Html.LabelFor(m => m.VeterinarianId, "Select Veterinarian")
                @Html.DropDownListFor(m => m.VeterinarianId, (SelectList)ViewBag.Veterinarians, "-- Select Vet --", new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.VeterinarianId, "", new { @class = "field-validation-error" })
            </div>

            <div class="form-group" id="purposeSection" style="display:@(Model.IsOutsourced ? "block" : "none")">
                @Html.LabelFor(m => m.Purpose, "Purpose")
                <div class="input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text"><i class="fas fa-clipboard"></i></span>
                    </div>
                    @Html.TextAreaFor(m => m.Purpose, new { @class = "form-control", rows = "2", placeholder = "Enter the purpose of the veterinary appointment" })
                </div>
                @Html.ValidationMessageFor(m => m.Purpose, "", new { @class = "field-validation-error" })
            </div>

            <div class="form-group">
                <label>Filter by Type</label>
                <div class="input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text"><i class="fas fa-filter"></i></span>
                    </div>
                    <select id="livestockType" class="form-control">
                        <option value="">-- All Types --</option>
                        @foreach (var type in (List<string>)ViewBag.Types)
                        {
                            <option value="@type">@type</option>
                        }
                    </select>
                </div>
            </div>

            <div class="form-group">
                <label>Select Livestock <span style="color: var(--color-danger);">*</span></label>
                <div class="mb-2">
                    <button type="button" class="btn btn-sm btn-primary" id="selectAllBtn">
                        <i class="fas fa-check-square"></i> Select All Visible
                    </button>
                    <button type="button" class="btn btn-sm btn-secondary" id="clearAllBtn">
                        <i class="fas fa-square"></i> Clear All
                    </button>
                </div>
                <div id="livestockCheckboxes" class="border rounded p-2">
                    @foreach (var l in (List<FarmTrack.Models.Livestock>)ViewBag.Livestocks)
                    {
                        <div class="form-check livestock-option" data-type="@l.Type">
                            <input class="form-check-input" type="checkbox" name="SelectedLivestockIds" value="@l.LivestockId" id="livestock_@l.LivestockId" />
                            <label class="form-check-label" for="livestock_@l.LivestockId">
                                @l.TagNumber (@l.Type)
                            </label>
                        </div>
                    }
                </div>
                <!-- Custom validation message for livestock selection -->
                <div id="livestockValidation" class="field-validation-error" style="display: none;">
                    Please select at least one animal.
                </div>
            </div>

            <button type="submit" class="btn btn-success">
                <i class="fas fa-save"></i> Schedule
            </button>
        }
    </div>
</div>

@section Scripts {
    <script>
        const livestockTypeSelect = document.getElementById("livestockType");
        const livestockOptions = document.querySelectorAll(".livestock-option");
        const selectAllBtn = document.getElementById("selectAllBtn");
        const clearAllBtn = document.getElementById("clearAllBtn");
        const isOutsourcedCheckbox = document.getElementById("IsOutsourced");
        const vetSection = document.getElementById("vetSection");
        const purposeSection = document.getElementById("purposeSection");

        // Filter by livestock type
        livestockTypeSelect.addEventListener("change", function () {
            const selectedType = this.value;
            livestockOptions.forEach(opt => {
                opt.style.display = (!selectedType || opt.dataset.type === selectedType) ? "block" : "none";
            });
        });

        // Select all visible checkboxes
        selectAllBtn.addEventListener("click", function () {
            livestockOptions.forEach(opt => {
                if (opt.style.display !== "none") {
                    const checkbox = opt.querySelector("input[type='checkbox']");
                    checkbox.checked = true;
                }
            });
        });

        // Clear all checkboxes
        clearAllBtn.addEventListener("click", function () {
            document.querySelectorAll("input[name='SelectedLivestockIds']").forEach(cb => cb.checked = false);
        });

        // Handle outsourced checkbox
        isOutsourcedCheckbox.addEventListener("change", function () {
            const isChecked = this.checked;
            vetSection.style.display = isChecked ? "block" : "none";
            purposeSection.style.display = isChecked ? "block" : "none";
        });

        // Form submission validation
        document.querySelector("form").addEventListener("submit", function (e) {
            const selectedLivestock = document.querySelectorAll("input[name='SelectedLivestockIds']:checked");
            const livestockValidation = document.getElementById("livestockValidation");

            if (selectedLivestock.length === 0) {
                e.preventDefault();
                livestockValidation.style.display = "block";
                livestockValidation.scrollIntoView({ behavior: 'smooth', block: 'center' });
            } else {
                livestockValidation.style.display = "none";
            }
        });

        // Hide livestock validation when animals are selected
        document.querySelectorAll("input[name='SelectedLivestockIds']").forEach(checkbox => {
            checkbox.addEventListener("change", function () {
                const selectedLivestock = document.querySelectorAll("input[name='SelectedLivestockIds']:checked");
                const livestockValidation = document.getElementById("livestockValidation");

                if (selectedLivestock.length > 0) {
                    livestockValidation.style.display = "none";
                }
            });
        });
    </script>
}

<!-- Font Awesome for Icons -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">