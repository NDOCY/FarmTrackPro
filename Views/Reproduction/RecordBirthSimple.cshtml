@model FarmTrack.Models.ReproductionRecord

@{
    ViewBag.Title = "Record Birth";
}

<style>
    /* Custom Color Scheme */
    :root {
        --color-earth: #8B7355; /* Primary */
        --color-soil: #654321; /* Secondary */
        --color-foliage: #4CAF50; /* Tertiary */
        --color-wheat: #F5DEB3; /* Accent */
        --color-danger: #FF6B6B; /* Error */
        --color-white: #FFFFFF; /* Neutral */
    }

    /* Page Header */
    .page-header {
        background-color: var(--color-wheat);
        padding: 20px;
        border-radius: 8px;
        margin-bottom: 20px;
    }

        .page-header h2 {
            color: var(--color-soil);
            font-weight: 700;
            margin-bottom: 0;
        }

    /* Content Container */
    .content-container {
        background-color: var(--color-white);
        border: 1px solid var(--color-wheat);
        border-radius: 8px;
        padding: 20px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
    }

    /* Details Card */
    .details-card {
        background-color: rgba(245, 222, 179, 0.1);
        border: 1px solid var(--color-wheat);
        border-radius: 8px;
        padding: 20px;
        margin-bottom: 20px;
    }

        .details-card h4 {
            color: var(--color-soil);
            font-weight: 600;
            margin-bottom: 15px;
            border-bottom: 2px solid var(--color-wheat);
            padding-bottom: 10px;
        }

    /* Definition List Styling */
    dl.row {
        margin-bottom: 0;
    }

    dt {
        color: var(--color-earth);
        font-weight: 600;
    }

    dd {
        margin-bottom: 8px;
    }

    /* Form Styling */
    .form-container {
        background-color: var(--color-white);
        border: 1px solid var(--color-wheat);
        border-radius: 8px;
        padding: 20px;
    }

    .form-group {
        margin-bottom: 15px;
    }

        .form-group label {
            color: var(--color-soil);
            font-weight: 500;
        }

    .form-control {
        border: 1px solid var(--color-wheat);
        border-radius: 4px;
        padding: 8px;
    }

        .form-control:focus {
            border-color: var(--color-earth);
            box-shadow: 0 0 5px rgba(139, 115, 85, 0.5);
        }

    /* Button Styling */
    .btn {
        border-radius: 6px;
        padding: 8px 16px;
        font-weight: 500;
    }

    .btn-primary {
        background-color: var(--color-earth);
        border-color: var(--color-earth);
        color: var(--color-white);
    }

        .btn-primary:hover {
            background-color: var(--color-soil);
            border-color: var(--color-soil);
        }

    .btn-secondary {
        background-color: var(--color-wheat);
        border-color: var(--color-wheat);
        color: var(--color-soil);
    }

        .btn-secondary:hover {
            background-color: #e5cca3;
            border-color: #e5cca3;
        }

    /* Action Buttons Container */
    .action-buttons {
        display: flex;
        gap: 10px;
    }

    #weightContainer {
        opacity: 0;
        transition: opacity 0.4s ease;
    }

        #weightContainer.show {
            opacity: 1;
        }
</style>

<!-- Page Header -->
<div class="page-header">
    <h2><i class="fas fa-baby"></i> Record Birth</h2>
</div>

<div class="content-container">
    <!-- Reproduction Details Card -->
    <div class="details-card">
        <h4><i class="fas fa-info-circle"></i> Reproduction Details</h4>
        <dl class="row">
            <dt class="col-sm-3">Female</dt>
            <dd class="col-sm-9">@Model.FemaleLivestock?.TagNumber (@Model.FemaleLivestock?.Type)</dd>

            <dt class="col-sm-3">Male</dt>
            <dd class="col-sm-9">@(Model.MaleLivestock != null ? $"{Model.MaleLivestock.TagNumber} ({Model.MaleLivestock.Type})" : "Not Recorded")</dd>

            <dt class="col-sm-3">Breeding Date</dt>
            <dd class="col-sm-9">@Model.BreedingDate.ToShortDateString()</dd>

            <dt class="col-sm-3">Expected Due Date</dt>
            <dd class="col-sm-9">@(Model.ExpectedDueDate.HasValue ? Model.ExpectedDueDate.Value.ToShortDateString() : "Not Specified")</dd>

            <dt class="col-sm-3">Notes</dt>
            <dd class="col-sm-9">@(string.IsNullOrEmpty(Model.Notes) ? "No notes recorded" : Model.Notes)</dd>
        </dl>
    </div>

    <!-- Birth Recording Form -->
    <div class="form-container">
        <h4><i class="fas fa-plus-circle"></i> Record Birth Information</h4>

        @using (Html.BeginForm("RecordBirthSimple", "Reproduction", FormMethod.Post))
        {
            @Html.AntiForgeryToken()
            @Html.Hidden("id", Model.Id)

            <div class="form-group">
                <label for="numberOfOffspring">Number of Offspring</label>
                <div class="input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text"><i class="fas fa-baby"></i></span>

                        @*input type="number" name="numberOfOffspring" class="form-control" required min="1" placeholder="Enter number of offspring" />
                        *@@Html.TextBox("numberOfOffspring", null, new { type = "number", min = 1, required = "required", onchange = "generateWeightInputs()" })
                    </div>
                    <div id="weightContainer" class="mt-3" style="display: none;">
                        <h5><i class="fas fa-weight"></i> Offspring Weights</h5>
                        <div id="weightInputs"></div>
                    </div>
                </div>
            </div>

            <div class="form-group">
                <label for="birthDate">Birth Date</label>
                <div class="input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text"><i class="fas fa-calendar-alt"></i></span>
                    </div>
                    <input type="date" name="birthDate" class="form-control" value="@DateTime.Now.ToString("yyyy-MM-dd")" required />
                </div>
            </div>

            <div class="form-group">
                <label for="birthNotes">Birth Notes (Optional)</label>
                <textarea name="birthNotes" class="form-control" rows="3" placeholder="Enter any notes about the birth"></textarea>
            </div>

            <div class="action-buttons mt-4">
                <a href="@Url.Action("Index", "Reproduction")" class="btn btn-secondary">
                    <i class="fas fa-arrow-left"></i> Cancel
                </a>
                <button type="submit" class="btn btn-primary">
                    <i class="fas fa-save"></i> Save Birth Record
                </button>
            </div>
        }
    </div>
</div>
@*
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.Hidden("id", Model.Id)

    <label>Number of Offspring:</label>
    @Html.TextBox("numberOfOffspring", null, new { type = "number", min = 1, required = "required", onchange = "generateWeightInputs()" })

    <div id="weightContainer" class="mt-3" style="display: none;">
        <h5><i class="fas fa-weight"></i> Offspring Weights</h5>
        <div id="weightInputs"></div>
    </div>

    <button type="submit">Record Birth</button>
}*@

@section Scripts {
    <script>
        function generateWeightInputs() {
            const num = parseInt(document.querySelector("[name='numberOfOffspring']").value);
            const container = document.getElementById("weightInputs");
            const section = document.getElementById("weightContainer");

            container.innerHTML = "";

            if (isNaN(num) || num < 1) {
                section.classList.remove("show");
                setTimeout(() => section.style.display = "none", 300);
                return;
            }

            for (let i = 0; i < num; i++) {
                const group = document.createElement("div");
                group.className = "form-group";

                const label = document.createElement("label");
                label.textContent = "Weight for Offspring " + (i + 1);

                const input = document.createElement("input");
                input.name = "Weights[" + i + "]";
                input.type = "number";
                input.step = "0.01";
                input.required = true;
                input.className = "form-control";

                group.appendChild(label);
                group.appendChild(input);
                container.appendChild(group);
            }

            section.style.display = "block";
            setTimeout(() => section.classList.add("show"), 10);
        }
    </script>
}


<!-- Font Awesome for Icons -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">