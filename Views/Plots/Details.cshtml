@model FarmTrack.Models.Plot

@{
    ViewBag.Title = "Plot Details";
}

<!-- Leaflet core -->
<link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>

<style>
    /* Custom Color Scheme */
    :root {
        --color-earth: #8B7355; /* Primary */
        --color-soil: #654321; /* Secondary */
        --color-foliage: #4CAF50; /* Tertiary */
        --color-wheat: #F5DEB3; /* Accent */
        --color-danger: #FF6B6B; /* Error */
        --color-white: #FFFFFF; /* Neutral */
        --color-light-earth: #e5d9cc; /* Light version of earth */
        --color-light-foliage: #e8f5e9; /* Light version of foliage */
    }

    body {
        background-color: #f9f7f4;
    }

    /* Page Header */
    .page-header {
        background: linear-gradient(135deg, var(--color-earth) 0%, var(--color-soil) 100%);
        border-radius: 12px;
        padding: 30px;
        margin-bottom: 30px;
        position: relative;
        overflow: hidden;
        box-shadow: 0 10px 20px rgba(101, 67, 33, 0.2);
    }

        .page-header::before {
            content: '';
            position: absolute;
            top: 0;
            right: 0;
            width: 200px;
            height: 100%;
            background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="%23F5DEB3" opacity="0.1"><path d="M12 2L2 7L12 12L22 7L12 2ZM2 17L12 22L22 17M2 12L12 17L22 12"/></svg>');
            background-repeat: no-repeat;
            background-position: right center;
            background-size: 150px;
            opacity: 0.2;
        }

        .page-header h1 {
            color: var(--color-white);
            font-weight: 700;
            margin-bottom: 10px;
            font-size: 2rem;
        }

        .page-header p {
            color: var(--color-wheat);
            font-size: 1.1rem;
            margin: 0;
        }

    /* Details Container */
    .details-container {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 30px;
        margin-bottom: 30px;
    }

    .details-card {
        background-color: white;
        border-radius: 12px;
        padding: 25px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
        transition: all 0.3s ease;
    }

        .details-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.12);
        }

    .card-title {
        color: var(--color-soil);
        font-size: 1.25rem;
        font-weight: 700;
        margin-bottom: 20px;
        display: flex;
        align-items: center;
        gap: 10px;
        border-bottom: 2px solid var(--color-wheat);
        padding-bottom: 10px;
    }

    .detail-item {
        display: flex;
        align-items: center;
        margin-bottom: 15px;
        padding: 12px;
        border-radius: 8px;
        transition: all 0.2s ease;
    }

        .detail-item:hover {
            background-color: var(--color-light-earth);
        }

    .detail-label {
        font-weight: 600;
        color: var(--color-soil);
        min-width: 140px;
        display: flex;
        align-items: center;
        gap: 8px;
        font-size: 0.9rem;
    }

    .detail-value {
        color: #555;
        font-weight: 500;
        flex: 1;
    }

    .detail-value.highlight {
        background-color: var(--color-light-foliage);
        color: var(--color-foliage);
        padding: 4px 8px;
        border-radius: 4px;
        font-weight: 600;
    }

    .detail-value.crop-name {
        color: var(--color-foliage);
        font-weight: 700;
        font-size: 1.1rem;
    }

    .detail-value.status {
        display: inline-block;
        padding: 6px 12px;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .status-active {
        background-color: var(--color-light-foliage);
        color: var(--color-foliage);
    }

    .status-planted {
        background-color: #fff3e0;
        color: #f57c00;
    }

    .status-harvested {
        background-color: var(--color-light-earth);
        color: var(--color-earth);
    }

    .status-inactive {
        background-color: #f5f5f5;
        color: #757575;
    }

    /* Map Container */
    .map-container {
        grid-column: 1 / -1;
        background-color: white;
        border-radius: 12px;
        padding: 25px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
    }

    .map-title {
        color: var(--color-soil);
        font-size: 1.25rem;
        font-weight: 700;
        margin-bottom: 20px;
        display: flex;
        align-items: center;
        gap: 10px;
        border-bottom: 2px solid var(--color-wheat);
        padding-bottom: 10px;
    }

    #map {
        height: 400px;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    /* Action Buttons */
    .action-buttons {
        display: flex;
        gap: 15px;
        margin-bottom: 30px;
        flex-wrap: wrap;
    }

    .action-button {
        background-color: var(--color-foliage);
        color: white;
        border: none;
        border-radius: 50px;
        padding: 12px 25px;
        font-weight: 600;
        display: inline-flex;
        align-items: center;
        gap: 8px;
        box-shadow: 0 4px 12px rgba(76, 175, 80, 0.3);
        transition: all 0.3s ease;
        text-decoration: none;
    }

        .action-button:hover {
            background-color: #3d8b40;
            transform: translateY(-2px);
            box-shadow: 0 6px 15px rgba(76, 175, 80, 0.4);
            color: white;
        }

        .action-button.secondary {
            background-color: var(--color-wheat);
            color: var(--color-soil);
            box-shadow: 0 4px 12px rgba(245, 222, 179, 0.4);
        }

            .action-button.secondary:hover {
                background-color: #e6c89a;
                box-shadow: 0 6px 15px rgba(245, 222, 179, 0.5);
                color: var(--color-soil);
            }

        .action-button.info {
            background-color: #2196F3;
            box-shadow: 0 4px 12px rgba(33, 150, 243, 0.3);
        }

            .action-button.info:hover {
                background-color: #1976D2;
                box-shadow: 0 6px 15px rgba(33, 150, 243, 0.4);
            }

    /* Navigation Links */
    .navigation-links {
        display: flex;
        gap: 15px;
        justify-content: center;
        padding: 20px;
        background-color: white;
        border-radius: 12px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    }

    .nav-link {
        color: var(--color-soil);
        text-decoration: none;
        font-weight: 600;
        padding: 8px 16px;
        border-radius: 8px;
        transition: all 0.2s ease;
        display: flex;
        align-items: center;
        gap: 6px;
    }

        .nav-link:hover {
            background-color: var(--color-light-earth);
            color: var(--color-earth);
        }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .details-container {
            grid-template-columns: 1fr;
            gap: 20px;
        }

        .action-buttons {
            flex-direction: column;
        }

        .page-header {
            padding: 20px;
        }

        .page-header h1 {
            font-size: 1.6rem;
        }

        .details-card {
            padding: 20px;
        }

        .detail-item {
            flex-direction: column;
            align-items: flex-start;
            gap: 5px;
        }

        .detail-label {
            min-width: auto;
        }
    }

    /* Notes Section */
    .notes-section {
        background-color: var(--color-light-foliage);
        border-left: 4px solid var(--color-foliage);
        padding: 15px;
        border-radius: 0 8px 8px 0;
        margin-top: 10px;
    }

    .notes-content {
        color: var(--color-soil);
        font-style: italic;
        line-height: 1.5;
    }
</style>

<!-- Page Header -->
<div class="page-header">
    <h1><i class="fas fa-seedling me-2"></i>Plot Details</h1>
    <p>Comprehensive information about @Model.Name</p>
</div>

<!-- Action Buttons -->
<div class="action-buttons">
    @if (Model.PlotCrops != null && Model.PlotCrops.Any())
    {
        var latestPlotCrop = Model.PlotCrops
            .OrderByDescending(pc => pc.DateAssigned)
            .First();
        @Html.ActionLink("Go to Crop Dashboard", "Dashboard", "PlotCrops", new { id = latestPlotCrop.Id }, new { @class = "action-button info" })
        <i class="fas fa-tachometer-alt"></i>
    }

    @Html.ActionLink("Assign Crop", "AssignCrop", "Plots", new { id = Model.Id }, new { @class = "action-button" })
    <i class="fas fa-plus-circle"></i>
</div>

<!-- Details Container -->
<div class="details-container">
    <!-- Basic Information Card -->
    <div class="details-card">
        <h3 class="card-title">
            <i class="fas fa-info-circle"></i>
            Basic Information
        </h3>

        <div class="detail-item">
            <div class="detail-label">
                <i class="fas fa-seedling"></i>
                @Html.DisplayNameFor(model => model.Crop.Name)
            </div>
            <div class="detail-value crop-name">
                @Html.DisplayFor(model => model.Crop.Name)
            </div>
        </div>

        <div class="detail-item">
            <div class="detail-label">
                <i class="fas fa-map-marker-alt"></i>
                @Html.DisplayNameFor(model => model.Name)
            </div>
            <div class="detail-value">
                @Html.DisplayFor(model => model.Name)
            </div>
        </div>

        <div class="detail-item">
            <div class="detail-label">
                <i class="fas fa-expand-arrows-alt"></i>
                @Html.DisplayNameFor(model => model.SizeInHectares)
            </div>
            <div class="detail-value highlight">
                @Html.DisplayFor(model => model.SizeInHectares) hectares
            </div>
        </div>

        <div class="detail-item">
            <div class="detail-label">
                <i class="fas fa-info-circle"></i>
                @Html.DisplayNameFor(model => model.Status)
            </div>
            <div class="detail-value">
                @{
                    string statusClass;
                    switch (Model.Status?.ToLower())
                    {
                        case "active":
                            statusClass = "status-active";
                            break;
                        case "planted":
                            statusClass = "status-planted";
                            break;
                        case "harvested":
                            statusClass = "status-harvested";
                            break;
                        default:
                            statusClass = "status-inactive";
                            break;
                    }
                }
                <span class="status @statusClass">
                    @Html.DisplayFor(model => model.Status)
                </span>
            </div>
        </div>
    </div>

    <!-- Agricultural Details Card -->
    <div class="details-card">
        <h3 class="card-title">
            <i class="fas fa-tractor"></i>
            Agricultural Details
        </h3>

        <div class="detail-item">
            <div class="detail-label">
                <i class="fas fa-mountain"></i>
                @Html.DisplayNameFor(model => model.SoilType)
            </div>
            <div class="detail-value">
                @Html.DisplayFor(model => model.SoilType)
            </div>
        </div>

        <div class="detail-item">
            <div class="detail-label">
                <i class="fas fa-tint"></i>
                @Html.DisplayNameFor(model => model.IrrigationMethod)
            </div>
            <div class="detail-value">
                @Html.DisplayFor(model => model.IrrigationMethod)
            </div>
        </div>

        <div class="detail-item">
            <div class="detail-label">
                <i class="fas fa-flask"></i>
                @Html.DisplayNameFor(model => model.FertilizerType)
            </div>
            <div class="detail-value">
                @Html.DisplayFor(model => model.FertilizerType)
            </div>
        </div>

        <div class="detail-item">
            <div class="detail-label">
                <i class="fas fa-clock"></i>
                @Html.DisplayNameFor(model => model.IrrigationFrequency)
            </div>
            <div class="detail-value">
                @Html.DisplayFor(model => model.IrrigationFrequency)
            </div>
        </div>
    </div>

    <!-- Timeline Card -->
    <div class="details-card">
        <h3 class="card-title">
            <i class="fas fa-calendar-alt"></i>
            Timeline
        </h3>

        <div class="detail-item">
            <div class="detail-label">
                <i class="fas fa-calendar-plus"></i>
                @Html.DisplayNameFor(model => model.PlantingDate)
            </div>
            <div class="detail-value">
                @Html.DisplayFor(model => model.PlantingDate)
            </div>
        </div>

        <div class="detail-item">
            <div class="detail-label">
                <i class="fas fa-calendar-check"></i>
                @Html.DisplayNameFor(model => model.MaturityDate)
            </div>
            <div class="detail-value">
                @Html.DisplayFor(model => model.MaturityDate)
            </div>
        </div>

        <div class="detail-item">
            <div class="detail-label">
                <i class="fas fa-search"></i>
                @Html.DisplayNameFor(model => model.LastInspectionDate)
            </div>
            <div class="detail-value">
                @Html.DisplayFor(model => model.LastInspectionDate)
            </div>
        </div>
    </div>

    <!-- Notes Card -->
    <div class="details-card">
        <h3 class="card-title">
            <i class="fas fa-sticky-note"></i>
            Notes & Additional Information
        </h3>

        @if (!string.IsNullOrEmpty(Model.Notes))
        {
            <div class="notes-section">
                <div class="notes-content">
                    @Html.DisplayFor(model => model.Notes)
                </div>
            </div>
        }
        else
        {
            <div class="detail-item">
                <div class="detail-value" style="color: #999; font-style: italic;">
                    No additional notes available for this plot.
                </div>
            </div>
        }
    </div>

    <!-- Map Container -->
    <div class="map-container">
        <h3 class="map-title">
            <i class="fas fa-map"></i>
            Plot Boundary Map
        </h3>
        <div id="map"></div>
    </div>
</div>

<!-- Navigation Links -->
<div class="navigation-links">
    @Html.ActionLink("Edit Plot", "Edit", new { id = Model.Id }, new { @class = "nav-link" })
    <i class="fas fa-edit"></i>
    @Html.ActionLink("Back to List", "Index", null, new { @class = "nav-link" })
    <i class="fas fa-arrow-left"></i>
</div>

<!-- Font Awesome for Icons -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">

<script>
    var map = L.map('map').setView([-28.4793, 24.6727], 6);

    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '© OpenStreetMap contributors'
    }).addTo(map);

    var geoData = '@Html.Raw(Model.Coordinates)';
    if (geoData) {
        try {
            var shape = L.geoJSON(JSON.parse(geoData));
            shape.addTo(map);
            map.fitBounds(shape.getBounds());
        } catch (e) {
            console.error("Invalid GeoJSON:", e);
        }
    }
</script>