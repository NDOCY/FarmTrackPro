@model List<FarmTrack.Models.Sale>

@{
    ViewBag.Title = "Delivery Dashboard";
    var currentUserId = (int)Session["UserId"];
    var myAssignedDeliveries = Model.Where(s => s.AssignedDriverId == currentUserId).ToList();
    var availableDeliveries = Model.Where(s => !s.AssignedDriverId.HasValue).ToList();
}

<div class="container-fluid mt-4">
    <div class="row">
        <div class="col-12">
            <!-- Header -->
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h1><i class="fas fa-truck"></i> Delivery Dashboard</h1>
                    <p class="lead mb-0">Welcome, @Session["FullName"] - Manage your deliveries</p>
                </div>
                <div>
                    <button class="btn btn-success" onclick="startDeliveryMode()" id="deliveryModeBtn">
                        <i class="fas fa-play"></i> Go Online as Driver
                    </button>
                    <a href="@Url.Action("SalesList")" class="btn btn-secondary">
                        <i class="fas fa-arrow-left"></i> Back to Sales
                    </a>
                </div>
            </div>

            <!-- Driver Status Panel -->
            <div class="card mb-4" id="driverStatusCard" style="display: none;">
                <div class="card-header bg-success text-white">
                    <h5 class="mb-0"><i class="fas fa-user-check"></i> You're Online as a Driver</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <p><strong>Driver:</strong> @Session["FullName"]</p>
                            <p><strong>Phone:</strong> @Session["Phone"]</p>
                            <p><strong>Vehicle:</strong> @Session["VehicleType"] • @Session["VehicleNumber"]</p>
                            <p><strong>Status:</strong> <span class="badge bg-success" id="onlineStatus">Online & Active</span></p>
                        </div>
                        <div class="col-md-6">
                            <p><strong>Current Location:</strong> <span id="currentLocation">Getting location...</span></p>
                            <p><strong>Last Update:</strong> <span id="locationTimestamp">Just now</span></p>
                            <p><strong>Active Deliveries:</strong> <span id="activeDeliveriesCount">0</span></p>
                            <button class="btn btn-warning btn-sm" onclick="stopDeliveryMode()">
                                <i class="fas fa-stop"></i> Go Offline
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- My Assigned Deliveries -->
            <div class="card mb-4">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">
                        <i class="fas fa-list-check"></i> My Assigned Deliveries
                        <span class="badge bg-light text-dark ms-2">@myAssignedDeliveries.Count</span>
                    </h5>
                </div>
                <div class="card-body">
                    @if (!myAssignedDeliveries.Any())
                    {
                        <p class="text-muted">You have no assigned deliveries.</p>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>Order #</th>
                                        <th>Customer</th>
                                        <th>Address</th>
                                        <th>Status</th>
                                        <th>Assigned Time</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var delivery in myAssignedDeliveries)
                                    {
                                        <tr>
                                            <td><strong>#@delivery.SaleId</strong></td>
                                            <td>@delivery.CustomerName</td>
                                            <td><small>@delivery.DeliveryAddress</small></td>
                                            <td>
                                                <span class="badge bg-@GetStatusColor(delivery.Status)">
                                                    @delivery.Status
                                                </span>
                                            </td>
                                            <td>
                                                <small>@delivery.LastLocationUpdate?.ToString("g")</small>
                                            </td>
                                            <td>
                                                <div class="btn-group btn-group-sm">
                                                    @if (delivery.Status == "Assigned to Driver")
                                                    {
                                                        <button class="btn btn-success" onclick="startDelivery(@delivery.SaleId)">
                                                            <i class="fas fa-play"></i> Start Delivery
                                                        </button>
                                                    }
                                                    else if (delivery.Status == "Out for Delivery")
                                                    {
                                                        <button class="btn btn-warning" onclick="pauseDelivery(@delivery.SaleId)">
                                                            <i class="fas fa-pause"></i> Pause
                                                        </button>
                                                        <button class="btn btn-primary" onclick="completeDelivery(@delivery.SaleId)">
                                                            <i class="fas fa-check"></i> Complete
                                                        </button>
                                                    }
                                                    <a href="@Url.Action("LiveTrackingMap", new { id = delivery.SaleId })"
                                                       class="btn btn-info" target="_blank">
                                                        <i class="fas fa-map"></i> Track
                                                    </a>
                                                    <a href="tel:@delivery.CustomerPhone" class="btn btn-outline-primary">
                                                        <i class="fas fa-phone"></i> Call
                                                    </a>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            </div>

            <!-- Available Deliveries (for admins to assign to themselves) -->
            @if (availableDeliveries.Any())
            {
                <div class="card mb-4">
                    <div class="card-header bg-info text-white">
                        <h5 class="mb-0"><i class="fas fa-list"></i> Available Deliveries</h5>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>Order #</th>
                                        <th>Customer</th>
                                        <th>Address</th>
                                        <th>Status</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var delivery in availableDeliveries)
                                    {
                                        <tr>
                                            <td><strong>#@delivery.SaleId</strong></td>
                                            <td>@delivery.CustomerName</td>
                                            <td><small>@delivery.DeliveryAddress</small></td>
                                            <td><span class="badge bg-@GetStatusColor(delivery.Status)">@delivery.Status</span></td>
                                            <td>
                                                <button class="btn btn-success btn-sm" onclick="assignToMe(@delivery.SaleId)">
                                                    <i class="fas fa-user-plus"></i> Assign to Me
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
    // FIXED: Delivery Dashboard JavaScript with real location tracking

    let locationWatchId = null;
    let currentLatitude = null;
    let currentLongitude = null;
    let activeDeliveries = [];
    let locationUpdateInterval = null;

    // Start delivery mode (go online as driver)
    function startDeliveryMode() {
        if (!navigator.geolocation) {
            alert('Geolocation is not supported by your browser');
            return;
        }

        console.log('Requesting location permission...');

        navigator.geolocation.getCurrentPosition(
            function(position) {
                console.log('Location permission granted:', position.coords);

                currentLatitude = position.coords.latitude;
                currentLongitude = position.coords.longitude;

                // Notify server that driver is online
                $.post('@Url.Action("GoOnlineAsDriver", "Products")', {
                    latitude: currentLatitude,
                    longitude: currentLongitude
                })
                .done(function(response) {
                    if (response.success) {
                        console.log('Successfully went online as driver');
                        startLocationTracking();
                        $('#driverStatusCard').show();
                        $('#deliveryModeBtn').html('<i class="fas fa-stop"></i> Go Offline').removeClass('btn-success').addClass('btn-danger');
                        updateLocationDisplay();
                        loadActiveDeliveries();
                    } else {
                        alert('Failed to go online: ' + response.message);
                    }
                })
                .fail(function() {
                    alert('Failed to connect to server. Please try again.');
                });
            },
            function(error) {
                console.error('Geolocation error:', error);
                let errorMessage = 'Location access denied. ';

                switch(error.code) {
                    case error.PERMISSION_DENIED:
                        errorMessage += 'Please enable location permissions in your browser settings.';
                        break;
                    case error.POSITION_UNAVAILABLE:
                        errorMessage += 'Location information is unavailable.';
                        break;
                    case error.TIMEOUT:
                        errorMessage += 'Location request timed out.';
                        break;
                }

                alert(errorMessage);
            },
            {
                enableHighAccuracy: true,
                timeout: 10000,
                maximumAge: 0
            }
        );
    }

    // Start continuous location tracking
    function startLocationTracking() {
        console.log('Starting continuous location tracking...');

        locationWatchId = navigator.geolocation.watchPosition(
            function(position) {
                currentLatitude = position.coords.latitude;
                currentLongitude = position.coords.longitude;

                console.log('Location updated:', currentLatitude, currentLongitude);
                updateLocationDisplay();
            },
            function(error) {
                console.error('Location tracking error:', error);
            },
            {
                enableHighAccuracy: true,
                timeout: 5000,
                maximumAge: 10000
            }
        );

        // Also set up periodic updates to server (every 5 seconds)
        locationUpdateInterval = setInterval(function() {
            if (currentLatitude && currentLongitude && activeDeliveries.length > 0) {
                updateServerWithLocation();
            }
        }, 5000);
    }

    // Update server with current location
    function updateServerWithLocation() {
        console.log('Sending location to server:', currentLatitude, currentLongitude);

        $.post('@Url.Action("UpdateDriverLocation", "Products")', {
            latitude: currentLatitude,
            longitude: currentLongitude
        })
        .done(function(response) {
            if (response.success) {
                console.log('Location updated on server:', response.message);
                $('#locationTimestamp').text(new Date().toLocaleTimeString());
            } else {
                console.warn('Failed to update location:', response.message);
            }
        })
        .fail(function() {
            console.error('Failed to send location to server');
        });
    }

    // Update location display
    function updateLocationDisplay() {
        if (currentLatitude && currentLongitude) {
            $('#currentLocation').text(`${currentLatitude.toFixed(6)}, ${currentLongitude.toFixed(6)}`);
            $('#locationTimestamp').text(new Date().toLocaleTimeString());
        }
    }

    // Stop delivery mode
    function stopDeliveryMode() {
        if (!confirm('Are you sure you want to go offline? Your active deliveries will be paused.')) {
            return;
        }

        // Stop location tracking
        if (locationWatchId) {
            navigator.geolocation.clearWatch(locationWatchId);
            locationWatchId = null;
        }

        if (locationUpdateInterval) {
            clearInterval(locationUpdateInterval);
            locationUpdateInterval = null;
        }

        // Notify server
        $.post('@Url.Action("GoOfflineAsDriver", "Products")')
            .done(function(response) {
                if (response.success) {
                    $('#driverStatusCard').hide();
                    $('#deliveryModeBtn').html('<i class="fas fa-play"></i> Go Online as Driver').removeClass('btn-danger').addClass('btn-success');
                    activeDeliveries = [];
                    updateActiveDeliveriesCount();
                    location.reload();
                }
            });
    }

    // Start a specific delivery
    function startDelivery(saleId) {
        if (!currentLatitude || !currentLongitude) {
            alert('Please wait for location to be acquired, or go online as driver first.');
            return;
        }

        if (!confirm('Start this delivery? Your location will be tracked live for the customer.')) {
            return;
        }

        console.log('Starting delivery:', saleId);

        $.post('@Url.Action("StartDelivery", "Products")', { saleId: saleId })
            .done(function(response) {
                if (response.success) {
                    console.log('Delivery started successfully');

                    // Add to active deliveries
                    if (!activeDeliveries.includes(saleId)) {
                        activeDeliveries.push(saleId);
                        updateActiveDeliveriesCount();
                    }

                    // Open tracking map in new tab
                    window.open('@Url.Action("LiveTrackingMap", "Products")' + '/' + saleId, '_blank');

                    // Start sending location updates immediately
                    updateServerWithLocation();

                    // Reload page to show updated status
                    setTimeout(() => location.reload(), 1000);
                } else {
                    alert('Error: ' + response.message);
                }
            })
            .fail(function() {
                alert('Failed to start delivery. Please try again.');
            });
    }

    // Complete delivery
    function completeDelivery(saleId) {
        if (!confirm('Mark this delivery as completed? The customer will be notified.')) {
            return;
        }

        $.post('@Url.Action("CompleteDelivery", "Products")', { saleId: saleId })
            .done(function(response) {
                if (response.success) {
                    alert('Delivery marked as completed!');

                    // Remove from active deliveries
                    activeDeliveries = activeDeliveries.filter(id => id !== saleId);
                    updateActiveDeliveriesCount();

                    location.reload();
                } else {
                    alert('Error: ' + response.message);
                }
            })
            .fail(function() {
                alert('Failed to complete delivery. Please try again.');
            });
    }

    // Pause delivery
    function pauseDelivery(saleId) {
        alert('Pause functionality coming soon. For now, you can go offline to pause all deliveries.');
    }

    // Assign delivery to me
    function assignToMe(saleId) {
        if (!confirm('Assign this delivery to yourself?')) {
            return;
        }

        $.post('@Url.Action("AssignDeliveryToMe", "Products")', { saleId: saleId })
            .done(function(response) {
                if (response.success) {
                    alert('Delivery assigned to you!');
                    location.reload();
                } else {
                    alert('Error: ' + response.message);
                }
            })
            .fail(function() {
                alert('Failed to assign delivery. Please try again.');
            });
    }

    // Load active deliveries
    function loadActiveDeliveries() {
        console.log('Loading active deliveries...');

        $.get('@Url.Action("GetMyActiveDeliveries", "Products")')
            .done(function(deliveries) {
                console.log('Active deliveries:', deliveries);
                activeDeliveries = deliveries.map(d => d.saleId);
                updateActiveDeliveriesCount();
            })
            .fail(function() {
                console.error('Failed to load active deliveries');
            });
    }

    function updateActiveDeliveriesCount() {
        $('#activeDeliveriesCount').text(activeDeliveries.length);
    }

    // Check if already online and restore state
    function checkDriverStatus() {
        $.get('@Url.Action("IsDriverOnline", "Products")')
            .done(function(isOnline) {
                console.log('Driver online status:', isOnline);

                if (isOnline) {
                    // Driver is already online, restore state
                    $('#deliveryModeBtn').html('<i class="fas fa-stop"></i> Go Offline').removeClass('btn-success').addClass('btn-danger');
                    $('#driverStatusCard').show();

                    // Try to get last known location
                    navigator.geolocation.getCurrentPosition(
                        function(position) {
                            currentLatitude = position.coords.latitude;
                            currentLongitude = position.coords.longitude;
                            updateLocationDisplay();
                            startLocationTracking();
                            loadActiveDeliveries();
                        },
                        function(error) {
                            console.warn('Could not get current location:', error);
                        }
                    );
                }
            })
            .fail(function() {
                console.error('Failed to check driver status');
            });
    }

    // Handle Go Online/Offline button click
    $(document).ready(function() {
        console.log('DeliveryDashboard initialized');

        // Check if driver is already online
        checkDriverStatus();

        // Refresh active deliveries every 30 seconds
        setInterval(function() {
            if (activeDeliveries.length > 0) {
                loadActiveDeliveries();
            }
        }, 30000);

        // Update delivery mode button handler
        $('#deliveryModeBtn').click(function() {
            if ($(this).hasClass('btn-success')) {
                startDeliveryMode();
            } else {
                stopDeliveryMode();
            }
        });
    });

    // Cleanup on page unload
    $(window).on('beforeunload', function() {
        if (locationWatchId) {
            navigator.geolocation.clearWatch(locationWatchId);
        }
        if (locationUpdateInterval) {
            clearInterval(locationUpdateInterval);
        }
    });
    </script>
}

@functions {
    public string GetStatusColor(string status)
    {
        switch (status)
        {
            case "Pending": return "warning";
            case "Confirmed": return "info";
            case "Assigned to Driver": return "primary";
            case "Out for Delivery": return "success";
            case "Delivered": return "secondary";
            case "Cancelled": return "danger";
            default: return "secondary";
        }
    }
}