@model FarmTrack.Models.Sale

@{
    ViewBag.Title = "Live Delivery Tracking - Order #" + Model.SaleId;
    var googleApiKey = System.Configuration.ConfigurationManager.AppSettings["GoogleMapsApiKey"];
    if (Session["Role"] != null && (Session["Role"].ToString() == "Admin" || Session["Role"].ToString() == "Owner"))
    {
        Layout = "~/Views/Shared/_Layout.cshtml";
    }
    else
    {
        Layout = "~/Views/Shared/_Layout - User.cshtml";
    }
}

<script src="https://maps.googleapis.com/maps/api/js?key=@googleApiKey&callback=initMap&libraries=geometry" async defer></script>

<style>
    :root {
        --color-earth: #8B7355;
        --color-soil: #654321;
        --color-foliage: #4CAF50;
        --color-wheat: #F5DEB3;
        --color-hay: #DAA520;
        --border-radius: 12px;
        --card-shadow: 0 6px 18px rgba(0,0,0,0.1);
    }

    body {
        background-color: #F9F7F4;
    }

    /* Cards */
    .tracking-card {
        background: white;
        border-radius: var(--border-radius);
        box-shadow: var(--card-shadow);
        overflow: hidden;
        margin-bottom: 20px;
    }

    .card-header-custom {
        padding: 20px 25px;
        font-weight: 600;
        color: white;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .header-success {
        background: linear-gradient(135deg, var(--color-foliage), #45a049);
    }

    .header-primary {
        background: linear-gradient(135deg, #3498db, #2980b9);
    }

    .header-warning {
        background: linear-gradient(135deg, var(--color-hay), #f0ad4e);
    }

    .card-header-custom h4,
    .card-header-custom h5 {
        margin: 0;
        display: flex;
        align-items: center;
        gap: 10px;
    }

    /* Badges */
    .badge {
        padding: 6px 12px;
        border-radius: 12px;
        font-size: 0.8rem;
        font-weight: 600;
    }

    .blink {
        animation: blink 1.5s infinite;
    }

    @@keyframes blink {
        0%, 100% { opacity: 1; }
        50% { opacity: 0.3; }
    }

    /* Buttons */
    .btn {
        padding: 8px 16px;
        border-radius: 8px;
        font-weight: 600;
        font-size: 0.85rem;
        display: inline-flex;
        align-items: center;
        gap: 6px;
        border: none;
        transition: all 0.3s;
        text-decoration: none;
    }

    .btn-sm {
        padding: 6px 12px;
        font-size: 0.8rem;
    }

    .btn-outline-primary {
        background: white;
        border: 2px solid #3498db;
        color: #3498db;
    }

    .btn-outline-info {
        background: white;
        border: 2px solid #17a2b8;
        color: #17a2b8;
    }

    .btn-outline-success {
        background: white;
        border: 2px solid var(--color-foliage);
        color: var(--color-foliage);
    }

    .btn-outline-warning {
        background: white;
        border: 2px solid var(--color-hay);
        color: var(--color-hay);
    }

    .btn-outline-secondary {
        background: white;
        border: 2px solid #9e9e9e;
        color: #9e9e9e;
    }

    .btn:hover {
        transform: translateY(-2px);
    }

    /* Progress Bar */
    .progress {
        height: 10px;
        background-color: #e9ecef;
        border-radius: 10px;
        overflow: hidden;
    }

    .progress-bar {
        background: linear-gradient(90deg, var(--color-foliage), #45a049);
        border-radius: 10px;
        transition: width 0.6s ease;
    }

    /* Map */
    #deliveryMap {
        height: 500px;
        width: 100%;
        border-radius: 0;
    }

    .card-footer-custom {
        background: rgba(139, 115, 85, 0.03);
        padding: 15px 20px;
        border-top: 1px solid #f0f0f0;
    }

    @@media (max-width: 768px) {
        #deliveryMap {
            height: 300px !important;
        }

        .btn-group {
            flex-direction: column;
            width: 100%;
        }

        .btn-group .btn {
            margin-bottom: 5px;
            border-radius: 8px !important;
        }
    }
</style>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">

<div class="container-fluid mt-4">
    <div class="row">
        <!-- Map Section -->
        <div class="col-md-8">
            <div class="tracking-card">
                <div class="card-header-custom header-success">
                    <h4>
                        <i class="fas fa-map-marked-alt"></i> Live Delivery Tracking
                        <small class="ms-2">Order #@Model.SaleId</small>
                    </h4>
                    <div>
                        <span class="badge bg-light text-dark">
                            <i class="fas fa-circle text-success blink"></i>
                            <span id="trackingStatus">LOADING...</span>
                        </span>
                        <span class="badge bg-info" id="lastUpdate">Connecting...</span>
                    </div>
                </div>
                <div id="deliveryMap">
                    <div class="d-flex justify-content-center align-items-center h-100">
                        <div class="text-center">
                            <div class="spinner-border text-success" role="status"></div>
                            <p class="mt-2">Loading tracking map...</p>
                        </div>
                    </div>
                </div>
                <div class="card-footer-custom">
                    <div class="row">
                        <div class="col-md-6">
                            <small class="text-muted">
                                <i class="fas fa-info-circle"></i>
                                <span id="mapStatus">Loading delivery information...</span>
                            </small>
                        </div>
                        <div class="col-md-6 text-end">
                            <div class="btn-group btn-group-sm">
                                <button class="btn btn-outline-primary" onclick="refreshMap()">
                                    <i class="fas fa-sync-alt"></i> Refresh
                                </button>
                                <button class="btn btn-outline-info" onclick="centerOnDriver()">
                                    <i class="fas fa-location-arrow"></i> Find Driver
                                </button>
                                <button class="btn btn-outline-success" onclick="shareTracking()">
                                    <i class="fas fa-share"></i> Share
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Info Panel -->
        <div class="col-md-4">
            <!-- Order Details -->
            <div class="tracking-card">
                <div class="card-header-custom header-primary">
                    <h5><i class="fas fa-info-circle"></i> Order Details</h5>
                </div>
                <div class="card-body">
                    <p><strong>Order #:</strong> @Model.SaleId</p>
                    <p><strong>Status:</strong> <span class="badge bg-@GetStatusColor(Model.Status)" id="orderStatus">@Model.Status</span></p>
                    <p><strong>Tracking #:</strong> <code>@Model.TrackingNumber</code></p>
                    <p><strong>Placed:</strong> @Model.SaleDate.ToString("f")</p>
                    <p><strong>Total:</strong> R @Model.TotalAmount.ToString("N2")</p>
                    <hr>
                    <p><strong>Customer:</strong> @Model.CustomerName</p>
                    <p>
                        <strong>Delivery To:</strong>
                        <small class="text-muted d-block">@Model.DeliveryAddress</small>
                    </p>
                </div>
            </div>

            <!-- Driver Info -->
            <div class="tracking-card">
                <div class="card-header-custom header-warning">
                    <h5><i class="fas fa-user-tie"></i> Delivery Driver</h5>
                </div>
                <div class="card-body text-center">
                    <div class="mb-2">
                        <i class="fas fa-user-circle fa-3x" style="color: var(--color-hay);"></i>
                    </div>
                    <h5 id="driverName">@(Model.DeliveryDriver ?? "Assigning driver...")</h5>
                    <p class="mb-1" id="vehicleInfo">
                        <i class="fas fa-@GetVehicleIcon(Model.VehicleType)"></i>
                        @(Model.VehicleType ?? "Vehicle") • @(Model.VehicleNumber ?? "TBD")
                    </p>
                    <p class="mb-2">
                        <i class="fas fa-phone"></i>
                        <span id="driverPhone">@(Model.DriverPhone ?? "Contact pending")</span>
                    </p>
                    <div class="mb-3">
                        <span class="badge bg-secondary" id="driverActiveStatus">WAITING FOR DRIVER</span>
                    </div>
                    <div class="d-grid gap-2 mt-3">
                        <a href="tel:@Model.DriverPhone" class="btn btn-sm btn-outline-primary" id="callDriverBtn"
                           style="@(string.IsNullOrEmpty(Model.DriverPhone) ? "display:none" : "")">
                            <i class="fas fa-phone"></i> Call Driver
                        </a>
                        <button class="btn btn-sm btn-outline-success" onclick="shareTracking()">
                            <i class="fas fa-share"></i> Share Tracking
                        </button>
                        <button class="btn btn-sm btn-outline-info" onclick="sendMessageToDriver()" id="messageDriverBtn"
                                style="@(string.IsNullOrEmpty(Model.DriverPhone) ? "display:none" : "")">
                            <i class="fas fa-comment"></i> Message Driver
                        </button>
                    </div>
                </div>
            </div>

            <!-- Delivery Progress -->
            <div class="tracking-card">
                <div class="card-header-custom" style="background: linear-gradient(135deg, var(--color-earth), var(--color-soil));">
                    <h5><i class="fas fa-road"></i> Delivery Progress</h5>
                </div>
                <div class="card-body">
                    <div class="progress mb-2">
                        <div class="progress-bar" role="progressbar" id="deliveryProgressBar"
                             style="width: @GetDeliveryProgress(Model.Status)%">
                        </div>
                    </div>
                    <div class="d-flex justify-content-between small">
                        <span>Order Placed</span>
                        <span id="progressText">@GetProgressText(Model.Status)</span>
                        <span>Delivered</span>
                    </div>
                    <div class="mt-3 text-center">
                        <small class="text-muted">
                            <i class="fas fa-clock"></i>
                            <strong>Estimated Delivery:</strong>
                            <span id="estimatedTime">
                                @if (Model.EstimatedDelivery.HasValue)
                                {
                                    @Model.EstimatedDelivery.Value.ToString("ddd, MMM dd 'at' h:mm tt")
                                }
                                else
                                {
                                    <text>Calculating...</text>
                                }
                            </span>
                        </small>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Control Buttons -->
    <div class="row mt-4">
        <div class="col-12 text-center">
            <div class="btn-group" role="group">
                <button class="btn btn-outline-primary" onclick="refreshMap()">
                    <i class="fas fa-sync-alt"></i> Refresh Map
                </button>
                <a href="@Url.Action("OrderTracking", new { id = Model.SaleId })" class="btn btn-outline-info">
                    <i class="fas fa-list"></i> Detailed View
                </a>
                <a href="@Url.Action("MyOrders")" class="btn btn-outline-secondary">
                    <i class="fas fa-arrow-left"></i> Back to Orders
                </a>
                @if (Session["Role"]?.ToString() == "Admin" || Session["Role"]?.ToString() == "Owner")
                {
                    <a href="@Url.Action("DeliveryDashboard")" class="btn btn-outline-warning">
                        <i class="fas fa-truck"></i> Driver Dashboard
                    </a>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
    let map, driverMarker, destinationMarker, deliveryPath, updateInterval;

function initMap() {
    const defaultLocation = { lat: -29.8587, lng: 31.0218 }; // Durban center
    map = new google.maps.Map(document.getElementById('deliveryMap'), {
        zoom: 15, // Increased zoom for better accuracy
        center: defaultLocation,
        mapTypeControl: true,
        streetViewControl: false,
        fullscreenControl: true,
        styles: [
            {
                featureType: "poi",
                elementType: "labels",
                stylers: [{ visibility: "off" }]
            }
        ]
    });

    loadDeliveryData();
    startLiveUpdates();
}

function updateMapWithRealDriver(data) {
    console.log("Updating map with data:", data);

    const driverLoc = { lat: parseFloat(data.currentLat), lng: parseFloat(data.currentLng) };
    const destLoc = { lat: parseFloat(data.destinationLat), lng: parseFloat(data.destinationLng) };

    // **FIX: Always show driver marker with proper styling**
    if (!driverMarker) {
        driverMarker = new google.maps.Marker({
            position: driverLoc,
            map: map,
            icon: {
                url: data.hasRealLocation ?
                    'https://maps.google.com/mapfiles/ms/icons/blue-dot.png' :
                    'https://maps.google.com/mapfiles/ms/icons/gray-dot.png',
                scaledSize: new google.maps.Size(40, 40)
            },
            title: data.driverName + (data.hasRealLocation ? ' (Live GPS)' : ' (Estimated)'),
            animation: data.hasRealLocation ? google.maps.Animation.BOUNCE : null
        });

        const infoWindow = new google.maps.InfoWindow({
            content: `<div style="padding:8px; min-width:200px">
                <strong>${data.driverName}</strong><br>
                ${data.vehicleType} • ${data.vehicleNumber}<br>
                <small style="color: ${data.hasRealLocation ? 'green' : 'orange'}">
                    <i class="fas fa-${data.hasRealLocation ? 'satellite' : 'map-marker'}"></i>
                    ${data.hasRealLocation ? 'Live GPS Location' : 'Estimated Location'}
                </small><br>
                <small>Coordinates: ${data.currentLat.toFixed(6)}, ${data.currentLng.toFixed(6)}</small>
            </div>`
        });

        driverMarker.addListener('click', function() {
            infoWindow.open(map, driverMarker);
        });
    } else {
        // Smooth transition to new position
        driverMarker.setPosition(driverLoc);

        // Update icon based on location source
        driverMarker.setIcon({
            url: data.hasRealLocation ?
                'https://maps.google.com/mapfiles/ms/icons/blue-dot.png' :
                'https://maps.google.com/mapfiles/ms/icons/gray-dot.png',
            scaledSize: new google.maps.Size(40, 40)
        });

        driverMarker.setAnimation(data.hasRealLocation ? google.maps.Animation.BOUNCE : null);
    }

    // Update destination marker
    if (!destinationMarker) {
        destinationMarker = new google.maps.Marker({
            position: destLoc,
            map: map,
            icon: {
                url: 'https://maps.google.com/mapfiles/ms/icons/red-dot.png',
                scaledSize: new google.maps.Size(40, 40)
            },
            title: 'Delivery Destination: ' + data.deliveryAddress
        });

        const destInfoWindow = new google.maps.InfoWindow({
            content: `<div style="padding:8px; min-width:250px">
                <strong>Delivery Destination</strong><br>
                ${data.deliveryAddress}<br>
                <small>Coordinates: ${data.destinationLat.toFixed(6)}, ${data.destinationLng.toFixed(6)}</small>
            </div>`
        });

        destinationMarker.addListener('click', function() {
            destInfoWindow.open(map, destinationMarker);
        });
    }

    // **FIX: Clear existing path and only draw if we have meaningful locations**
    if (deliveryPath) {
        deliveryPath.setMap(null);
    }

    // Calculate distance and only draw path if it makes sense
    const distance = google.maps.geometry.spherical.computeDistanceBetween(
        new google.maps.LatLng(driverLoc.lat, driverLoc.lng),
        new google.maps.LatLng(destLoc.lat, destLoc.lng)
    );
    const distanceKm = (distance / 1000).toFixed(2);

    // Only draw path if distance is reasonable (not showing driver at destination when they're not)
    if (distance > 100 && data.hasRealLocation) { // At least 100 meters apart
        deliveryPath = new google.maps.Polyline({
            path: [driverLoc, destLoc],
            geodesic: true,
            strokeColor: data.hasRealLocation ? "#4285F4" : "#999",
            strokeOpacity: 0.7,
            strokeWeight: 4,
            map: map
        });
    }

    // Update status display with accurate information
    let statusMessage = '';
    if (data.hasRealLocation) {
        statusMessage = `<i class="fas fa-satellite text-success"></i> Live GPS - ${distanceKm} km from destination`;
    } else if (data.driverIsOnline) {
        statusMessage = `<i class="fas fa-clock text-warning"></i> Driver online - waiting for GPS signal`;
    } else if (data.hasDriver) {
        statusMessage = `<i class="fas fa-map-marker text-info"></i> Estimated location - ${distanceKm} km from destination`;
    } else {
        statusMessage = `<i class="fas fa-hourglass-half text-secondary"></i> Awaiting driver assignment`;
    }

    $('#mapStatus').html(statusMessage);

    // **FIX: Smart bounds adjustment**
    const bounds = new google.maps.LatLngBounds();
    bounds.extend(driverLoc);
    bounds.extend(destLoc);

    // Add some padding
    const padding = 0.02; // ~2km padding
    bounds.extend({lat: driverLoc.lat + padding, lng: driverLoc.lng + padding});
    bounds.extend({lat: driverLoc.lat - padding, lng: driverLoc.lng - padding});

    map.fitBounds(bounds);

    // Don't zoom in too far if locations are very close
    const currentZoom = map.getZoom();
    if (currentZoom > 18) {
        map.setZoom(18);
    }
}

// Add this function to show coordinate debug info
function showCoordinateDebug(data) {
    console.log("=== COORDINATE DEBUG ===");
    console.log("Driver Coordinates:", data.currentLat, data.currentLng);
    console.log("Destination Coordinates:", data.destinationLat, data.destinationLng);
    console.log("Location Source:", data.locationSource);
    console.log("Has Real Location:", data.hasRealLocation);
    console.log("Driver Online:", data.driverIsOnline);
    console.log("========================");
}

// Update the loadDeliveryData function to include debug info
function loadDeliveryData() {
    $.get('@Url.Action("GetRealDeliveryData", "Products")', { saleId: @Model.SaleId })
        .done(function(response) {
            if (response.success) {
                showCoordinateDebug(response.deliveryData); // Debug output
                updateMapWithRealDriver(response.deliveryData);
                updateDriverInfo(response.deliveryData);
                updateLastUpdateTime();

                // Update tracking status
                if (response.deliveryData.hasRealLocation) {
                    $('#trackingStatus').html('<i class="fas fa-satellite"></i> LIVE GPS TRACKING');
                } else if (response.deliveryData.driverIsOnline) {
                    $('#trackingStatus').html('<i class="fas fa-clock"></i> DRIVER ONLINE');
                } else {
                    $('#trackingStatus').html('<i class="fas fa-map-marker"></i> ESTIMATED LOCATION');
                }
            }
        })
        .fail(function(xhr, status, error) {
            console.error("Failed to load delivery data:", error);
            showError('Connection error. Please refresh.');
        });
}
    </script>
}

@functions {
    public string GetStatusColor(string status)
    {
        switch (status)
        {
            case "Pending": return "warning";
            case "Confirmed": return "info";
            case "Out for Delivery": return "primary";
            case "Delivered": return "success";
            case "Cancelled": return "danger";
            default: return "secondary";
        }
    }

    public string GetVehicleIcon(string vehicleType)
    {
        switch (vehicleType)
        {
            case "Bike": return "motorcycle";
            case "Truck": return "truck";
            case "Van": return "shuttle-van";
            default: return "car";
        }
    }

    public int GetDeliveryProgress(string status)
    {
        switch (status)
        {
            case "Pending": return 10;
            case "Confirmed": return 25;
            case "Assigned to Driver": return 40;
            case "Out for Delivery": return 75;
            case "Delivered": return 100;
            default: return 10;
        }
    }

    public string GetProgressText(string status)
    {
        switch (status)
        {
            case "Pending": return "Received";
            case "Confirmed": return "Confirmed";
            case "Assigned to Driver": return "Assigned";
            case "Out for Delivery": return "On the Way";
            case "Delivered": return "Delivered!";
            default: return "Processing";
        }
    }
}