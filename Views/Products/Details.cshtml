@model FarmTrack.Models.Product
@{
    ViewBag.Title = Model.Name;
    var ratingSummary = ViewBag.RatingSummary as FarmTrack.Models.ProductRatingViewModel ?? new FarmTrack.Models.ProductRatingViewModel();
    var recentReviews = ViewBag.RecentReviews as List<FarmTrack.Models.ProductReview> ?? new List<FarmTrack.Models.ProductReview>();
    var canReview = ViewBag.CanReview as bool? ?? false;
}

<style>
    :root {
        --color-earth: #8B7355;
        --color-soil: #654321;
        --color-wheat: #F5DEB3;
        --color-hay: #DAA520;
        --primary-color: #4285F4;
        --success-color: #34A853;
        --warning-color: #FBBC05;
        --danger-color: #EA4335;
    }

    .product-hero {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        border-radius: 15px;
        padding: 30px;
        margin-bottom: 30px;
    }

    .product-image {
        width: 100%;
        max-width: 400px;
        height: 300px;
        object-fit: cover;
        border-radius: 10px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    }

    .product-title {
        color: var(--color-soil);
        font-weight: 700;
        margin-bottom: 10px;
    }

    .product-category {
        color: #6c757d;
        font-size: 1.1rem;
        margin-bottom: 20px;
    }

    .price-section {
        background: white;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.05);
        margin-bottom: 20px;
    }

    .current-price {
        font-size: 2rem;
        font-weight: 700;
        color: var(--color-earth);
    }

    .unit {
        color: #6c757d;
        font-size: 1rem;
    }

    .rating-display {
        display: flex;
        align-items: center;
        gap: 10px;
        margin: 15px 0;
    }

    .average-rating {
        font-size: 2rem;
        font-weight: 700;
        color: var(--color-soil);
    }

    .stars {
        display: flex;
        gap: 2px;
    }

    .star {
        color: #ddd;
        font-size: 1.2rem;
    }

        .star.filled {
            color: #FFC107;
        }

        .star.half {
            position: relative;
            color: #ddd;
        }

            .star.half::before {
                content: '★';
                position: absolute;
                left: 0;
                width: 50%;
                overflow: hidden;
                color: #FFC107;
            }

    .review-count {
        color: #6c757d;
        margin-left: 10px;
    }

    .action-buttons {
        display: flex;
        gap: 10px;
        margin-top: 20px;
    }

    .btn-add-to-cart {
        background: var(--color-earth);
        color: white;
        border: none;
        padding: 12px 30px;
        border-radius: 8px;
        font-weight: 600;
        transition: all 0.3s;
    }

        .btn-add-to-cart:hover {
            background: var(--color-hay);
            transform: translateY(-2px);
        }

    .btn-wishlist {
        background: white;
        color: var(--color-soil);
        border: 2px solid var(--color-wheat);
        padding: 12px 20px;
        border-radius: 8px;
        font-weight: 600;
        transition: all 0.3s;
    }

        .btn-wishlist:hover {
            border-color: var(--color-earth);
            transform: translateY(-2px);
        }

    /* Reviews Section */
    .reviews-section {
        margin-top: 50px;
    }

    .reviews-header {
        display: flex;
        justify-content: between;
        align-items: center;
        margin-bottom: 30px;
        padding-bottom: 15px;
        border-bottom: 2px solid var(--color-wheat);
    }

    .rating-summary-card {
        background: white;
        padding: 25px;
        border-radius: 10px;
        box-shadow: 0 2px 15px rgba(0,0,0,0.08);
        margin-bottom: 30px;
    }

    .rating-breakdown {
        display: flex;
        flex-direction: column;
        gap: 8px;
    }

    .rating-bar {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .rating-label {
        width: 80px;
        font-size: 0.9rem;
        color: #6c757d;
    }

    .rating-progress {
        flex: 1;
        height: 8px;
        background: #e9ecef;
        border-radius: 4px;
        overflow: hidden;
    }

    .rating-progress-fill {
        height: 100%;
        background: #FFC107;
        border-radius: 4px;
        transition: width 0.3s ease;
    }

    .rating-count {
        width: 40px;
        text-align: right;
        font-size: 0.9rem;
        color: #6c757d;
    }

    .review-card {
        background: white;
        border: 1px solid #e9ecef;
        border-radius: 10px;
        padding: 20px;
        margin-bottom: 20px;
        transition: all 0.3s ease;
    }

        .review-card:hover {
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
            transform: translateY(-2px);
        }

    .review-header {
        display: flex;
        justify-content: between;
        align-items: start;
        margin-bottom: 15px;
    }

    .reviewer-info {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .reviewer-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background: var(--color-wheat);
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 600;
        color: var(--color-soil);
    }

    .reviewer-name {
        font-weight: 600;
        color: var(--color-soil);
    }

    .review-date {
        color: #6c757d;
        font-size: 0.9rem;
    }

    .review-rating {
        display: flex;
        gap: 2px;
    }

    .review-text {
        color: #555;
        line-height: 1.6;
        margin-bottom: 15px;
    }

    .verified-badge {
        background: var(--success-color);
        color: white;
        padding: 2px 8px;
        border-radius: 12px;
        font-size: 0.8rem;
        font-weight: 600;
    }

    .reviews-collapse {
        max-height: 0;
        overflow: hidden;
        transition: max-height 0.5s ease;
    }

    .reviews-expanded {
        max-height: 2000px;
    }

    .toggle-reviews-btn {
        background: none;
        border: 2px solid var(--color-earth);
        color: var(--color-earth);
        padding: 10px 20px;
        border-radius: 6px;
        font-weight: 600;
        transition: all 0.3s;
        margin: 20px auto;
        display: block;
    }

        .toggle-reviews-btn:hover {
            background: var(--color-earth);
            color: white;
        }

    /* Review Form */
    .review-form-section {
        background: white;
        padding: 30px;
        border-radius: 10px;
        box-shadow: 0 2px 15px rgba(0,0,0,0.08);
        margin-top: 40px;
    }

    .rating-input {
        display: flex;
        gap: 5px;
        margin-bottom: 20px;
    }

    .rating-star {
        font-size: 2rem;
        color: #ddd;
        cursor: pointer;
        transition: color 0.2s;
    }

        .rating-star:hover,
        .rating-star.active {
            color: #FFC107;
        }

    .feature-badge {
        background: var(--color-hay);
        color: var(--color-soil);
        padding: 4px 12px;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: 600;
        margin-left: 10px;
    }

    .stock-status {
        display: inline-block;
        padding: 4px 12px;
        border-radius: 20px;
        font-size: 0.9rem;
        font-weight: 600;
        margin-left: 10px;
    }

    .in-stock {
        background: #d4edda;
        color: #155724;
    }

    .out-of-stock {
        background: #f8d7da;
        color: #721c24;
    }

    .product-meta {
        display: flex;
        gap: 20px;
        margin: 15px 0;
    }

    .meta-item {
        display: flex;
        align-items: center;
        gap: 5px;
        color: #6c757d;
        font-size: 0.9rem;
    }
</style>

<div class="container-fluid mt-4">
    <!-- Product Hero Section -->
    <div class="product-hero">
        <div class="row">
            <!-- Product Image -->
            <div class="col-md-6">
                <img src="@(string.IsNullOrEmpty(Model.ImageUrl) ? "/Content/images/placeholder-product.jpg" : Model.ImageUrl)"
                     alt="@Model.Name" class="product-image" id="mainProductImage">

                <!-- Image Gallery (you can expand this later) -->
                <div class="image-gallery mt-3" style="display: none;">
                    <!-- Additional product images can go here -->
                </div>
            </div>

            <!-- Product Info -->
            <div class="col-md-6">
                <div class="product-info">
                    <!-- Category Badge -->
                    <div class="product-category">
                        <i class="fas fa-tag"></i> @Model.Category
                        @if (Model.IsFeatured)
                        {
                            <span class="feature-badge">Featured</span>
                        }
                    </div>

                    <!-- Product Title -->
                    <h1 class="product-title">@Model.Name</h1>

                    <!-- Rating Display -->
                    <div class="rating-display">
                        <div class="average-rating">@ratingSummary.AverageRating.ToString("F1")</div>
                        <div class="stars">
                            @for (int i = 1; i <= 5; i++)
                            {
                                if (i <= Math.Floor(ratingSummary.AverageRating))
                                {
                                    <span class="star filled">★</span>
                                }
                                else if (i == Math.Ceiling(ratingSummary.AverageRating) && ratingSummary.AverageRating % 1 > 0)
                                {
                                    <span class="star half">★</span>
                                }
                                else
                                {
                                    <span class="star">★</span>
                                }
                            }
                        </div>
                        <div class="review-count">(@ratingSummary.TotalReviews reviews)</div>
                    </div>

                    <!-- Product Description -->
                    <div class="product-description mb-4">
                        <p>@(string.IsNullOrEmpty(Model.Description) ? "No description available." : Model.Description)</p>
                    </div>

                    <!-- Product Meta -->
                    <div class="product-meta">
                        <div class="meta-item">
                            <i class="fas fa-box"></i>
                            <span>@Model.Unit</span>
                        </div>
                        <div class="meta-item">
                            <i class="fas @(Model.IsAvailable ? "fa-check-circle text-success" : "fa-times-circle text-danger")"></i>
                            <span class="stock-status @(Model.IsAvailable ? "in-stock" : "out-of-stock")">
                                @(Model.IsAvailable ? "In Stock" : "Out of Stock")
                            </span>
                        </div>
                        <div class="meta-item">
                            <i class="fas fa-shopping-cart"></i>
                            <span>Min. order: @Model.MinimumOrder</span>
                        </div>
                    </div>

                    <!-- Price Section -->
                    <div class="price-section">
                        <div class="current-price">
                            R@(Model.PricePerUnit?.ToString("F2") ?? "0.00")
                            <span class="unit">/ @Model.Unit</span>
                        </div>

                        <!-- Available Quantity -->
                        <div class="quantity-available mb-3">
                            <strong>Available: </strong> @Model.Quantity @Model.Unit
                        </div>

                        <!-- Action Buttons -->
                        <div class="action-buttons">
                            @if (Model.IsAvailable && Model.Quantity > 0)
                            {
                                using (Html.BeginForm("AddToCart", "Products", FormMethod.Post, new { @class = "d-flex gap-2 w-100" }))
                                {
                                    @Html.Hidden("productId", Model.Id)
                                    <div class="input-group" style="max-width: 200px;">
                                        <span class="input-group-text">Qty</span>
                                        <input type="number" name="quantity" value="1" min="1" max="@Model.Quantity"
                                               class="form-control" required>
                                    </div>
                                    <button type="submit" class="btn btn-add-to-cart flex-grow-1">
                                        <i class="fas fa-cart-plus"></i> Add to Cart
                                    </button>
                                }
                            }
                            else
                            {
                                <button class="btn btn-secondary w-100" disabled>
                                    <i class="fas fa-times-circle"></i> Out of Stock
                                </button>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Reviews & Ratings Section -->
    <div class="reviews-section">
        <div class="reviews-header">
            <h2>Customer Reviews</h2>
            @if (canReview)
            {
                <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#reviewModal">
                    <i class="fas fa-edit"></i> Write a Review
                </button>
            }
        </div>

        <!-- Rating Summary -->
        <div class="rating-summary-card">
            <div class="row">
                <div class="col-md-4">
                    <div class="text-center">
                        <div class="average-rating mb-2">@ratingSummary.AverageRating.ToString("F1")</div>
                        <div class="stars mb-2 justify-content-center">
                            @for (int i = 1; i <= 5; i++)
                            {
                                if (i <= Math.Floor(ratingSummary.AverageRating))
                                {
                                    <span class="star filled">★</span>
                                }
                                else if (i == Math.Ceiling(ratingSummary.AverageRating) && ratingSummary.AverageRating % 1 > 0)
                                {
                                    <span class="star half">★</span>
                                }
                                else
                                {
                                    <span class="star">★</span>
                                }
                            }
                        </div>
                        <div class="review-count">@ratingSummary.TotalReviews reviews</div>
                    </div>
                </div>
                <div class="col-md-8">
                    <div class="rating-breakdown">
                        @for (int i = 5; i >= 1; i--)
                        {
                            var count = i == 5 ? ratingSummary.FiveStar :
                                       i == 4 ? ratingSummary.FourStar :
                                       i == 3 ? ratingSummary.ThreeStar :
                                       i == 2 ? ratingSummary.TwoStar :
                                       ratingSummary.OneStar;
                            var percentage = ratingSummary.TotalReviews > 0 ? (count * 100.0 / ratingSummary.TotalReviews) : 0;

                            <div class="rating-bar">
                                <div class="rating-label">
                                    @i <span class="star filled">★</span>
                                </div>
                                <div class="rating-progress">
                                    <div class="rating-progress-fill" style="width: @percentage%"></div>
                                </div>
                                <div class="rating-count">@count</div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Recent Reviews (Show 3 initially) -->
        <div id="reviewsContainer">
            @if (recentReviews.Any())
            {
                <div id="initialReviews">
                    @foreach (var review in recentReviews.Take(3))
                    {
                        <div class="review-card">
                            <div class="review-header">
                                <div class="reviewer-info">
                                    <div class="reviewer-avatar">
                                        @review.User.FullName.Substring(0, 1).ToUpper()
                                    </div>
                                    <div>
                                        <div class="reviewer-name">@review.User.FullName</div>
                                        <div class="review-date">@review.ReviewDate.ToString("MMM dd, yyyy")</div>
                                    </div>
                                </div>
                                <div class="review-rating">
                                    @for (int i = 1; i <= 5; i++)
                                    {
                                        <span class="star @(i <= review.Rating ? "filled" : "")">★</span>
                                    }
                                </div>
                            </div>
                            <div class="review-text">
                                @review.ReviewText
                            </div>
                            @if (review.IsVerifiedPurchase)
                            {
                                <div class="verified-badge">
                                    <i class="fas fa-check"></i> Verified Purchase
                                </div>
                            }
                        </div>
                    }
                </div>

                <!-- Collapsible Reviews -->
                <div id="allReviews" class="reviews-collapse">
                    @foreach (var review in recentReviews.Skip(3))
                    {
                        <div class="review-card">
                            <div class="review-header">
                                <div class="reviewer-info">
                                    <div class="reviewer-avatar">
                                        @review.User.FullName.Substring(0, 1).ToUpper()
                                    </div>
                                    <div>
                                        <div class="reviewer-name">@review.User.FullName</div>
                                        <div class="review-date">@review.ReviewDate.ToString("MMM dd, yyyy")</div>
                                    </div>
                                </div>
                                <div class="review-rating">
                                    @for (int i = 1; i <= 5; i++)
                                    {
                                        <span class="star @(i <= review.Rating ? "filled" : "")">★</span>
                                    }
                                </div>
                            </div>
                            <div class="review-text">
                                @review.ReviewText
                            </div>
                            @if (review.IsVerifiedPurchase)
                            {
                                <div class="verified-badge">
                                    <i class="fas fa-check"></i> Verified Purchase
                                </div>
                            }
                        </div>
                    }
                </div>

                <!-- Toggle Button -->
                if (recentReviews.Count > 3)
                {
                    <button id="toggleReviewsBtn" class="toggle-reviews-btn" onclick="toggleReviews()">
                        <i class="fas fa-chevron-down"></i> Show All Reviews (@recentReviews.Count total)
                    </button>
                }
            }
            else
            {
                <div class="text-center py-5">
                    <i class="fas fa-comments fa-3x text-muted mb-3"></i>
                    <h4>No Reviews Yet</h4>
                    <p class="text-muted">Be the first to review this product!</p>
                    @if (canReview)
                    {
                        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#reviewModal">
                            <i class="fas fa-edit"></i> Write First Review
                        </button>
                    }
                </div>
            }
        </div>
    </div>

    <!-- Review Form Modal -->
    @if (canReview)
    {
        <div class="modal fade" id="reviewModal" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Write a Review</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <form id="reviewForm">
                            @Html.Hidden("ProductId", Model.Id)

                            <!-- Rating -->
                            <div class="form-group">
                                <label class="control-label">Your Rating</label>
                                <div class="rating-input">
                                    @for (int i = 1; i <= 5; i++)
                                    {
                                        <span class="rating-star" data-rating="@i">★</span>
                                    }
                                </div>
                                <input type="hidden" id="selectedRating" name="Rating" required />
                            </div>

                            <!-- Review Text -->
                            <div class="form-group">
                                <label class="control-label">Your Review</label>
                                <textarea name="ReviewText" class="form-control" rows="5"
                                          placeholder="Share your experience with this product..."
                                          maxlength="500" required></textarea>
                                <small class="form-text text-muted">Maximum 500 characters</small>
                            </div>

                            <!-- Verified Purchase -->
                            <div class="form-check mb-3">
                                <input class="form-check-input" type="checkbox" name="IsVerifiedPurchase" id="verifiedPurchase">
                                <label class="form-check-label" for="verifiedPurchase">
                                    I purchased this product
                                </label>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-primary" onclick="submitReview()">Submit Review</button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@section Scripts {
    <script>
        // Toggle reviews visibility
        function toggleReviews() {
            const allReviews = document.getElementById('allReviews');
            const toggleBtn = document.getElementById('toggleReviewsBtn');

            if (allReviews.classList.contains('reviews-expanded')) {
                allReviews.classList.remove('reviews-expanded');
                toggleBtn.innerHTML = '<i class="fas fa-chevron-down"></i> Show All Reviews (@recentReviews.Count total)';
            } else {
                allReviews.classList.add('reviews-expanded');
                toggleBtn.innerHTML = '<i class="fas fa-chevron-up"></i> Show Less Reviews';
            }
        }

        // Star rating selection
        document.querySelectorAll('.rating-star').forEach(star => {
            star.addEventListener('click', function() {
                const rating = parseInt(this.getAttribute('data-rating'));
                document.getElementById('selectedRating').value = rating;

                // Update star display
                document.querySelectorAll('.rating-star').forEach(s => {
                    const starRating = parseInt(s.getAttribute('data-rating'));
                    if (starRating <= rating) {
                        s.classList.add('active');
                    } else {
                        s.classList.remove('active');
                    }
                });
            });
        });

        // Add to cart function
        function addToCart(productId) {
            $.post('@Url.Action("AddToCart", "Products")', { productId: productId, quantity: 1 })
                .done(function(response) {
                    if (response.success) {
                        showToast('Product added to cart!', 'success');
                        updateCartCount();
                    } else {
                        showToast('Error adding to cart: ' + response.message, 'error');
                    }
                })
                .fail(function() {
                    showToast('Error adding to cart', 'error');
                });
        }

        // Submit review
        function submitReview() {
            const formData = $('#reviewForm').serialize();

            if (!$('#selectedRating').val()) {
                showToast('Please select a rating', 'error');
                return;
            }

            $.post('@Url.Action("SubmitReview", "Products")', formData)
                .done(function(response) {
                    if (response.success) {
                        $('#reviewModal').modal('hide');
                        showToast('Review submitted successfully!', 'success');
                        location.reload(); // Reload to show the new review
                    } else {
                        showToast('Error submitting review: ' + response.message, 'error');
                    }
                })
                .fail(function() {
                    showToast('Error submitting review', 'error');
                });
        }

        // Toast notification
        function showToast(message, type) {
            // You can implement a toast notification system here
            alert(message);
        }

        // Update cart count
        function updateCartCount() {
            // Implement cart count update logic
        }

        // Initialize when page loads
        $(document).ready(function() {
            // Any additional initialization
        });
    </script>
}