@model FarmTrack.Models.Product
@{
    ViewBag.Title = Model.Name;
    var ratingSummary = ViewBag.RatingSummary as FarmTrack.Models.ProductRatingViewModel ?? new FarmTrack.Models.ProductRatingViewModel();
    var recentReviews = ViewBag.RecentReviews as List<FarmTrack.Models.ProductReview> ?? new List<FarmTrack.Models.ProductReview>();
    var canReview = ViewBag.CanReview as bool? ?? false;
    var isAdmin = Session["Role"]?.ToString() == "Admin" || Session["Role"]?.ToString() == "Owner";
}

<style>
    /* ... (keep all your existing CSS styles) ... */
    :root {
        --color-earth: #8B7355;
        --color-soil: #654321;
        --color-foliage: #4CAF50;
        --color-wheat: #F5DEB3;
        --color-hay: #DAA520;
        --color-danger: #FF6B6B;
        --color-white: #FFFFFF;
        --border-radius: 12px;
        --card-shadow: 0 6px 18px rgba(0,0,0,0.1);
    }

    body {
        background-color: #F9F7F4;
    }

    /* Product Hero Section */
    .product-hero {
        background: white;
        border-radius: var(--border-radius);
        padding: 40px;
        margin-bottom: 30px;
        box-shadow: var(--card-shadow);
    }

    .product-image {
        width: 100%;
        max-width: 450px;
        height: 400px;
        object-fit: cover;
        border-radius: var(--border-radius);
        box-shadow: 0 8px 20px rgba(0,0,0,0.12);
    }

    .product-title {
        color: var(--color-soil);
        font-weight: 700;
        font-size: 2.2rem;
        margin-bottom: 15px;
    }

    .product-category {
        color: #6c757d;
        font-size: 1rem;
        margin-bottom: 20px;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .price-section {
        background: linear-gradient(135deg, rgba(139, 115, 85, 0.05), rgba(139, 115, 85, 0.02));
        padding: 25px;
        border-radius: 10px;
        border-left: 4px solid var(--color-earth);
        margin-bottom: 25px;
    }

    .current-price {
        font-size: 2.5rem;
        font-weight: 700;
        color: var(--color-earth);
        line-height: 1;
    }

    .unit {
        color: #6c757d;
        font-size: 1.1rem;
        margin-left: 8px;
    }

    .rating-display {
        display: flex;
        align-items: center;
        gap: 15px;
        margin: 20px 0;
        padding: 15px;
        background: rgba(245, 222, 179, 0.1);
        border-radius: 8px;
    }

    .average-rating {
        font-size: 2.5rem;
        font-weight: 700;
        color: var(--color-soil);
    }

    .stars {
        display: flex;
        gap: 3px;
    }

    .star {
        color: #ddd;
        font-size: 1.4rem;
    }

        .star.filled {
            color: #FFC107;
        }

        .star.half {
            position: relative;
            color: #ddd;
        }

            .star.half::before {
                content: '★';
                position: absolute;
                left: 0;
                width: 50%;
                overflow: hidden;
                color: #FFC107;
            }

    .review-count {
        color: #6c757d;
        font-weight: 500;
    }

    .action-buttons {
        display: flex;
        gap: 12px;
        margin-top: 25px;
    }

    .btn-add-to-cart {
        background: linear-gradient(135deg, var(--color-foliage), #45a049);
        color: white;
        border: none;
        padding: 14px 30px;
        border-radius: 8px;
        font-weight: 600;
        font-size: 1rem;
        transition: all 0.3s;
        box-shadow: 0 4px 15px rgba(76, 175, 80, 0.3);
        display: inline-flex;
        align-items: center;
        gap: 8px;
    }

        .btn-add-to-cart:hover {
            background: linear-gradient(135deg, #45a049, var(--color-foliage));
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(76, 175, 80, 0.4);
        }

    /* Reviews Section */
    .reviews-section {
        margin-top: 50px;
    }

    .reviews-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 30px;
        padding-bottom: 20px;
        border-bottom: 3px solid var(--color-wheat);
    }

        .reviews-header h2 {
            color: var(--color-soil);
            font-weight: 700;
            display: flex;
            align-items: center;
            gap: 12px;
        }

    .rating-summary-card {
        background: white;
        padding: 35px;
        border-radius: var(--border-radius);
        box-shadow: var(--card-shadow);
        margin-bottom: 30px;
    }

    .rating-breakdown {
        display: flex;
        flex-direction: column;
        gap: 12px;
    }

    .rating-bar {
        display: flex;
        align-items: center;
        gap: 12px;
    }

    .rating-label {
        width: 90px;
        font-size: 0.95rem;
        color: var(--color-soil);
        font-weight: 600;
        display: flex;
        align-items: center;
        gap: 4px;
    }

    .rating-progress {
        flex: 1;
        height: 10px;
        background: #e9ecef;
        border-radius: 5px;
        overflow: hidden;
    }

    .rating-progress-fill {
        height: 100%;
        background: linear-gradient(90deg, #FFC107, #FFD700);
        border-radius: 5px;
        transition: width 0.5s ease;
    }

    .rating-count {
        width: 50px;
        text-align: right;
        font-size: 0.95rem;
        color: #6c757d;
        font-weight: 600;
    }

    .review-card {
        background: white;
        border: 2px solid #f0f0f0;
        border-radius: var(--border-radius);
        padding: 25px;
        margin-bottom: 20px;
        transition: all 0.3s ease;
    }

        .review-card:hover {
            box-shadow: var(--card-shadow);
            transform: translateY(-3px);
            border-color: var(--color-wheat);
        }

    .review-header {
        display: flex;
        justify-content: space-between;
        align-items: start;
        margin-bottom: 15px;
    }

    .reviewer-info {
        display: flex;
        align-items: center;
        gap: 12px;
    }

    .reviewer-avatar {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        background: linear-gradient(135deg, var(--color-earth), var(--color-soil));
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 700;
        font-size: 1.2rem;
        color: white;
    }

    .reviewer-name {
        font-weight: 600;
        color: var(--color-soil);
        font-size: 1.05rem;
    }

    .review-date {
        color: #6c757d;
        font-size: 0.9rem;
    }

    .review-rating {
        display: flex;
        gap: 3px;
    }

    .review-text {
        color: #555;
        line-height: 1.7;
        margin-bottom: 15px;
        font-size: 0.98rem;
    }

    .verified-badge {
        background: var(--color-foliage);
        color: white;
        padding: 4px 12px;
        border-radius: 20px;
        font-size: 0.85rem;
        font-weight: 600;
        display: inline-flex;
        align-items: center;
        gap: 5px;
    }

    .reviews-collapse {
        max-height: 0;
        overflow: hidden;
        transition: max-height 0.5s ease;
    }

    .reviews-expanded {
        max-height: 3000px;
    }

    .toggle-reviews-btn {
        background: white;
        border: 2px solid var(--color-earth);
        color: var(--color-earth);
        padding: 12px 30px;
        border-radius: 8px;
        font-weight: 600;
        transition: all 0.3s;
        margin: 25px auto;
        display: block;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }

        .toggle-reviews-btn:hover {
            background: var(--color-earth);
            color: white;
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        }

    /* Review Form Modal */
    .modal-content {
        border-radius: var(--border-radius);
        border: none;
        box-shadow: 0 10px 30px rgba(0,0,0,0.2);
    }

    .modal-header {
        background: linear-gradient(135deg, var(--color-earth), var(--color-soil));
        color: white;
        border-radius: var(--border-radius) var(--border-radius) 0 0;
        padding: 20px 25px;
    }

    .modal-title {
        font-weight: 700;
    }

    .btn-close {
        filter: brightness(0) invert(1);
    }

    .rating-input {
        display: flex;
        gap: 8px;
        margin-bottom: 20px;
    }

    .rating-star {
        font-size: 2.5rem;
        color: #ddd;
        cursor: pointer;
        transition: all 0.2s;
    }

        .rating-star:hover,
        .rating-star.active {
            color: #FFC107;
            transform: scale(1.1);
        }

    .feature-badge {
        background: linear-gradient(135deg, var(--color-hay), #f0ad4e);
        color: white;
        padding: 5px 15px;
        border-radius: 20px;
        font-size: 0.85rem;
        font-weight: 600;
        margin-left: 10px;
    }

    .stock-status {
        display: inline-flex;
        align-items: center;
        gap: 5px;
        padding: 6px 15px;
        border-radius: 20px;
        font-size: 0.9rem;
        font-weight: 600;
    }

    .in-stock {
        background: #d4edda;
        color: #155724;
    }

    .out-of-stock {
        background: #f8d7da;
        color: #721c24;
    }

    .product-meta {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
        margin: 20px 0;
    }

    .meta-item {
        display: flex;
        align-items: center;
        gap: 8px;
        color: var(--color-soil);
        font-size: 0.95rem;
        font-weight: 500;
        padding: 8px 15px;
        background: rgba(139, 115, 85, 0.05);
        border-radius: 8px;
    }

        .meta-item i {
            color: var(--color-earth);
        }

    .quantity-available {
        color: var(--color-soil);
        font-size: 1.05rem;
        margin-bottom: 15px;
    }

        .quantity-available strong {
            color: var(--color-earth);
        }

    .input-group {
        max-width: 150px;
    }

    .input-group-text {
        background: var(--color-wheat);
        color: var(--color-soil);
        border: 2px solid #e0e0e0;
        font-weight: 600;
    }

    .form-control {
        border: 2px solid #e0e0e0;
        transition: all 0.3s;
    }

        .form-control:focus {
            border-color: var(--color-earth);
            box-shadow: 0 0 0 3px rgba(139, 115, 85, 0.1);
        }

    .btn-primary {
        background: linear-gradient(135deg, var(--color-foliage), #45a049);
        border: none;
        padding: 10px 25px;
        font-weight: 600;
        box-shadow: 0 4px 12px rgba(76, 175, 80, 0.3);
    }

        .btn-primary:hover {
            background: linear-gradient(135deg, #45a049, var(--color-foliage));
            transform: translateY(-2px);
            box-shadow: 0 6px 16px rgba(76, 175, 80, 0.4);
        }

    .btn-secondary {
        background: linear-gradient(135deg, #9e9e9e, #757575);
        border: none;
        padding: 10px 25px;
        font-weight: 600;
    }

        .btn-secondary:hover {
            background: linear-gradient(135deg, #757575, #616161);
        }

        .btn-secondary:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

    .empty-reviews {
        text-align: center;
        padding: 60px 20px;
        background: white;
        border-radius: var(--border-radius);
        box-shadow: var(--card-shadow);
    }

        .empty-reviews i {
            color: var(--color-wheat);
            margin-bottom: 20px;
        }

        .empty-reviews h4 {
            color: var(--color-soil);
            margin-bottom: 10px;
        }

        .empty-reviews p {
            color: #6c757d;
            margin-bottom: 25px;
        }

    @@media (max-width: 768px) {
        .product-hero {
            padding: 25px;
        }

        .product-title {
            font-size: 1.8rem;
        }

        .current-price {
            font-size: 2rem;
        }

        .action-buttons {
            flex-direction: column;
        }

        .input-group {
            max-width: 100%;
        }

        .rating-summary-card {
            padding: 20px;
        }

        .reviews-header {
            flex-direction: column;
            align-items: flex-start;
            gap: 15px;
        }
    }

    .admin-actions {
        display: flex;
        gap: 10px;
        margin-top: 25px;
    }

    .btn-edit {
        background: linear-gradient(135deg, #007bff, #0056b3);
        color: white;
        border: none;
        padding: 12px 25px;
        border-radius: 8px;
        font-weight: 600;
        font-size: 1rem;
        transition: all 0.3s;
        box-shadow: 0 4px 15px rgba(0, 123, 255, 0.3);
        display: inline-flex;
        align-items: center;
        gap: 8px;
        text-decoration: none;
    }

        .btn-edit:hover {
            background: linear-gradient(135deg, #0056b3, #007bff);
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(0, 123, 255, 0.4);
            color: white;
            text-decoration: none;
        }

    .btn-delete {
        background: linear-gradient(135deg, #dc3545, #c82333);
        color: white;
        border: none;
        padding: 12px 25px;
        border-radius: 8px;
        font-weight: 600;
        font-size: 1rem;
        transition: all 0.3s;
        box-shadow: 0 4px 15px rgba(220, 53, 69, 0.3);
        display: inline-flex;
        align-items: center;
        gap: 8px;
        text-decoration: none;
    }

        .btn-delete:hover {
            background: linear-gradient(135deg, #c82333, #dc3545);
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(220, 53, 69, 0.4);
            color: white;
            text-decoration: none;
        }

    .admin-badge {
        background: linear-gradient(135deg, #6c757d, #495057);
        color: white;
        padding: 4px 12px;
        border-radius: 20px;
        font-size: 0.85rem;
        font-weight: 600;
        margin-left: 10px;
    }

    .admin-section {
        background: rgba(0, 123, 255, 0.05);
        border: 2px dashed #007bff;
        border-radius: 10px;
        padding: 20px;
        margin: 20px 0;
    }

        .admin-section h5 {
            color: #007bff;
            margin-bottom: 15px;
            display: flex;
            align-items: center;
            gap: 8px;
        }
</style>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">

<div class="container-fluid mt-4">
    <!-- Product Hero Section -->
    <div class="product-hero">
        <div class="row">
            <!-- Product Image -->
            <div class="col-md-6">
                <img src="@(string.IsNullOrEmpty(Model.ImageUrl) ? "/Content/images/placeholder-product.jpg" : Model.ImageUrl)"
                     alt="@Model.Name" class="product-image" id="mainProductImage">
            </div>

            <!-- Product Info -->
            <div class="col-md-6">
                <div class="product-info">
                    <!-- Category Badge -->
                    <div class="product-category">
                        <i class="fas fa-tag"></i> @Model.Category
                        @if (Model.IsFeatured)
                        {
                            <span class="feature-badge"><i class="fas fa-star"></i> Featured</span>
                        }
                        @if (isAdmin)
                        {
                            <span class="admin-badge"><i class="fas fa-user-shield"></i> Admin View</span>
                        }
                    </div>

                    <!-- Product Title -->
                    <h1 class="product-title">@Model.Name</h1>

                    <!-- Rating Display -->
                    <div class="rating-display">
                        <div class="average-rating">@ratingSummary.AverageRating.ToString("F1")</div>
                        <div>
                            <div class="stars">
                                @for (int i = 1; i <= 5; i++)
                                {
                                    if (i <= Math.Floor(ratingSummary.AverageRating))
                                    {
                                        <span class="star filled">★</span>
                                    }
                                    else if (i == Math.Ceiling(ratingSummary.AverageRating) && ratingSummary.AverageRating % 1 > 0)
                                    {
                                        <span class="star half">★</span>
                                    }
                                    else
                                    {
                                        <span class="star">★</span>
                                    }
                                }
                            </div>
                            <div class="review-count">(@ratingSummary.TotalReviews reviews)</div>
                        </div>
                    </div>

                    <!-- Product Description -->
                    <div class="product-description mb-4">
                        <p>@(string.IsNullOrEmpty(Model.Description) ? "No description available." : Model.Description)</p>
                    </div>

                    <!-- Product Meta -->
                    <div class="product-meta">
                        <div class="meta-item">
                            <i class="fas fa-box"></i>
                            <span>@Model.Unit</span>
                        </div>
                        <div class="meta-item">
                            <i class="fas @(Model.IsAvailable ? "fa-check-circle" : "fa-times-circle")"></i>
                            <span class="stock-status @(Model.IsAvailable ? "in-stock" : "out-of-stock")">
                                @(Model.IsAvailable ? "In Stock" : "Out of Stock")
                            </span>
                        </div>
                        <div class="meta-item">
                            <i class="fas fa-shopping-cart"></i>
                            <span>Min. order: @Model.MinimumOrder</span>
                        </div>
                    </div>

                    <!-- Price Section -->
                    <div class="price-section">
                        <div class="current-price">
                            R@(Model.PricePerUnit?.ToString("F2") ?? "0.00")
                            <span class="unit">/ @Model.Unit</span>
                        </div>

                        <!-- Available Quantity -->
                        <div class="quantity-available">
                            <strong><i class="fas fa-warehouse"></i> Available:</strong> @Model.Quantity @Model.Unit
                        </div>

                        <!-- Action Buttons -->
                        @if (isAdmin)
                        {
                            <!-- Admin Actions -->
                            <div class="admin-actions">
                                <a href="@Url.Action("Edit", "Products", new { id = Model.Id })" class="btn-edit">
                                    <i class="fas fa-edit"></i> Edit Product
                                </a>
                                <a href="@Url.Action("Delete", "Products", new { id = Model.Id })" class="btn-delete"
                                   onclick="return confirm('Are you sure you want to delete this product? This action cannot be undone.');">
                                    <i class="fas fa-trash"></i> Delete Product
                                </a>
                            </div>

                            <!-- Admin Information Section -->
                            <div class="admin-section">
                                <h5><i class="fas fa-info-circle"></i> Admin Information</h5>
                                <div class="row">
                                    <div class="col-6">
                                        <small><strong>Product ID:</strong> @Model.Id</small>
                                    </div>
                                    <div class="col-6">
                                        <small><strong>Created:</strong> @Model.CreatedAt.ToString("MMM dd, yyyy")</small>
                                    </div>
                                    <div class="col-6">
                                        <small><strong>Last Updated:</strong> @(Model.LastUpdated?.ToString("MMM dd, yyyy") ?? "Never")</small>
                                    </div>
                                    <div class="col-6">
                                        <small><strong>Status:</strong> @(Model.IsAvailable ? "Active" : "Inactive")</small>
                                    </div>
                                    @if (Model.HarvestOutcomeId.HasValue)
                                    {
                                        <div class="col-12">
                                            <small><strong>Source:</strong> Harvest Outcome #@Model.HarvestOutcomeId</small>
                                        </div>
                                    }
                                    @if (Model.LivestockId.HasValue)
                                    {
                                        <div class="col-12">
                                            <small><strong>Source:</strong> Livestock #@Model.LivestockId</small>
                                        </div>
                                    }
                                    @if (Model.InventoryId.HasValue)
                                    {
                                        <div class="col-12">
                                            <small><strong>Source:</strong> Inventory #@Model.InventoryId</small>
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                        else
                        {
                            <!-- Customer Add to Cart Section -->
                            <div class="action-buttons">
                                @if (Model.IsAvailable && Model.Quantity > 0)
                                {
                                    using (Html.BeginForm("AddToCart", "Products", FormMethod.Post, new { @class = "d-flex gap-2 flex-wrap w-100" }))
                                    {
                                        @Html.Hidden("productId", Model.Id)
                                        <div class="input-group">
                                            <span class="input-group-text">Qty</span>
                                            <input type="number" name="quantity" value="1" min="1" max="@Model.Quantity"
                                                   class="form-control" required>
                                        </div>
                                        <button type="submit" class="btn btn-add-to-cart flex-grow-1">
                                            <i class="fas fa-cart-plus"></i> Add to Cart
                                        </button>
                                    }
                                }
                                else
                                {
                                    <button class="btn btn-secondary w-100" disabled>
                                        <i class="fas fa-times-circle"></i> Out of Stock
                                    </button>
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Reviews & Ratings Section -->
    <div class="reviews-section">
        <div class="reviews-header">
            <h2><i class="fas fa-comments"></i> Customer Reviews</h2>
            @if (canReview && !isAdmin)
            {
                <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#reviewModal">
                    <i class="fas fa-edit"></i> Write a Review
                </button>
            }
        </div>

        <!-- Rating Summary -->
        <div class="rating-summary-card">
            <div class="row">
                <div class="col-md-4">
                    <div class="text-center">
                        <div class="average-rating mb-2">@ratingSummary.AverageRating.ToString("F1")</div>
                        <div class="stars mb-2 justify-content-center">
                            @for (int i = 1; i <= 5; i++)
                            {
                                if (i <= Math.Floor(ratingSummary.AverageRating))
                                {
                                    <span class="star filled">★</span>
                                }
                                else if (i == Math.Ceiling(ratingSummary.AverageRating) && ratingSummary.AverageRating % 1 > 0)
                                {
                                    <span class="star half">★</span>
                                }
                                else
                                {
                                    <span class="star">★</span>
                                }
                            }
                        </div>
                        <div class="review-count">@ratingSummary.TotalReviews reviews</div>
                    </div>
                </div>
                <div class="col-md-8">
                    <div class="rating-breakdown">
                        @for (int i = 5; i >= 1; i--)
                        {
                            var count = i == 5 ? ratingSummary.FiveStar :
                                       i == 4 ? ratingSummary.FourStar :
                                       i == 3 ? ratingSummary.ThreeStar :
                                       i == 2 ? ratingSummary.TwoStar :
                                       ratingSummary.OneStar;
                            var percentage = ratingSummary.TotalReviews > 0 ? (count * 100.0 / ratingSummary.TotalReviews) : 0;

                            <div class="rating-bar">
                                <div class="rating-label">
                                    @i <span class="star filled">★</span>
                                </div>
                                <div class="rating-progress">
                                    <div class="rating-progress-fill" style="width: @percentage%"></div>
                                </div>
                                <div class="rating-count">@count</div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Recent Reviews -->
        <div id="reviewsContainer">
            @if (recentReviews.Any())
            {
                <div id="initialReviews">
                    @foreach (var review in recentReviews.Take(3))
                    {
                        <div class="review-card">
                            <div class="review-header">
                                <div class="reviewer-info">
                                    <div class="reviewer-avatar">
                                        @review.User.FullName.Substring(0, 1).ToUpper()
                                    </div>
                                    <div>
                                        <div class="reviewer-name">@review.User.FullName</div>
                                        <div class="review-date">@review.ReviewDate.ToString("MMM dd, yyyy")</div>
                                    </div>
                                </div>
                                <div class="review-rating">
                                    @for (int i = 1; i <= 5; i++)
                                    {
                                        <span class="star @(i <= review.Rating ? "filled" : "")">★</span>
                                    }
                                </div>
                            </div>
                            <div class="review-text">
                                @review.ReviewText
                            </div>
                            @if (review.IsVerifiedPurchase)
                            {
                                <div class="verified-badge">
                                    <i class="fas fa-check-circle"></i> Verified Purchase
                                </div>
                            }
                        </div>
                    }
                </div>

                <!-- Collapsible Reviews -->
                <div id="allReviews" class="reviews-collapse">
                    @foreach (var review in recentReviews.Skip(3))
                    {
                        <div class="review-card">
                            <div class="review-header">
                                <div class="reviewer-info">
                                    <div class="reviewer-avatar">
                                        @review.User.FullName.Substring(0, 1).ToUpper()
                                    </div>
                                    <div>
                                        <div class="reviewer-name">@review.User.FullName</div>
                                        <div class="review-date">@review.ReviewDate.ToString("MMM dd, yyyy")</div>
                                    </div>
                                </div>
                                <div class="review-rating">
                                    @for (int i = 1; i <= 5; i++)
                                    {
                                        <span class="star @(i <= review.Rating ? "filled" : "")">★</span>
                                    }
                                </div>
                            </div>
                            <div class="review-text">
                                @review.ReviewText
                            </div>
                            @if (review.IsVerifiedPurchase)
                            {
                                <div class="verified-badge">
                                    <i class="fas fa-check-circle"></i> Verified Purchase
                                </div>
                            }
                        </div>
                    }
                </div>

                <!-- Toggle Button -->
                if (recentReviews.Count > 3)
                {
                    <button id="toggleReviewsBtn" class="toggle-reviews-btn" onclick="toggleReviews()">
                        <i class="fas fa-chevron-down"></i> Show All Reviews (@recentReviews.Count total)
                    </button>
                }
            }
            else
            {
                <div class="empty-reviews">
                    <i class="fas fa-comments fa-3x"></i>
                    <h4>No Reviews Yet</h4>
                    <p>Be the first to review this product!</p>
                    @if (canReview && !isAdmin)
                    {
                        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#reviewModal">
                            <i class="fas fa-edit"></i> Write First Review
                        </button>
                    }
                </div>
            }
        </div>
    </div>

    <!-- Review Form Modal -->
    @if (canReview && !isAdmin)
    {
        <div class="modal fade" id="reviewModal" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Write a Review</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <form id="reviewForm">
                            @Html.Hidden("ProductId", Model.Id)

                            <!-- Rating -->
                            <div class="form-group mb-3">
                                <label class="control-label fw-bold">Your Rating</label>
                                <div class="rating-input">
                                    @for (int i = 1; i <= 5; i++)
                                    {
                                        <span class="rating-star" data-rating="@i">★</span>
                                    }
                                </div>
                                <input type="hidden" id="selectedRating" name="Rating" required />
                            </div>

                            <!-- Review Text -->
                            <div class="form-group mb-3">
                                <label class="control-label fw-bold">Your Review</label>
                                <textarea name="ReviewText" class="form-control" rows="5"
                                          placeholder="Share your experience with this product..."
                                          maxlength="500" required></textarea>
                                <small class="form-text text-muted">Maximum 500 characters</small>
                            </div>

                            <!-- Verified Purchase -->
                            <div class="form-check mb-3">
                                <input class="form-check-input" type="checkbox" name="IsVerifiedPurchase" id="verifiedPurchase">
                                <label class="form-check-label" for="verifiedPurchase">
                                    I purchased this product
                                </label>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-primary" onclick="submitReview()">Submit Review</button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@section Scripts {
    <script>
        // Toggle reviews visibility
        function toggleReviews() {
            const allReviews = document.getElementById('allReviews');
            const toggleBtn = document.getElementById('toggleReviewsBtn');

            if (allReviews.classList.contains('reviews-expanded')) {
                allReviews.classList.remove('reviews-expanded');
                toggleBtn.innerHTML = '<i class="fas fa-chevron-down"></i> Show All Reviews (@recentReviews.Count total)';
            } else {
                allReviews.classList.add('reviews-expanded');
                toggleBtn.innerHTML = '<i class="fas fa-chevron-up"></i> Show Less Reviews';
            }
        }

        // Star rating selection
        document.querySelectorAll('.rating-star').forEach(star => {
            star.addEventListener('click', function() {
                const rating = parseInt(this.getAttribute('data-rating'));
                document.getElementById('selectedRating').value = rating;

                // Update star display
                document.querySelectorAll('.rating-star').forEach(s => {
                    const starRating = parseInt(s.getAttribute('data-rating'));
                    if (starRating <= rating) {
                        s.classList.add('active');
                    } else {
                        s.classList.remove('active');
                    }
                });
            });
        });

        // Submit review - FIXED VERSION
        function submitReview() {
            // Validate rating
            const rating = $('#selectedRating').val();
            if (!rating) {
                alert('Please select a rating (click on the stars)');
                return;
            }

            // Validate review text
            const reviewText = $('textarea[name="ReviewText"]').val();
            if (!reviewText || reviewText.trim() === '') {
                alert('Please write a review');
                return;
            }

            // Get form data
            const formData = {
                ProductId: $('#reviewForm input[name="ProductId"]').val(),
                Rating: rating,
                ReviewText: reviewText,
                IsVerifiedPurchase: $('#verifiedPurchase').is(':checked')
            };

            console.log('Submitting review:', formData);

            // Submit via AJAX
            $.ajax({
                url: '@Url.Action("SubmitReview", "Products")',
                type: 'POST',
                data: formData,
                success: function(response) {
                    console.log('Response:', response);
                    if (response.success) {
                        alert('✅ Review submitted successfully!');
                        $('#reviewModal').modal('hide');
                        location.reload(); // Reload to show the new review
                    } else {
                        alert('❌ Error: ' + response.message);
                    }
                },
                error: function(xhr, status, error) {
                    console.error('AJAX error:', status, error);
                    console.error('Response:', xhr.responseText);
                    alert('❌ Error submitting review. Please try again.');
                }
            });
        }

        // Initialize when page loads
        $(document).ready(function() {
            // Any additional initialization
        });
    </script>
}