@model FarmTrack.Models.Sale

@{
    ViewBag.Title = "Order Management #" + Model.SaleId;
}

<style>
    :root {
        --color-earth: #8B7355;
        --color-soil: #654321;
        --color-foliage: #4CAF50;
        --color-wheat: #F5DEB3;
        --color-hay: #DAA520;
        --color-danger: #FF6B6B;
        --color-white: #FFFFFF;
        --border-radius: 12px;
        --card-shadow: 0 6px 18px rgba(0,0,0,0.1);
    }

    body {
        background-color: #F9F7F4;
    }

    /* Dashboard Header */
    .dashboard-header {
        background: linear-gradient(135deg, var(--color-earth) 0%, var(--color-soil) 100%);
        border-radius: var(--border-radius);
        padding: 30px;
        margin-bottom: 30px;
        color: white;
        box-shadow: var(--card-shadow);
        position: relative;
        overflow: hidden;
    }

    .dashboard-header h1 {
        font-size: 2rem;
        font-weight: 700;
        margin-bottom: 10px;
        display: flex;
        align-items: center;
        gap: 12px;
    }

    .breadcrumb {
        background: rgba(255, 255, 255, 0.1);
        padding: 10px 15px;
        border-radius: 8px;
        margin: 0;
    }

    .breadcrumb-item a {
        color: var(--color-wheat);
    }

    .breadcrumb-item.active {
        color: white;
    }

    /* Card Styles */
    .info-card {
        background: white;
        border-radius: var(--border-radius);
        box-shadow: var(--card-shadow);
        overflow: hidden;
        margin-bottom: 25px;
    }

    .card-header-custom {
        padding: 20px 25px;
        font-weight: 600;
        color: white;
    }

    .header-primary {
        background: linear-gradient(135deg, #3498db, #2980b9);
    }

    .header-info {
        background: linear-gradient(135deg, #17a2b8, #138496);
    }

    .header-success {
        background: linear-gradient(135deg, var(--color-foliage), #45a049);
    }

    .header-default {
        background: linear-gradient(135deg, var(--color-earth), var(--color-soil));
    }

    .card-header-custom h5 {
        margin: 0;
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .card-body-custom {
        padding: 25px;
    }

    /* Form Styles */
    .form-label {
        font-weight: 600;
        color: var(--color-soil);
        font-size: 0.9rem;
        margin-bottom: 8px;
        display: block;
    }

    .form-control, .form-select {
        border: 2px solid #e0e0e0;
        border-radius: 8px;
        padding: 10px 15px;
        transition: all 0.3s;
    }

    .form-control:focus, .form-select:focus {
        border-color: var(--color-earth);
        box-shadow: 0 0 0 3px rgba(139, 115, 85, 0.1);
    }

    /* Table */
    .modern-table {
        width: 100%;
        border-collapse: collapse;
    }

    .modern-table thead {
        background: linear-gradient(135deg, var(--color-earth), var(--color-soil));
        color: white;
    }

    .modern-table thead th {
        padding: 15px 12px;
        font-weight: 600;
        text-transform: uppercase;
        font-size: 0.85rem;
    }

    .modern-table tbody tr {
        border-bottom: 1px solid #f0f0f0;
    }

    .modern-table td {
        padding: 15px 12px;
        font-size: 0.95rem;
    }

    .modern-table tfoot {
        background: rgba(139, 115, 85, 0.05);
        font-weight: 600;
    }

    /* Timeline */
    .timeline {
        position: relative;
        padding-left: 40px;
    }

    .timeline-item {
        position: relative;
        margin-bottom: 25px;
    }

    .timeline-marker {
        position: absolute;
        left: -40px;
        top: 5px;
        width: 14px;
        height: 14px;
        border-radius: 50%;
        background-color: var(--color-foliage);
        border: 3px solid white;
        box-shadow: 0 0 0 3px var(--color-foliage);
    }

    .timeline-content {
        padding: 15px;
        background: rgba(139, 115, 85, 0.03);
        border-radius: 8px;
        border-left: 3px solid var(--color-foliage);
    }

    .timeline-content h6 {
        color: var(--color-soil);
        font-weight: 600;
        margin-bottom: 5px;
    }

    /* Badges */
    .badge {
        padding: 6px 12px;
        border-radius: 12px;
        font-size: 0.85rem;
        font-weight: 600;
        text-transform: uppercase;
    }

    .bg-success { background-color: var(--color-foliage) !important; }
    .bg-warning { background-color: var(--color-hay) !important; color: white !important; }
    .bg-info { background-color: #17a2b8 !important; }
    .bg-primary { background-color: #3498db !important; }
    .bg-secondary { background-color: #6c757d !important; }
    .bg-danger { background-color: var(--color-danger) !important; }

    /* Buttons */
    .btn {
        padding: 10px 20px;
        border-radius: 8px;
        font-weight: 600;
        font-size: 0.9rem;
        display: inline-flex;
        align-items: center;
        gap: 8px;
        border: none;
        transition: all 0.3s ease;
        text-decoration: none;
    }

    .btn-success {
        background: linear-gradient(135deg, var(--color-foliage), #45a049);
        color: white;
        box-shadow: 0 4px 12px rgba(76, 175, 80, 0.3);
    }

    .btn-primary {
        background: linear-gradient(135deg, #3498db, #2980b9);
        color: white;
        box-shadow: 0 4px 12px rgba(52, 152, 219, 0.3);
    }

    .btn-info {
        background: linear-gradient(135deg, #17a2b8, #138496);
        color: white;
        box-shadow: 0 4px 12px rgba(23, 162, 184, 0.3);
    }

    .btn-warning {
        background: linear-gradient(135deg, var(--color-hay), #f0ad4e);
        color: white;
        box-shadow: 0 4px 12px rgba(218, 165, 32, 0.3);
    }

    .btn-danger {
        background: linear-gradient(135deg, var(--color-danger), #e74c3c);
        color: white;
        box-shadow: 0 4px 12px rgba(255, 107, 107, 0.3);
    }

    .btn-secondary {
        background: linear-gradient(135deg, #9e9e9e, #757575);
        color: white;
        box-shadow: 0 4px 12px rgba(158, 158, 158, 0.3);
    }

    .btn-outline-primary {
        background: white;
        border: 2px solid #3498db;
        color: #3498db;
    }

    .btn-outline-info {
        background: white;
        border: 2px solid #17a2b8;
        color: #17a2b8;
    }

    .btn-outline-success {
        background: white;
        border: 2px solid var(--color-foliage);
        color: var(--color-foliage);
    }

    .btn-outline-warning {
        background: white;
        border: 2px solid var(--color-hay);
        color: var(--color-hay);
    }

    .btn-outline-dark {
        background: white;
        border: 2px solid var(--color-soil);
        color: var(--color-soil);
    }

    .btn:hover {
        transform: translateY(-2px);
    }

    .btn-sm {
        padding: 6px 12px;
        font-size: 0.85rem;
    }

    .d-grid .btn {
        justify-content: center;
    }

    /* Info Display */
    .info-row {
        display: flex;
        justify-content: space-between;
        padding: 12px 0;
        border-bottom: 1px solid #f0f0f0;
    }

    .info-row:last-child {
        border-bottom: none;
    }

    .info-row strong {
        color: var(--color-soil);
    }

    /* Driver Display */
    .driver-info {
        background: rgba(76, 175, 80, 0.05);
        padding: 15px;
        border-radius: 8px;
        border-left: 4px solid var(--color-foliage);
    }

    .driver-info .badge {
        margin-top: 5px;
    }

    /* Status Display */
    .status-display {
        background: rgba(139, 115, 85, 0.05);
        padding: 15px;
        border-radius: 8px;
        text-align: center;
        margin-bottom: 20px;
    }

    .status-display .badge {
        font-size: 1.1rem;
        padding: 8px 16px;
    }

    @@media (max-width: 768px) {
        .dashboard-header {
            padding: 20px;
        }

        .dashboard-header h1 {
            font-size: 1.5rem;
        }

        .card-body-custom {
            padding: 15px;
        }

        .btn {
            width: 100%;
            justify-content: center;
        }
    }
</style>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">

<div class="container-fluid mt-4">
    <!-- Header -->
    <div class="dashboard-header">
        <h1><i class="fas fa-cog"></i> Order Management #@Model.SaleId</h1>
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="@Url.Action("SalesList")">Sales List</a></li>
                <li class="breadcrumb-item active">Order Management</li>
            </ol>
        </nav>
    </div>

    <div class="row">
        <div class="col-md-8">
            <!-- Order Information -->
            <div class="info-card">
                <div class="card-header-custom header-primary">
                    <h5><i class="fas fa-info-circle"></i> Order Information</h5>
                </div>
                <div class="card-body-custom">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="info-row">
                                <strong>Order Date:</strong>
                                <span>@Model.SaleDate.ToString("f")</span>
                            </div>
                            <div class="info-row">
                                <strong>Customer:</strong>
                                <span>@Model.CustomerName</span>
                            </div>
                            <div class="info-row">
                                <strong>Email:</strong>
                                <span>@Model.CustomerEmail</span>
                            </div>
                            <div class="info-row">
                                <strong>Phone:</strong>
                                <span>@Model.CustomerPhone</span>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="info-row">
                                <strong>Total Amount:</strong>
                                <span>R @Model.TotalAmount.ToString("N2")</span>
                            </div>
                            <div class="info-row">
                                <strong>Payment Method:</strong>
                                <span>@Model.PaymentMethod</span>
                            </div>
                            <div class="info-row">
                                <strong>Payment Status:</strong>
                                <span class="badge bg-@(Model.PaymentStatus == "Completed" ? "success" : "warning")">@Model.PaymentStatus</span>
                            </div>
                            <div class="info-row">
                                <strong>Tracking:</strong>
                                <span><code>@Model.TrackingNumber</code></span>
                            </div>
                        </div>
                    </div>
                    <div class="mt-3">
                        <strong>Delivery Address:</strong>
                        <p class="mb-0 mt-2">@Model.DeliveryAddress</p>
                    </div>
                </div>
            </div>

            <!-- Order Items -->
            <div class="info-card">
                <div class="card-header-custom header-default">
                    <h5><i class="fas fa-boxes"></i> Order Items</h5>
                </div>
                <div class="card-body-custom p-0">
                    <div class="table-responsive">
                        <table class="modern-table">
                            <thead>
                                <tr>
                                    <th>Product</th>
                                    <th>Quantity</th>
                                    <th>Price</th>
                                    <th>Total</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Model.Items)
                                {
                                    <tr>
                                        <td>@item.Product.Name</td>
                                        <td>@item.Quantity</td>
                                        <td>R @item.Price.ToString("N2")</td>
                                        <td>R@((item.Quantity * item.Price).ToString("N2"))</td>
                                    </tr>
                                }
                            </tbody>
                            <tfoot>
                                <tr>
                                    <td colspan="3" class="text-end"><strong>Grand Total:</strong></td>
                                    <td><strong>R @Model.TotalAmount.ToString("N2")</strong></td>
                                </tr>
                            </tfoot>
                        </table>
                    </div>
                </div>
            </div>

            <!-- Status History -->
            <div class="info-card">
                <div class="card-header-custom header-default">
                    <h5><i class="fas fa-history"></i> Status History</h5>
                </div>
                <div class="card-body-custom">
                    <div class="timeline">
                        @foreach (var update in Model.OrderStatusUpdates.OrderByDescending(u => u.UpdateTime))
                        {
                            <div class="timeline-item">
                                <div class="timeline-marker"></div>
                                <div class="timeline-content">
                                    <h6>@update.Status</h6>
                                    <p class="text-muted mb-1">@update.UpdateTime.ToString("f")</p>
                                    @if (!string.IsNullOrEmpty(update.Notes))
                                    {
                                        <p class="mb-0">@update.Notes</p>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Management Actions -->
        <div class="col-md-4">
            <!-- Driver Assignment -->
            <!-- Driver Assignment -->
            <div class="info-card">
                <div class="card-header-custom header-info">
                    <h5><i class="fas fa-user-tie"></i> Driver Assignment</h5>
                </div>
                <div class="card-body-custom">
                    <div class="mb-3">
                        <label class="form-label">Current Driver:</label>
                        @if (Model.AssignedDriverId.HasValue)
                        {
                            <div class="driver-info">
                                <strong>@Model.DeliveryDriver</strong><br>
                                <small>Vehicle: @Model.VehicleType • @Model.VehicleNumber</small><br>
                                <small>Phone: @Model.DriverPhone</small><br>
                                <span class="badge bg-@(Model.IsActiveDelivery ? "success" : "secondary")">
                                    @(Model.IsActiveDelivery ? "ACTIVE DELIVERY" : "ASSIGNED")
                                </span>
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-warning mb-0">
                                <i class="fas fa-exclamation-triangle"></i> Unassigned
                            </div>
                        }
                    </div>

                    <form id="assignDriverForm">
                        @Html.Hidden("saleId", Model.SaleId)
                        <div class="mb-3">
                            <label class="form-label">Assign to Driver:</label>
                            <select name="driverUserId" class="form-select" id="driverSelect" required>
                                <option value="">-- Select Driver --</option>
                                @if (ViewBag.AvailableDrivers != null)
                                {
                                    foreach (FarmTrack.Models.User driver in ViewBag.AvailableDrivers)
                                    {
                                        <option value="@driver.UserId"
                                                data-phone="@driver.PhoneNumber"
                                                data-vehicle="@driver.VehicleType"
                                                data-plate="@driver.VehicleNumber">
                                            @driver.FullName
                                            @if (!string.IsNullOrEmpty(driver.VehicleType))
                                            {
                                                <text> - @driver.VehicleType</text>
                                            }
                                            @if (driver.IsOnlineAsDriver)
                                            {
                                                <text> (🟢 Online)</text>
                                            }
                                        </option>
                                    }
                                }
                            </select>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Driver Phone:</label>
                            <input type="text" name="driverPhone" class="form-control" id="driverPhoneDisplay" readonly>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Vehicle Info:</label>
                            <input type="text" class="form-control" id="vehicleInfoDisplay" readonly>
                        </div>
                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-success">
                                <i class="fas fa-user-plus"></i> Assign Driver
                            </button>
                            @if (Model.AssignedDriverId.HasValue)
                            {
                                <button type="button" class="btn btn-danger" onclick="unassignDriver()">
                                    <i class="fas fa-user-times"></i> Unassign Driver
                                </button>
                                @* ✅ FIXED URL *@
                                <a href="@Url.Action("LiveTrackingMap", "Products", new { id = Model.SaleId })"
                                   class="btn btn-info" target="_blank">
                                    <i class="fas fa-map-marked-alt"></i> Live Tracking
                                </a>
                            }
                        </div>
                    </form>
                </div>
            </div>

            <!-- Status Management -->
            <div class="info-card">
                <div class="card-header-custom header-success">
                    <h5><i class="fas fa-edit"></i> Status Management</h5>
                </div>
                <div class="card-body-custom">
                    <div class="status-display">
                        <label class="form-label">Current Status:</label>
                        <div>
                            <span class="badge bg-@GetStatusBadgeColor(Model.Status)">@Model.Status</span>
                        </div>
                    </div>

                    <form id="statusForm">
                        @Html.Hidden("saleId", Model.SaleId)
                        <div class="mb-3">
                            <label class="form-label">Update Status:</label>
                            <select name="status" class="form-select" required>
                                <option value="Pending" @(Model.Status == "Pending" ? "selected" : "")>Pending</option>
                                <option value="Confirmed" @(Model.Status == "Confirmed" ? "selected" : "")>Confirmed</option>
                                <option value="Assigned to Driver" @(Model.Status == "Assigned to Driver" ? "selected" : "")>Assigned to Driver</option>
                                <option value="Out for Delivery" @(Model.Status == "Out for Delivery" ? "selected" : "")>Out for Delivery</option>
                                <option value="Delivered" @(Model.Status == "Delivered" ? "selected" : "")>Delivered</option>
                                <option value="Cancelled" @(Model.Status == "Cancelled" ? "selected" : "")>Cancelled</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Notes:</label>
                            <textarea name="notes" class="form-control" rows="3" placeholder="Add update notes..."></textarea>
                        </div>
                        <button type="submit" class="btn btn-primary w-100">
                            <i class="fas fa-save"></i> Update Status
                        </button>
                    </form>

                    <!-- Quick Actions -->
                    <div class="mt-3">
                        <label class="form-label">Quick Actions:</label>
                        <div class="d-grid gap-2">
                            <button type="button" class="btn btn-sm btn-outline-info" onclick="quickUpdateStatus('Confirmed')">
                                <i class="fas fa-check"></i> Confirm Order
                            </button>
                            <button type="button" class="btn btn-sm btn-outline-primary" onclick="quickUpdateStatus('Out for Delivery')">
                                <i class="fas fa-shipping-fast"></i> Start Delivery
                            </button>
                            <button type="button" class="btn btn-sm btn-outline-success" onclick="quickUpdateStatus('Delivered')">
                                <i class="fas fa-flag-checkered"></i> Mark Delivered
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $('#driverSelect').change(function() {
            const selectedOption = $(this).find('option:selected');
            const phone = selectedOption.data('phone') || 'Not provided';
            const vehicle = selectedOption.data('vehicle') || 'Not specified';
            const plate = selectedOption.data('plate') || '';

            $('#driverPhoneDisplay').val(phone);
            $('#vehicleInfoDisplay').val(vehicle && plate ? `${vehicle} • ${plate}` : 'Not specified');
        });

        $('#assignDriverForm').submit(function(e) {
            e.preventDefault();

            const driverId = $('#driverSelect').val();
            if (!driverId) {
                alert('Please select a driver first.');
                return;
            }

            $.post('@Url.Action("AssignDriverToDelivery", "Products")', $(this).serialize())
                .done(function(response) {
                    if (response.success) {
                        alert(response.message);
                        location.reload();
                    } else {
                        alert('Error: ' + response.message);
                    }
                });
        });

        function unassignDriver() {
            if (!confirm('Unassign the driver?')) return;

            $.post('@Url.Action("UnassignDriver", "Products")', { saleId: @Model.SaleId })
                .done(function(response) {
                    if (response.success) {
                        alert(response.message);
                        location.reload();
                    } else {
                        alert('Error: ' + response.message);
                    }
                });
        }

        $('#statusForm').submit(function(e) {
            e.preventDefault();

            $.post('@Url.Action("UpdateOrderStatus", "Products")', $(this).serialize())
                .done(function(response) {
                    if (response.success) {
                        location.reload();
                    } else {
                        alert('Error: ' + response.message);
                    }
                });
        });

        function quickUpdateStatus(status) {
            if (confirm(`Update status to "${status}"?`)) {
                $.post('@Url.Action("UpdateOrderStatus", "Products")', {
                    saleId: @Model.SaleId,
                    status: status,
                    notes: 'Quick status update'
                })
                .done(function(response) {
                    if (response.success) {
                        location.reload();
                    } else {
                        alert('Error: ' + response.message);
                    }
                });
            }
        }

        function markAsPaid(orderId) {
            if (confirm('Mark this order as paid?')) {
                $.post('@Url.Action("UpdatePaymentStatus", "Products")', {
                    saleId: orderId,
                    paymentStatus: 'Completed'
                })
                .done(function(response) {
                    if (response.success) {
                        location.reload();
                    } else {
                        alert('Error: ' + response.message);
                    }
                });
            }
        }

        $(document).ready(function() {
            @if (Model.AssignedDriverId.HasValue)
            {
                <text>
                $('#driverSelect').val('@Model.AssignedDriverId').trigger('change');
                </text>
            }
        });

        setInterval(function() {
            $.get('@Url.Action("GetOrderStatus", "Products")', { saleId: @Model.SaleId })
                .done(function(data) {
                    if (data.currentStatus === 'Delivered') {
                        location.reload();
                    }
                });
        }, 30000);
    </script>
}

@functions {
    public string GetStatusBadgeColor(string status)
    {
        switch (status)
        {
            case "Pending": return "warning";
            case "Confirmed": return "info";
            case "Assigned to Driver": return "primary";
            case "Out for Delivery": return "success";
            case "Delivered": return "secondary";
            case "Cancelled": return "danger";
            default: return "secondary";
        }
    }
}