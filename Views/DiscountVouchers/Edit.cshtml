@model FarmTrack.Models.DiscountVoucher

@{
    ViewBag.Title = "Edit Discount Voucher";
}

<style>
    :root {
        --color-earth: #8B7355;
        --color-soil: #654321;
        --color-foliage: #4CAF50;
        --color-wheat: #F5DEB3;
        --color-hay: #DAA520;
        --color-danger: #FF6B6B;
        --color-white: #FFFFFF;
        --border-radius: 12px;
        --card-shadow: 0 6px 18px rgba(0,0,0,0.1);
    }

    body {
        background-color: #F9F7F4;
    }

    /* Dashboard Header */
    .dashboard-header {
        background: linear-gradient(135deg, var(--color-hay) 0%, #f0ad4e 100%);
        border-radius: var(--border-radius);
        padding: 30px;
        margin-bottom: 30px;
        position: relative;
        overflow: hidden;
        box-shadow: var(--card-shadow);
    }

    .dashboard-header::before {
        content: '';
        position: absolute;
        top: 0;
        right: 0;
        width: 250px;
        height: 100%;
        background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="%23FFFFFF" opacity="0.1"><path d="M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z"/></svg>');
        background-repeat: no-repeat;
        background-position: right center;
        background-size: 180px;
        opacity: 0.15;
    }

    .dashboard-header h1 {
        color: var(--color-white);
        font-weight: 700;
        margin-bottom: 10px;
        font-size: 2.2rem;
        display: flex;
        align-items: center;
        gap: 15px;
    }

    .dashboard-header h1 i {
        font-size: 2rem;
    }

    .dashboard-header p {
        color: rgba(255, 255, 255, 0.95);
        font-size: 1.1rem;
        margin: 0;
    }

    /* Form Card */
    .form-card {
        background-color: var(--color-white);
        border-radius: var(--border-radius);
        overflow: hidden;
        box-shadow: var(--card-shadow);
        margin-bottom: 30px;
    }

    .form-card-header {
        background: linear-gradient(135deg, var(--color-hay), #f0ad4e);
        color: var(--color-white);
        padding: 20px 25px;
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .form-card-header h5 {
        margin: 0;
        font-weight: 700;
        font-size: 1.2rem;
    }

    .form-card-body {
        padding: 30px;
    }

    /* Section Headers */
    .section-header {
        border-bottom: 2px solid var(--color-wheat);
        padding-bottom: 10px;
        margin-bottom: 20px;
        margin-top: 30px;
        color: var(--color-soil);
        font-weight: 600;
        font-size: 1.1rem;
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .section-header:first-of-type {
        margin-top: 0;
    }

    /* Form Groups */
    .form-group {
        margin-bottom: 20px;
    }

    .form-label {
        font-weight: 600;
        color: var(--color-soil);
        margin-bottom: 8px;
        display: block;
        font-size: 0.95rem;
    }

    .form-control {
        width: 100%;
        padding: 12px 15px;
        border: 2px solid #e0e0e0;
        border-radius: 8px;
        font-size: 0.95rem;
        transition: all 0.3s ease;
        background-color: #fafafa;
    }

    .form-control:focus {
        outline: none;
        border-color: var(--color-hay);
        background-color: var(--color-white);
        box-shadow: 0 0 0 3px rgba(218, 165, 32, 0.1);
    }

    .form-control:disabled,
    .form-control:read-only {
        background-color: #f5f5f5;
        cursor: not-allowed;
        color: #999;
    }

    textarea.form-control {
        resize: vertical;
        min-height: 100px;
    }

    /* Input Groups */
    .input-group {
        display: flex;
        align-items: stretch;
    }

    .input-group-text {
        background: linear-gradient(135deg, var(--color-earth), var(--color-soil));
        color: var(--color-white);
        padding: 12px 15px;
        border: 2px solid var(--color-earth);
        border-right: none;
        border-radius: 8px 0 0 8px;
        font-weight: 600;
        min-width: 50px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .input-group .form-control {
        border-radius: 0 8px 8px 0;
        border-left: none;
    }

    /* Form Text */
    .form-text {
        font-size: 0.85rem;
        color: #666;
        margin-top: 5px;
        display: block;
    }

    /* Validation Messages */
    .text-danger {
        color: var(--color-danger);
        font-size: 0.85rem;
        margin-top: 5px;
        display: block;
    }

    .field-validation-error {
        color: var(--color-danger);
        font-size: 0.85rem;
        margin-top: 5px;
        display: block;
    }

    .input-validation-error {
        border-color: var(--color-danger) !important;
    }

    /* Switches */
    .form-check {
        padding-left: 2.5rem;
        margin-bottom: 15px;
    }

    .form-check-input {
        width: 50px;
        height: 26px;
        margin-left: -2.5rem;
        cursor: pointer;
        background-color: #ccc;
        border: none;
        border-radius: 13px;
        position: relative;
        transition: all 0.3s ease;
    }

    .form-check-input:checked {
        background-color: var(--color-foliage);
    }

    .form-check-input:focus {
        box-shadow: 0 0 0 3px rgba(76, 175, 80, 0.25);
    }

    .form-check-label {
        font-weight: 600;
        color: var(--color-soil);
        margin-bottom: 5px;
    }

    /* Buttons */
    .btn {
        padding: 12px 30px;
        border-radius: 8px;
        font-weight: 600;
        font-size: 0.95rem;
        display: inline-flex;
        align-items: center;
        gap: 8px;
        border: none;
        cursor: pointer;
        transition: all 0.3s ease;
        text-decoration: none;
    }

    .btn-primary {
        background: linear-gradient(135deg, var(--color-hay), #f0ad4e);
        color: white;
        box-shadow: 0 4px 15px rgba(218, 165, 32, 0.3);
    }

    .btn-primary:hover {
        background: linear-gradient(135deg, #f0ad4e, var(--color-hay));
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(218, 165, 32, 0.4);
        color: white;
    }

    .btn-secondary {
        background: linear-gradient(135deg, #9e9e9e, #757575);
        color: white;
        box-shadow: 0 4px 15px rgba(158, 158, 158, 0.3);
    }

    .btn-secondary:hover {
        background: linear-gradient(135deg, #757575, #616161);
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(158, 158, 158, 0.4);
        color: white;
    }

    .btn-danger {
        background: linear-gradient(135deg, var(--color-danger), #e74c3c);
        color: white;
        box-shadow: 0 4px 15px rgba(255, 107, 107, 0.3);
    }

    .btn-danger:hover {
        background: linear-gradient(135deg, #e74c3c, #c0392b);
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(255, 107, 107, 0.4);
        color: white;
    }

    /* Action Bar */
    .action-bar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 30px;
        padding-top: 20px;
        border-top: 2px solid #f0f0f0;
    }

    /* Stats Badge */
    .stats-badge {
        background: linear-gradient(135deg, #e3f2fd, #bbdefb);
        border-left: 4px solid #2196F3;
        padding: 15px;
        border-radius: 8px;
        margin-bottom: 20px;
        display: flex;
        align-items: center;
        gap: 15px;
    }

    .stats-badge i {
        font-size: 2rem;
        color: #2196F3;
    }

    .stats-content {
        flex: 1;
    }

    .stats-content h6 {
        margin: 0 0 5px 0;
        color: #1976D2;
        font-weight: 600;
    }

    .stats-content p {
        margin: 0;
        color: #555;
        font-size: 0.9rem;
    }

    .stats-number {
        font-size: 2rem;
        font-weight: 700;
        color: #1976D2;
    }

    /* Warning Box */
    .warning-box {
        background: linear-gradient(135deg, #fff3e0, #ffe0b2);
        border-left: 4px solid #ff9800;
        padding: 15px;
        border-radius: 8px;
        margin-bottom: 20px;
        display: flex;
        align-items: start;
        gap: 12px;
    }

    .warning-box i {
        color: #f57c00;
        font-size: 1.3rem;
        margin-top: 2px;
    }

    .warning-box-content {
        flex: 1;
    }

    .warning-box-content strong {
        display: block;
        color: #e65100;
        margin-bottom: 5px;
        font-size: 1rem;
    }

    .warning-box-content p {
        margin: 0;
        color: #666;
        font-size: 0.9rem;
        line-height: 1.5;
    }

    /* Responsive */
    @@media (max-width: 768px) {
        .dashboard-header {
            padding: 20px;
        }

        .dashboard-header h1 {
            font-size: 1.8rem;
        }

        .form-card-body {
            padding: 20px;
        }

        .action-bar {
            flex-direction: column-reverse;
            gap: 15px;
        }

        .action-bar .btn {
            width: 100%;
            justify-content: center;
        }

        .action-bar > div {
            width: 100%;
        }

        .action-bar > div .btn {
            width: 100%;
        }
    }
</style>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">

<div class="container-fluid mt-4">
    <!-- Dashboard Header -->
    <div class="dashboard-header">
        <h1><i class="fas fa-edit"></i> Edit Discount Voucher</h1>
        <p>Update voucher details and settings for <strong>@Model.Code</strong></p>
    </div>

    <!-- Form Card -->
    <div class="form-card">
        <div class="form-card-header">
            <i class="fas fa-tag"></i>
            <h5>Voucher Details</h5>
        </div>
        <div class="form-card-body">
            @using (Html.BeginForm("Edit", "DiscountVouchers", FormMethod.Post, new { @class = "voucher-form" }))
            {
                @Html.AntiForgeryToken()
                @Html.HiddenFor(model => model.VoucherId)
                @Html.HiddenFor(model => model.UsedCount)
                @Html.HiddenFor(model => model.VoucherType)

                <!-- Usage Stats Badge -->
                <div class="stats-badge">
                    <i class="fas fa-chart-line"></i>
                    <div class="stats-content">
                        <h6>Voucher Usage</h6>
                        <p>This voucher has been used <strong>@Model.UsedCount</strong> times</p>
                    </div>
                    <div class="stats-number">@Model.UsedCount</div>
                </div>

                <!-- Warning Box -->
                <div class="warning-box">
                    <i class="fas fa-exclamation-triangle"></i>
                    <div class="warning-box-content">
                        <strong>Important Notice</strong>
                        <p>Voucher code and discount type cannot be changed after creation. Only active vouchers can be used by customers.</p>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6">
                        <!-- Basic Information Section -->
                        <h5 class="section-header">
                            <i class="fas fa-info-circle"></i> Basic Information
                        </h5>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Code, new { @class = "form-label" })
                            @Html.TextBoxFor(model => model.Code, new { @class = "form-control", @readonly = "readonly" })
                            <small class="form-text">Voucher code cannot be changed after creation</small>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Description, new { @class = "form-label" })
                            @Html.TextAreaFor(model => model.Description, new { @class = "form-control", rows = "3", placeholder = "Describe this voucher" })
                            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.VoucherType, "Discount Type", new { @class = "form-label" })
                                    <input type="text" class="form-control" value="@Model.VoucherType" readonly />
                                    <small class="form-text">Voucher type cannot be changed</small>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.DiscountValue, "Discount Amount", new { @class = "form-label" })
                                    <div class="input-group">
                                        <span class="input-group-text" id="discountPrefix">
                                            @(Model.VoucherType == FarmTrack.Models.VoucherType.FixedAmount ? "R" : "%")
                                        </span>
                                        @Html.TextBoxFor(model => model.DiscountValue, new { @class = "form-control", type = "number", step = "0.01", min = "0" })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.DiscountValue, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <!-- Validity & Limits Section -->
                        <h5 class="section-header">
                            <i class="fas fa-calendar-alt"></i> Validity & Limits
                        </h5>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.ValidFrom, "Valid From", new { @class = "form-label" })
                                    @Html.TextBoxFor(model => model.ValidFrom, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date" })
                                    @Html.ValidationMessageFor(model => model.ValidFrom, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.ValidTo, "Valid Until", new { @class = "form-label" })
                                    @Html.TextBoxFor(model => model.ValidTo, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date" })
                                    @Html.ValidationMessageFor(model => model.ValidTo, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.UsageLimit, "Usage Limit", new { @class = "form-label" })
                                    @Html.TextBoxFor(model => model.UsageLimit, new { @class = "form-control", type = "number", min = "0" })
                                    @Html.ValidationMessageFor(model => model.UsageLimit, "", new { @class = "text-danger" })
                                    <small class="form-text">0 = unlimited. Current uses: <strong>@Model.UsedCount</strong></small>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.MinimumOrderAmount, "Minimum Order (R)", new { @class = "form-label" })
                                    <div class="input-group">
                                        <span class="input-group-text">R</span>
                                        @Html.TextBoxFor(model => model.MinimumOrderAmount, new { @class = "form-control", type = "number", step = "0.01", min = "0" })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.MinimumOrderAmount, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        @if (Model.VoucherType == FarmTrack.Models.VoucherType.Percentage)
                        {
                            <div class="form-group" id="maxDiscountGroup">
                                @Html.LabelFor(model => model.MaximumDiscount, "Maximum Discount (R)", new { @class = "form-label" })
                                <div class="input-group">
                                    <span class="input-group-text">R</span>
                                    @Html.TextBoxFor(model => model.MaximumDiscount, new { @class = "form-control", type = "number", step = "0.01", min = "0" })
                                </div>
                                @Html.ValidationMessageFor(model => model.MaximumDiscount, "", new { @class = "text-danger" })
                                <small class="form-text">Maximum discount cap for percentage vouchers</small>
                            </div>
                        }
                    </div>
                </div>

                <!-- Applicability Settings Section -->
                <h5 class="section-header">
                    <i class="fas fa-filter"></i> Applicability Settings
                </h5>

                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Applicability, "Applies To", new { @class = "form-label" })
                            @Html.DropDownListFor(model => model.Applicability,
                                new SelectList(Enum.GetValues(typeof(FarmTrack.Models.VoucherApplicability))),
                                "Select Applicability",
                                new { @class = "form-control", id = "applicability" })
                            @Html.ValidationMessageFor(model => model.Applicability, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group" id="categoryGroup" style="display: none;">
                            @Html.LabelFor(model => model.ApplicableCategory, "Category", new { @class = "form-label" })
                            @Html.DropDownListFor(model => model.ApplicableCategory,
                                new SelectList(ViewBag.Categories, Model.ApplicableCategory),
                                "Select Category",
                                new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.ApplicableCategory, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group" id="productGroup" style="display: none;">
                            @Html.LabelFor(model => model.ApplicableProductId, "Product", new { @class = "form-label" })
                            @Html.DropDownList("ApplicableProductId", null, "Select Product", new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.ApplicableProductId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                <!-- Additional Settings Section -->
                <h5 class="section-header">
                    <i class="fas fa-sliders-h"></i> Additional Settings
                </h5>

                <div class="row">
                    <div class="col-md-6">
                        <div class="form-check form-switch">
                            @Html.CheckBoxFor(model => model.IsSingleUse, new { @class = "form-check-input", id = "IsSingleUse" })
                            @Html.LabelFor(model => model.IsSingleUse, new { @class = "form-check-label", @for = "IsSingleUse" })
                            <small class="form-text d-block">If enabled, each customer can use this voucher only once</small>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-check form-switch">
                            @Html.CheckBoxFor(model => model.IsActive, new { @class = "form-check-input", id = "IsActive" })
                            @Html.LabelFor(model => model.IsActive, new { @class = "form-check-label", @for = "IsActive" })
                            <small class="form-text d-block">Inactive vouchers cannot be used by customers</small>
                        </div>
                    </div>
                </div>

                <!-- Action Buttons -->
                <div class="action-bar">
                    <a href="@Url.Action("Index", "DiscountVouchers")" class="btn btn-secondary">
                        <i class="fas fa-arrow-left"></i> Back to List
                    </a>
                    <div>
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-save"></i> Update Voucher
                        </button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $(document).ready(function () {
            // Show/hide applicability fields based on current value
            function updateApplicabilityFields() {
                var applicability = $('#applicability').val();
                $('#categoryGroup').hide();
                $('#productGroup').hide();

                if (applicability === '2') { // SpecificCategory
                    $('#categoryGroup').slideDown();
                } else if (applicability === '3') { // SpecificProduct
                    $('#productGroup').slideDown();
                }
            }

            // Initial update
            updateApplicabilityFields();

            // Update on change
            $('#applicability').change(updateApplicabilityFields);

            // Form validation
            $('.voucher-form').submit(function (e) {
                var voucherType = '@Model.VoucherType';
                var discountValue = parseFloat($('#DiscountValue').val());

                if (!discountValue || discountValue <= 0) {
                    alert('Please enter a valid discount amount');
                    e.preventDefault();
                    return false;
                }

                if (voucherType === 'Percentage' && discountValue > 100) {
                    alert('Percentage discount cannot exceed 100%');
                    e.preventDefault();
                    return false;
                }

                var validFrom = new Date($('#ValidFrom').val());
                var validTo = new Date($('#ValidTo').val());

                if (validTo <= validFrom) {
                    alert('Valid To date must be after Valid From date');
                    e.preventDefault();
                    return false;
                }

                // Check if usage limit is less than current uses
                var usageLimit = parseInt($('#UsageLimit').val());
                var usedCount = @Model.UsedCount;

                if (usageLimit > 0 && usageLimit < usedCount) {
                    if (!confirm('Warning: Usage limit (' + usageLimit + ') is less than current uses (' + usedCount + '). This voucher will become inactive. Continue?')) {
                        e.preventDefault();
                        return false;
                    }
                }

                return true;
            });
        });
    </script>
}